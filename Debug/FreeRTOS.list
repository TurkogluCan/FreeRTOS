
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003128  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080032b8  080032b8  000132b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800330c  0800330c  0001330c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003310  08003310  00013310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000038  20000000  08003314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020038  2**0
                  CONTENTS
  7 .bss          00012e4c  20000038  20000038  00020038  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20012e84  20012e84  00020038  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000de3f  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000022f1  00000000  00000000  0002dea7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c10  00000000  00000000  00030198  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000af8  00000000  00000000  00030da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005c66  00000000  00000000  000318a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000047c1  00000000  00000000  00037506  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003bcc7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000031d4  00000000  00000000  0003bd44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000038 	.word	0x20000038
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080032a0 	.word	0x080032a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000003c 	.word	0x2000003c
 80001cc:	080032a0 	.word	0x080032a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f103 0208 	add.w	r2, r3, #8
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f04f 32ff 	mov.w	r2, #4294967295
 80001f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f103 0208 	add.w	r2, r3, #8
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f103 0208 	add.w	r2, r3, #8
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr

08000220 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2200      	movs	r2, #0
 800022c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr

0800023a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800023a:	b480      	push	{r7}
 800023c:	b085      	sub	sp, #20
 800023e:	af00      	add	r7, sp, #0
 8000240:	6078      	str	r0, [r7, #4]
 8000242:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	68fa      	ldr	r2, [r7, #12]
 800024e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	689a      	ldr	r2, [r3, #8]
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	689b      	ldr	r3, [r3, #8]
 800025c:	683a      	ldr	r2, [r7, #0]
 800025e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	683a      	ldr	r2, [r7, #0]
 8000264:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	1c5a      	adds	r2, r3, #1
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	601a      	str	r2, [r3, #0]
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr

08000282 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000282:	b480      	push	{r7}
 8000284:	b085      	sub	sp, #20
 8000286:	af00      	add	r7, sp, #0
 8000288:	6078      	str	r0, [r7, #4]
 800028a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000298:	d103      	bne.n	80002a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	691b      	ldr	r3, [r3, #16]
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	e00c      	b.n	80002bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	3308      	adds	r3, #8
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	e002      	b.n	80002b0 <vListInsert+0x2e>
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	60fb      	str	r3, [r7, #12]
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	681a      	ldr	r2, [r3, #0]
 80002b6:	68bb      	ldr	r3, [r7, #8]
 80002b8:	429a      	cmp	r2, r3
 80002ba:	d9f6      	bls.n	80002aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	685a      	ldr	r2, [r3, #4]
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	683a      	ldr	r2, [r7, #0]
 80002ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	68fa      	ldr	r2, [r7, #12]
 80002d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	683a      	ldr	r2, [r7, #0]
 80002d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	687a      	ldr	r2, [r7, #4]
 80002dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	1c5a      	adds	r2, r3, #1
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	601a      	str	r2, [r3, #0]
}
 80002e8:	bf00      	nop
 80002ea:	3714      	adds	r7, #20
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr

080002f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	691b      	ldr	r3, [r3, #16]
 8000300:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	685b      	ldr	r3, [r3, #4]
 8000306:	687a      	ldr	r2, [r7, #4]
 8000308:	6892      	ldr	r2, [r2, #8]
 800030a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	6852      	ldr	r2, [r2, #4]
 8000314:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	685a      	ldr	r2, [r3, #4]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	429a      	cmp	r2, r3
 800031e:	d103      	bne.n	8000328 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	689a      	ldr	r2, [r3, #8]
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	1e5a      	subs	r2, r3, #1
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	681b      	ldr	r3, [r3, #0]
}
 800033c:	4618      	mov	r0, r3
 800033e:	3714      	adds	r7, #20
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr

08000348 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
 800034e:	60f8      	str	r0, [r7, #12]
 8000350:	60b9      	str	r1, [r7, #8]
 8000352:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	3b04      	subs	r3, #4
 8000358:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	3b04      	subs	r3, #4
 8000366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	f023 0201 	bic.w	r2, r3, #1
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	3b04      	subs	r3, #4
 8000376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000378:	4a0c      	ldr	r2, [pc, #48]	; (80003ac <pxPortInitialiseStack+0x64>)
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	3b14      	subs	r3, #20
 8000382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000384:	687a      	ldr	r2, [r7, #4]
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	3b04      	subs	r3, #4
 800038e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	f06f 0202 	mvn.w	r2, #2
 8000396:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	3b20      	subs	r3, #32
 800039c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800039e:	68fb      	ldr	r3, [r7, #12]
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	3714      	adds	r7, #20
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr
 80003ac:	080003b1 	.word	0x080003b1

080003b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80003b6:	2300      	movs	r3, #0
 80003b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <prvTaskExitError+0x50>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003c2:	d009      	beq.n	80003d8 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80003c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003c8:	f383 8811 	msr	BASEPRI, r3
 80003cc:	f3bf 8f6f 	isb	sy
 80003d0:	f3bf 8f4f 	dsb	sy
 80003d4:	60fb      	str	r3, [r7, #12]
 80003d6:	e7fe      	b.n	80003d6 <prvTaskExitError+0x26>
 80003d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003dc:	f383 8811 	msr	BASEPRI, r3
 80003e0:	f3bf 8f6f 	isb	sy
 80003e4:	f3bf 8f4f 	dsb	sy
 80003e8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80003ea:	bf00      	nop
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d0fc      	beq.n	80003ec <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80003f2:	bf00      	nop
 80003f4:	3714      	adds	r7, #20
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	20000000 	.word	0x20000000
	...

08000410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000410:	4b07      	ldr	r3, [pc, #28]	; (8000430 <pxCurrentTCBConst2>)
 8000412:	6819      	ldr	r1, [r3, #0]
 8000414:	6808      	ldr	r0, [r1, #0]
 8000416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800041a:	f380 8809 	msr	PSP, r0
 800041e:	f3bf 8f6f 	isb	sy
 8000422:	f04f 0000 	mov.w	r0, #0
 8000426:	f380 8811 	msr	BASEPRI, r0
 800042a:	4770      	bx	lr
 800042c:	f3af 8000 	nop.w

08000430 <pxCurrentTCBConst2>:
 8000430:	20012c7c 	.word	0x20012c7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000434:	bf00      	nop
 8000436:	bf00      	nop

08000438 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8000438:	4808      	ldr	r0, [pc, #32]	; (800045c <prvPortStartFirstTask+0x24>)
 800043a:	6800      	ldr	r0, [r0, #0]
 800043c:	6800      	ldr	r0, [r0, #0]
 800043e:	f380 8808 	msr	MSP, r0
 8000442:	f04f 0000 	mov.w	r0, #0
 8000446:	f380 8814 	msr	CONTROL, r0
 800044a:	b662      	cpsie	i
 800044c:	b661      	cpsie	f
 800044e:	f3bf 8f4f 	dsb	sy
 8000452:	f3bf 8f6f 	isb	sy
 8000456:	df00      	svc	0
 8000458:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800045a:	bf00      	nop
 800045c:	e000ed08 	.word	0xe000ed08

08000460 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b086      	sub	sp, #24
 8000464:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000466:	4b44      	ldr	r3, [pc, #272]	; (8000578 <xPortStartScheduler+0x118>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a44      	ldr	r2, [pc, #272]	; (800057c <xPortStartScheduler+0x11c>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d109      	bne.n	8000484 <xPortStartScheduler+0x24>
 8000470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000474:	f383 8811 	msr	BASEPRI, r3
 8000478:	f3bf 8f6f 	isb	sy
 800047c:	f3bf 8f4f 	dsb	sy
 8000480:	613b      	str	r3, [r7, #16]
 8000482:	e7fe      	b.n	8000482 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000484:	4b3c      	ldr	r3, [pc, #240]	; (8000578 <xPortStartScheduler+0x118>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a3d      	ldr	r2, [pc, #244]	; (8000580 <xPortStartScheduler+0x120>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d109      	bne.n	80004a2 <xPortStartScheduler+0x42>
 800048e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000492:	f383 8811 	msr	BASEPRI, r3
 8000496:	f3bf 8f6f 	isb	sy
 800049a:	f3bf 8f4f 	dsb	sy
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	e7fe      	b.n	80004a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80004a2:	4b38      	ldr	r3, [pc, #224]	; (8000584 <xPortStartScheduler+0x124>)
 80004a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	22ff      	movs	r2, #255	; 0xff
 80004b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80004bc:	78fb      	ldrb	r3, [r7, #3]
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80004c4:	b2da      	uxtb	r2, r3
 80004c6:	4b30      	ldr	r3, [pc, #192]	; (8000588 <xPortStartScheduler+0x128>)
 80004c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80004ca:	4b30      	ldr	r3, [pc, #192]	; (800058c <xPortStartScheduler+0x12c>)
 80004cc:	2207      	movs	r2, #7
 80004ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80004d0:	e009      	b.n	80004e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80004d2:	4b2e      	ldr	r3, [pc, #184]	; (800058c <xPortStartScheduler+0x12c>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	3b01      	subs	r3, #1
 80004d8:	4a2c      	ldr	r2, [pc, #176]	; (800058c <xPortStartScheduler+0x12c>)
 80004da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80004dc:	78fb      	ldrb	r3, [r7, #3]
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80004e6:	78fb      	ldrb	r3, [r7, #3]
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ee:	2b80      	cmp	r3, #128	; 0x80
 80004f0:	d0ef      	beq.n	80004d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80004f2:	4b26      	ldr	r3, [pc, #152]	; (800058c <xPortStartScheduler+0x12c>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f1c3 0307 	rsb	r3, r3, #7
 80004fa:	2b04      	cmp	r3, #4
 80004fc:	d009      	beq.n	8000512 <xPortStartScheduler+0xb2>
 80004fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000502:	f383 8811 	msr	BASEPRI, r3
 8000506:	f3bf 8f6f 	isb	sy
 800050a:	f3bf 8f4f 	dsb	sy
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	e7fe      	b.n	8000510 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000512:	4b1e      	ldr	r3, [pc, #120]	; (800058c <xPortStartScheduler+0x12c>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	021b      	lsls	r3, r3, #8
 8000518:	4a1c      	ldr	r2, [pc, #112]	; (800058c <xPortStartScheduler+0x12c>)
 800051a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800051c:	4b1b      	ldr	r3, [pc, #108]	; (800058c <xPortStartScheduler+0x12c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000524:	4a19      	ldr	r2, [pc, #100]	; (800058c <xPortStartScheduler+0x12c>)
 8000526:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	b2da      	uxtb	r2, r3
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000530:	4a17      	ldr	r2, [pc, #92]	; (8000590 <xPortStartScheduler+0x130>)
 8000532:	4b17      	ldr	r3, [pc, #92]	; (8000590 <xPortStartScheduler+0x130>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800053a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800053c:	4a14      	ldr	r2, [pc, #80]	; (8000590 <xPortStartScheduler+0x130>)
 800053e:	4b14      	ldr	r3, [pc, #80]	; (8000590 <xPortStartScheduler+0x130>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000546:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000548:	f000 f8d6 	bl	80006f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800054c:	4b11      	ldr	r3, [pc, #68]	; (8000594 <xPortStartScheduler+0x134>)
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8000552:	f000 f8f5 	bl	8000740 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8000556:	4a10      	ldr	r2, [pc, #64]	; (8000598 <xPortStartScheduler+0x138>)
 8000558:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <xPortStartScheduler+0x138>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000560:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8000562:	f7ff ff69 	bl	8000438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8000566:	f001 faad 	bl	8001ac4 <vTaskSwitchContext>
	prvTaskExitError();
 800056a:	f7ff ff21 	bl	80003b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800056e:	2300      	movs	r3, #0
}
 8000570:	4618      	mov	r0, r3
 8000572:	3718      	adds	r7, #24
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	e000ed00 	.word	0xe000ed00
 800057c:	410fc271 	.word	0x410fc271
 8000580:	410fc270 	.word	0x410fc270
 8000584:	e000e400 	.word	0xe000e400
 8000588:	20000054 	.word	0x20000054
 800058c:	20000058 	.word	0x20000058
 8000590:	e000ed20 	.word	0xe000ed20
 8000594:	20000000 	.word	0x20000000
 8000598:	e000ef34 	.word	0xe000ef34

0800059c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a6:	f383 8811 	msr	BASEPRI, r3
 80005aa:	f3bf 8f6f 	isb	sy
 80005ae:	f3bf 8f4f 	dsb	sy
 80005b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <vPortEnterCritical+0x54>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	3301      	adds	r3, #1
 80005ba:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <vPortEnterCritical+0x54>)
 80005bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80005be:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <vPortEnterCritical+0x54>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d10e      	bne.n	80005e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <vPortEnterCritical+0x58>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d009      	beq.n	80005e4 <vPortEnterCritical+0x48>
 80005d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005d4:	f383 8811 	msr	BASEPRI, r3
 80005d8:	f3bf 8f6f 	isb	sy
 80005dc:	f3bf 8f4f 	dsb	sy
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	e7fe      	b.n	80005e2 <vPortEnterCritical+0x46>
	}
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	20000000 	.word	0x20000000
 80005f4:	e000ed04 	.word	0xe000ed04

080005f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <vPortExitCritical+0x4c>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d109      	bne.n	800061a <vPortExitCritical+0x22>
 8000606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800060a:	f383 8811 	msr	BASEPRI, r3
 800060e:	f3bf 8f6f 	isb	sy
 8000612:	f3bf 8f4f 	dsb	sy
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	e7fe      	b.n	8000618 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <vPortExitCritical+0x4c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	3b01      	subs	r3, #1
 8000620:	4a08      	ldr	r2, [pc, #32]	; (8000644 <vPortExitCritical+0x4c>)
 8000622:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <vPortExitCritical+0x4c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d104      	bne.n	8000636 <vPortExitCritical+0x3e>
 800062c:	2300      	movs	r3, #0
 800062e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000000 	.word	0x20000000
	...

08000650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000650:	f3ef 8009 	mrs	r0, PSP
 8000654:	f3bf 8f6f 	isb	sy
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <pxCurrentTCBConst>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	f01e 0f10 	tst.w	lr, #16
 8000660:	bf08      	it	eq
 8000662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800066a:	6010      	str	r0, [r2, #0]
 800066c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000670:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000674:	f380 8811 	msr	BASEPRI, r0
 8000678:	f3bf 8f4f 	dsb	sy
 800067c:	f3bf 8f6f 	isb	sy
 8000680:	f001 fa20 	bl	8001ac4 <vTaskSwitchContext>
 8000684:	f04f 0000 	mov.w	r0, #0
 8000688:	f380 8811 	msr	BASEPRI, r0
 800068c:	bc09      	pop	{r0, r3}
 800068e:	6819      	ldr	r1, [r3, #0]
 8000690:	6808      	ldr	r0, [r1, #0]
 8000692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000696:	f01e 0f10 	tst.w	lr, #16
 800069a:	bf08      	it	eq
 800069c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80006a0:	f380 8809 	msr	PSP, r0
 80006a4:	f3bf 8f6f 	isb	sy
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	f3af 8000 	nop.w

080006b0 <pxCurrentTCBConst>:
 80006b0:	20012c7c 	.word	0x20012c7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop

080006b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
	__asm volatile
 80006be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006c2:	f383 8811 	msr	BASEPRI, r3
 80006c6:	f3bf 8f6f 	isb	sy
 80006ca:	f3bf 8f4f 	dsb	sy
 80006ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80006d0:	f001 f940 	bl	8001954 <xTaskIncrementTick>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d003      	beq.n	80006e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <SysTick_Handler+0x3c>)
 80006dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	2300      	movs	r3, #0
 80006e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	e000ed04 	.word	0xe000ed04

080006f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80006fc:	4b0b      	ldr	r3, [pc, #44]	; (800072c <vPortSetupTimerInterrupt+0x34>)
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <vPortSetupTimerInterrupt+0x38>)
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000708:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <vPortSetupTimerInterrupt+0x3c>)
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <vPortSetupTimerInterrupt+0x40>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	490b      	ldr	r1, [pc, #44]	; (800073c <vPortSetupTimerInterrupt+0x44>)
 8000710:	fba1 1303 	umull	r1, r3, r1, r3
 8000714:	099b      	lsrs	r3, r3, #6
 8000716:	3b01      	subs	r3, #1
 8000718:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800071a:	4b04      	ldr	r3, [pc, #16]	; (800072c <vPortSetupTimerInterrupt+0x34>)
 800071c:	2207      	movs	r2, #7
 800071e:	601a      	str	r2, [r3, #0]
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000e010 	.word	0xe000e010
 8000730:	e000e018 	.word	0xe000e018
 8000734:	e000e014 	.word	0xe000e014
 8000738:	20000024 	.word	0x20000024
 800073c:	10624dd3 	.word	0x10624dd3

08000740 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8000740:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000750 <vPortEnableVFP+0x10>
 8000744:	6801      	ldr	r1, [r0, #0]
 8000746:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074a:	6001      	str	r1, [r0, #0]
 800074c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800074e:	bf00      	nop
 8000750:	e000ed88 	.word	0xe000ed88

08000754 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800075a:	f3ef 8305 	mrs	r3, IPSR
 800075e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	2b0f      	cmp	r3, #15
 8000764:	d913      	bls.n	800078e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000766:	4a16      	ldr	r2, [pc, #88]	; (80007c0 <vPortValidateInterruptPriority+0x6c>)
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	4413      	add	r3, r2
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <vPortValidateInterruptPriority+0x70>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	7afa      	ldrb	r2, [r7, #11]
 8000776:	429a      	cmp	r2, r3
 8000778:	d209      	bcs.n	800078e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800077a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800077e:	f383 8811 	msr	BASEPRI, r3
 8000782:	f3bf 8f6f 	isb	sy
 8000786:	f3bf 8f4f 	dsb	sy
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	e7fe      	b.n	800078c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <vPortValidateInterruptPriority+0x74>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000796:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <vPortValidateInterruptPriority+0x78>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	429a      	cmp	r2, r3
 800079c:	d909      	bls.n	80007b2 <vPortValidateInterruptPriority+0x5e>
 800079e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007a2:	f383 8811 	msr	BASEPRI, r3
 80007a6:	f3bf 8f6f 	isb	sy
 80007aa:	f3bf 8f4f 	dsb	sy
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	e7fe      	b.n	80007b0 <vPortValidateInterruptPriority+0x5c>
	}
 80007b2:	bf00      	nop
 80007b4:	3714      	adds	r7, #20
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000e3f0 	.word	0xe000e3f0
 80007c4:	20000054 	.word	0x20000054
 80007c8:	e000ed0c 	.word	0xe000ed0c
 80007cc:	20000058 	.word	0x20000058

080007d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80007dc:	f001 f800 	bl	80017e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80007e0:	4b59      	ldr	r3, [pc, #356]	; (8000948 <pvPortMalloc+0x178>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d101      	bne.n	80007ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80007e8:	f000 f91a 	bl	8000a20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80007ec:	4b57      	ldr	r3, [pc, #348]	; (800094c <pvPortMalloc+0x17c>)
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4013      	ands	r3, r2
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	f040 8091 	bne.w	800091c <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d01c      	beq.n	800083a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8000800:	2208      	movs	r2, #8
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4413      	add	r3, r2
 8000806:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	2b00      	cmp	r3, #0
 8000810:	d013      	beq.n	800083a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	f023 0307 	bic.w	r3, r3, #7
 8000818:	3308      	adds	r3, #8
 800081a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f003 0307 	and.w	r3, r3, #7
 8000822:	2b00      	cmp	r3, #0
 8000824:	d009      	beq.n	800083a <pvPortMalloc+0x6a>
 8000826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800082a:	f383 8811 	msr	BASEPRI, r3
 800082e:	f3bf 8f6f 	isb	sy
 8000832:	f3bf 8f4f 	dsb	sy
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	e7fe      	b.n	8000838 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d06d      	beq.n	800091c <pvPortMalloc+0x14c>
 8000840:	4b43      	ldr	r3, [pc, #268]	; (8000950 <pvPortMalloc+0x180>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	429a      	cmp	r2, r3
 8000848:	d868      	bhi.n	800091c <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800084a:	4b42      	ldr	r3, [pc, #264]	; (8000954 <pvPortMalloc+0x184>)
 800084c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800084e:	4b41      	ldr	r3, [pc, #260]	; (8000954 <pvPortMalloc+0x184>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000854:	e004      	b.n	8000860 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8000856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000858:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800085a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	429a      	cmp	r2, r3
 8000868:	d203      	bcs.n	8000872 <pvPortMalloc+0xa2>
 800086a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d1f1      	bne.n	8000856 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000872:	4b35      	ldr	r3, [pc, #212]	; (8000948 <pvPortMalloc+0x178>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000878:	429a      	cmp	r2, r3
 800087a:	d04f      	beq.n	800091c <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800087c:	6a3b      	ldr	r3, [r7, #32]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2208      	movs	r2, #8
 8000882:	4413      	add	r3, r2
 8000884:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	6a3b      	ldr	r3, [r7, #32]
 800088c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000890:	685a      	ldr	r2, [r3, #4]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	1ad2      	subs	r2, r2, r3
 8000896:	2308      	movs	r3, #8
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	429a      	cmp	r2, r3
 800089c:	d91e      	bls.n	80008dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800089e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4413      	add	r3, r2
 80008a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	f003 0307 	and.w	r3, r3, #7
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d009      	beq.n	80008c4 <pvPortMalloc+0xf4>
 80008b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008b4:	f383 8811 	msr	BASEPRI, r3
 80008b8:	f3bf 8f6f 	isb	sy
 80008bc:	f3bf 8f4f 	dsb	sy
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	e7fe      	b.n	80008c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80008c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c6:	685a      	ldr	r2, [r3, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	1ad2      	subs	r2, r2, r3
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80008d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80008d6:	69b8      	ldr	r0, [r7, #24]
 80008d8:	f000 f904 	bl	8000ae4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80008dc:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <pvPortMalloc+0x180>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	4a1a      	ldr	r2, [pc, #104]	; (8000950 <pvPortMalloc+0x180>)
 80008e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80008ea:	4b19      	ldr	r3, [pc, #100]	; (8000950 <pvPortMalloc+0x180>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <pvPortMalloc+0x188>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d203      	bcs.n	80008fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <pvPortMalloc+0x180>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a17      	ldr	r2, [pc, #92]	; (8000958 <pvPortMalloc+0x188>)
 80008fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80008fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000900:	685a      	ldr	r2, [r3, #4]
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <pvPortMalloc+0x17c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	431a      	orrs	r2, r3
 8000908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800090c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <pvPortMalloc+0x18c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	3301      	adds	r3, #1
 8000918:	4a10      	ldr	r2, [pc, #64]	; (800095c <pvPortMalloc+0x18c>)
 800091a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800091c:	f000 ff6e 	bl	80017fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	2b00      	cmp	r3, #0
 8000928:	d009      	beq.n	800093e <pvPortMalloc+0x16e>
 800092a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800092e:	f383 8811 	msr	BASEPRI, r3
 8000932:	f3bf 8f6f 	isb	sy
 8000936:	f3bf 8f4f 	dsb	sy
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	e7fe      	b.n	800093c <pvPortMalloc+0x16c>
	return pvReturn;
 800093e:	69fb      	ldr	r3, [r7, #28]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3728      	adds	r7, #40	; 0x28
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20012c64 	.word	0x20012c64
 800094c:	20012c78 	.word	0x20012c78
 8000950:	20012c68 	.word	0x20012c68
 8000954:	20012c5c 	.word	0x20012c5c
 8000958:	20012c6c 	.word	0x20012c6c
 800095c:	20012c70 	.word	0x20012c70

08000960 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d04b      	beq.n	8000a0a <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000972:	2308      	movs	r3, #8
 8000974:	425b      	negs	r3, r3
 8000976:	697a      	ldr	r2, [r7, #20]
 8000978:	4413      	add	r3, r2
 800097a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	685a      	ldr	r2, [r3, #4]
 8000984:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <vPortFree+0xb4>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4013      	ands	r3, r2
 800098a:	2b00      	cmp	r3, #0
 800098c:	d109      	bne.n	80009a2 <vPortFree+0x42>
 800098e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000992:	f383 8811 	msr	BASEPRI, r3
 8000996:	f3bf 8f6f 	isb	sy
 800099a:	f3bf 8f4f 	dsb	sy
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	e7fe      	b.n	80009a0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d009      	beq.n	80009be <vPortFree+0x5e>
 80009aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009ae:	f383 8811 	msr	BASEPRI, r3
 80009b2:	f3bf 8f6f 	isb	sy
 80009b6:	f3bf 8f4f 	dsb	sy
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	e7fe      	b.n	80009bc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	685a      	ldr	r2, [r3, #4]
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <vPortFree+0xb4>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4013      	ands	r3, r2
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d01e      	beq.n	8000a0a <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d11a      	bne.n	8000a0a <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	685a      	ldr	r2, [r3, #4]
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <vPortFree+0xb4>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	43db      	mvns	r3, r3
 80009de:	401a      	ands	r2, r3
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80009e4:	f000 fefc 	bl	80017e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	685a      	ldr	r2, [r3, #4]
 80009ec:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <vPortFree+0xb8>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4413      	add	r3, r2
 80009f2:	4a09      	ldr	r2, [pc, #36]	; (8000a18 <vPortFree+0xb8>)
 80009f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80009f6:	6938      	ldr	r0, [r7, #16]
 80009f8:	f000 f874 	bl	8000ae4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <vPortFree+0xbc>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	3301      	adds	r3, #1
 8000a02:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <vPortFree+0xbc>)
 8000a04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8000a06:	f000 fef9 	bl	80017fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000a0a:	bf00      	nop
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20012c78 	.word	0x20012c78
 8000a18:	20012c68 	.word	0x20012c68
 8000a1c:	20012c74 	.word	0x20012c74

08000a20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000a26:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000a2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000a2c:	4b27      	ldr	r3, [pc, #156]	; (8000acc <prvHeapInit+0xac>)
 8000a2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d00c      	beq.n	8000a54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	3307      	adds	r3, #7
 8000a3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f023 0307 	bic.w	r3, r3, #7
 8000a46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000a48:	68ba      	ldr	r2, [r7, #8]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	4a1f      	ldr	r2, [pc, #124]	; (8000acc <prvHeapInit+0xac>)
 8000a50:	4413      	add	r3, r2
 8000a52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a58:	4a1d      	ldr	r2, [pc, #116]	; (8000ad0 <prvHeapInit+0xb0>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <prvHeapInit+0xb0>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	4413      	add	r3, r2
 8000a6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a6c:	2208      	movs	r2, #8
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	1a9b      	subs	r3, r3, r2
 8000a72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f023 0307 	bic.w	r3, r3, #7
 8000a7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4a15      	ldr	r2, [pc, #84]	; (8000ad4 <prvHeapInit+0xb4>)
 8000a80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <prvHeapInit+0xb4>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2200      	movs	r2, #0
 8000a88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a8a:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <prvHeapInit+0xb4>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	68fa      	ldr	r2, [r7, #12]
 8000a9a:	1ad2      	subs	r2, r2, r3
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <prvHeapInit+0xb4>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <prvHeapInit+0xb8>)
 8000aae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	4a09      	ldr	r2, [pc, #36]	; (8000adc <prvHeapInit+0xbc>)
 8000ab6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <prvHeapInit+0xc0>)
 8000aba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000abe:	601a      	str	r2, [r3, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	2000005c 	.word	0x2000005c
 8000ad0:	20012c5c 	.word	0x20012c5c
 8000ad4:	20012c64 	.word	0x20012c64
 8000ad8:	20012c6c 	.word	0x20012c6c
 8000adc:	20012c68 	.word	0x20012c68
 8000ae0:	20012c78 	.word	0x20012c78

08000ae4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000aec:	4b28      	ldr	r3, [pc, #160]	; (8000b90 <prvInsertBlockIntoFreeList+0xac>)
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	e002      	b.n	8000af8 <prvInsertBlockIntoFreeList+0x14>
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d3f7      	bcc.n	8000af2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	441a      	add	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d108      	bne.n	8000b26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	685a      	ldr	r2, [r3, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	441a      	add	r2, r3
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	441a      	add	r2, r3
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d118      	bne.n	8000b6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <prvInsertBlockIntoFreeList+0xb0>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d00d      	beq.n	8000b62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	685a      	ldr	r2, [r3, #4]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	441a      	add	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	e008      	b.n	8000b74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <prvInsertBlockIntoFreeList+0xb0>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	e003      	b.n	8000b74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b74:	68fa      	ldr	r2, [r7, #12]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d002      	beq.n	8000b82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b82:	bf00      	nop
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20012c5c 	.word	0x20012c5c
 8000b94:	20012c64 	.word	0x20012c64

08000b98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d109      	bne.n	8000bc0 <xQueueGenericReset+0x28>
 8000bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bb0:	f383 8811 	msr	BASEPRI, r3
 8000bb4:	f3bf 8f6f 	isb	sy
 8000bb8:	f3bf 8f4f 	dsb	sy
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	e7fe      	b.n	8000bbe <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000bc0:	f7ff fcec 	bl	800059c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bcc:	68f9      	ldr	r1, [r7, #12]
 8000bce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000bd0:	fb01 f303 	mul.w	r3, r1, r3
 8000bd4:	441a      	add	r2, r3
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	68f9      	ldr	r1, [r7, #12]
 8000bf4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000bf6:	fb01 f303 	mul.w	r3, r1, r3
 8000bfa:	441a      	add	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	22ff      	movs	r2, #255	; 0xff
 8000c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	22ff      	movs	r2, #255	; 0xff
 8000c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d114      	bne.n	8000c40 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	691b      	ldr	r3, [r3, #16]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d01a      	beq.n	8000c54 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	3310      	adds	r3, #16
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 fff6 	bl	8001c14 <xTaskRemoveFromEventList>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d012      	beq.n	8000c54 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <xQueueGenericReset+0xcc>)
 8000c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	f3bf 8f4f 	dsb	sy
 8000c3a:	f3bf 8f6f 	isb	sy
 8000c3e:	e009      	b.n	8000c54 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	3310      	adds	r3, #16
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff facb 	bl	80001e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	3324      	adds	r3, #36	; 0x24
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fac6 	bl	80001e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000c54:	f7ff fcd0 	bl	80005f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000c58:	2301      	movs	r3, #1
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	e000ed04 	.word	0xe000ed04

08000c68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	; 0x28
 8000c6c:	af02      	add	r7, sp, #8
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	4613      	mov	r3, r2
 8000c74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d109      	bne.n	8000c90 <xQueueGenericCreate+0x28>
 8000c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c80:	f383 8811 	msr	BASEPRI, r3
 8000c84:	f3bf 8f6f 	isb	sy
 8000c88:	f3bf 8f4f 	dsb	sy
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	e7fe      	b.n	8000c8e <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	fb02 f303 	mul.w	r3, r2, r3
 8000c98:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3350      	adds	r3, #80	; 0x50
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fd96 	bl	80007d0 <pvPortMalloc>
 8000ca4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d00d      	beq.n	8000cc8 <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	3350      	adds	r3, #80	; 0x50
 8000cb4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000cb6:	79fa      	ldrb	r2, [r7, #7]
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	68b9      	ldr	r1, [r7, #8]
 8000cc2:	68f8      	ldr	r0, [r7, #12]
 8000cc4:	f000 f805 	bl	8000cd2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000cc8:	69bb      	ldr	r3, [r7, #24]
	}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3720      	adds	r7, #32
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b084      	sub	sp, #16
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	60f8      	str	r0, [r7, #12]
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
 8000cde:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d103      	bne.n	8000cee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	e002      	b.n	8000cf4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	68ba      	ldr	r2, [r7, #8]
 8000cfe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000d00:	2101      	movs	r1, #1
 8000d02:	69b8      	ldr	r0, [r7, #24]
 8000d04:	f7ff ff48 	bl	8000b98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	78fa      	ldrb	r2, [r7, #3]
 8000d0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000d10:	bf00      	nop
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08e      	sub	sp, #56	; 0x38
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
 8000d24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000d26:	2300      	movs	r3, #0
 8000d28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d109      	bne.n	8000d48 <xQueueGenericSend+0x30>
 8000d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d38:	f383 8811 	msr	BASEPRI, r3
 8000d3c:	f3bf 8f6f 	isb	sy
 8000d40:	f3bf 8f4f 	dsb	sy
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d46:	e7fe      	b.n	8000d46 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d103      	bne.n	8000d56 <xQueueGenericSend+0x3e>
 8000d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <xQueueGenericSend+0x42>
 8000d56:	2301      	movs	r3, #1
 8000d58:	e000      	b.n	8000d5c <xQueueGenericSend+0x44>
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d109      	bne.n	8000d74 <xQueueGenericSend+0x5c>
 8000d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d64:	f383 8811 	msr	BASEPRI, r3
 8000d68:	f3bf 8f6f 	isb	sy
 8000d6c:	f3bf 8f4f 	dsb	sy
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
 8000d72:	e7fe      	b.n	8000d72 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d103      	bne.n	8000d82 <xQueueGenericSend+0x6a>
 8000d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d101      	bne.n	8000d86 <xQueueGenericSend+0x6e>
 8000d82:	2301      	movs	r3, #1
 8000d84:	e000      	b.n	8000d88 <xQueueGenericSend+0x70>
 8000d86:	2300      	movs	r3, #0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d109      	bne.n	8000da0 <xQueueGenericSend+0x88>
 8000d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d90:	f383 8811 	msr	BASEPRI, r3
 8000d94:	f3bf 8f6f 	isb	sy
 8000d98:	f3bf 8f4f 	dsb	sy
 8000d9c:	623b      	str	r3, [r7, #32]
 8000d9e:	e7fe      	b.n	8000d9e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000da0:	f001 f8d0 	bl	8001f44 <xTaskGetSchedulerState>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d102      	bne.n	8000db0 <xQueueGenericSend+0x98>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d101      	bne.n	8000db4 <xQueueGenericSend+0x9c>
 8000db0:	2301      	movs	r3, #1
 8000db2:	e000      	b.n	8000db6 <xQueueGenericSend+0x9e>
 8000db4:	2300      	movs	r3, #0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d109      	bne.n	8000dce <xQueueGenericSend+0xb6>
 8000dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dbe:	f383 8811 	msr	BASEPRI, r3
 8000dc2:	f3bf 8f6f 	isb	sy
 8000dc6:	f3bf 8f4f 	dsb	sy
 8000dca:	61fb      	str	r3, [r7, #28]
 8000dcc:	e7fe      	b.n	8000dcc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000dce:	f7ff fbe5 	bl	800059c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d302      	bcc.n	8000de4 <xQueueGenericSend+0xcc>
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d129      	bne.n	8000e38 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000de4:	683a      	ldr	r2, [r7, #0]
 8000de6:	68b9      	ldr	r1, [r7, #8]
 8000de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000dea:	f000 fa03 	bl	80011f4 <prvCopyDataToQueue>
 8000dee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d010      	beq.n	8000e1a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dfa:	3324      	adds	r3, #36	; 0x24
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 ff09 	bl	8001c14 <xTaskRemoveFromEventList>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d013      	beq.n	8000e30 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000e08:	4b3f      	ldr	r3, [pc, #252]	; (8000f08 <xQueueGenericSend+0x1f0>)
 8000e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	f3bf 8f4f 	dsb	sy
 8000e14:	f3bf 8f6f 	isb	sy
 8000e18:	e00a      	b.n	8000e30 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d007      	beq.n	8000e30 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000e20:	4b39      	ldr	r3, [pc, #228]	; (8000f08 <xQueueGenericSend+0x1f0>)
 8000e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	f3bf 8f4f 	dsb	sy
 8000e2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000e30:	f7ff fbe2 	bl	80005f8 <vPortExitCritical>
				return pdPASS;
 8000e34:	2301      	movs	r3, #1
 8000e36:	e063      	b.n	8000f00 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d103      	bne.n	8000e46 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000e3e:	f7ff fbdb 	bl	80005f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	e05c      	b.n	8000f00 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d106      	bne.n	8000e5a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 ff41 	bl	8001cd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000e56:	2301      	movs	r3, #1
 8000e58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000e5a:	f7ff fbcd 	bl	80005f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000e5e:	f000 fcbf 	bl	80017e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000e62:	f7ff fb9b 	bl	800059c <vPortEnterCritical>
 8000e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e6c:	b25b      	sxtb	r3, r3
 8000e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e72:	d103      	bne.n	8000e7c <xQueueGenericSend+0x164>
 8000e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e82:	b25b      	sxtb	r3, r3
 8000e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e88:	d103      	bne.n	8000e92 <xQueueGenericSend+0x17a>
 8000e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e92:	f7ff fbb1 	bl	80005f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e96:	1d3a      	adds	r2, r7, #4
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 ff30 	bl	8001d04 <xTaskCheckForTimeOut>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d124      	bne.n	8000ef4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000eaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000eac:	f000 fa9a 	bl	80013e4 <prvIsQueueFull>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d018      	beq.n	8000ee8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eb8:	3310      	adds	r3, #16
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	4611      	mov	r1, r2
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 fe5a 	bl	8001b78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ec6:	f000 fa25 	bl	8001314 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000eca:	f000 fc97 	bl	80017fc <xTaskResumeAll>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f47f af7c 	bne.w	8000dce <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <xQueueGenericSend+0x1f0>)
 8000ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	f3bf 8f4f 	dsb	sy
 8000ee2:	f3bf 8f6f 	isb	sy
 8000ee6:	e772      	b.n	8000dce <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000ee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000eea:	f000 fa13 	bl	8001314 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000eee:	f000 fc85 	bl	80017fc <xTaskResumeAll>
 8000ef2:	e76c      	b.n	8000dce <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000ef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ef6:	f000 fa0d 	bl	8001314 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000efa:	f000 fc7f 	bl	80017fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000efe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3738      	adds	r7, #56	; 0x38
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	e000ed04 	.word	0xe000ed04

08000f0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b090      	sub	sp, #64	; 0x40
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
 8000f18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8000f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d109      	bne.n	8000f38 <xQueueGenericSendFromISR+0x2c>
 8000f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f28:	f383 8811 	msr	BASEPRI, r3
 8000f2c:	f3bf 8f6f 	isb	sy
 8000f30:	f3bf 8f4f 	dsb	sy
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f36:	e7fe      	b.n	8000f36 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d103      	bne.n	8000f46 <xQueueGenericSendFromISR+0x3a>
 8000f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d101      	bne.n	8000f4a <xQueueGenericSendFromISR+0x3e>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <xQueueGenericSendFromISR+0x40>
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d109      	bne.n	8000f64 <xQueueGenericSendFromISR+0x58>
 8000f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f54:	f383 8811 	msr	BASEPRI, r3
 8000f58:	f3bf 8f6f 	isb	sy
 8000f5c:	f3bf 8f4f 	dsb	sy
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
 8000f62:	e7fe      	b.n	8000f62 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d103      	bne.n	8000f72 <xQueueGenericSendFromISR+0x66>
 8000f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d101      	bne.n	8000f76 <xQueueGenericSendFromISR+0x6a>
 8000f72:	2301      	movs	r3, #1
 8000f74:	e000      	b.n	8000f78 <xQueueGenericSendFromISR+0x6c>
 8000f76:	2300      	movs	r3, #0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d109      	bne.n	8000f90 <xQueueGenericSendFromISR+0x84>
 8000f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f80:	f383 8811 	msr	BASEPRI, r3
 8000f84:	f3bf 8f6f 	isb	sy
 8000f88:	f3bf 8f4f 	dsb	sy
 8000f8c:	623b      	str	r3, [r7, #32]
 8000f8e:	e7fe      	b.n	8000f8e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000f90:	f7ff fbe0 	bl	8000754 <vPortValidateInterruptPriority>
	__asm volatile
 8000f94:	f3ef 8211 	mrs	r2, BASEPRI
 8000f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f9c:	f383 8811 	msr	BASEPRI, r3
 8000fa0:	f3bf 8f6f 	isb	sy
 8000fa4:	f3bf 8f4f 	dsb	sy
 8000fa8:	61fa      	str	r2, [r7, #28]
 8000faa:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8000fac:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000fae:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d302      	bcc.n	8000fc2 <xQueueGenericSendFromISR+0xb6>
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d12f      	bne.n	8001022 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000fc8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000fd2:	683a      	ldr	r2, [r7, #0]
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000fd8:	f000 f90c 	bl	80011f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000fdc:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe4:	d112      	bne.n	800100c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d016      	beq.n	800101c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ff0:	3324      	adds	r3, #36	; 0x24
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fe0e 	bl	8001c14 <xTaskRemoveFromEventList>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00e      	beq.n	800101c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00b      	beq.n	800101c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2201      	movs	r2, #1
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	e007      	b.n	800101c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800100c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001010:	3301      	adds	r3, #1
 8001012:	b2db      	uxtb	r3, r3
 8001014:	b25a      	sxtb	r2, r3
 8001016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800101c:	2301      	movs	r3, #1
 800101e:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8001020:	e001      	b.n	8001026 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001022:	2300      	movs	r3, #0
 8001024:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001028:	617b      	str	r3, [r7, #20]
	__asm volatile
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001032:	4618      	mov	r0, r3
 8001034:	3740      	adds	r7, #64	; 0x40
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08c      	sub	sp, #48	; 0x30
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001048:	2300      	movs	r3, #0
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001052:	2b00      	cmp	r3, #0
 8001054:	d109      	bne.n	800106a <xQueueReceive+0x2e>
	__asm volatile
 8001056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800105a:	f383 8811 	msr	BASEPRI, r3
 800105e:	f3bf 8f6f 	isb	sy
 8001062:	f3bf 8f4f 	dsb	sy
 8001066:	623b      	str	r3, [r7, #32]
 8001068:	e7fe      	b.n	8001068 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d103      	bne.n	8001078 <xQueueReceive+0x3c>
 8001070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	2b00      	cmp	r3, #0
 8001076:	d101      	bne.n	800107c <xQueueReceive+0x40>
 8001078:	2301      	movs	r3, #1
 800107a:	e000      	b.n	800107e <xQueueReceive+0x42>
 800107c:	2300      	movs	r3, #0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d109      	bne.n	8001096 <xQueueReceive+0x5a>
 8001082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001086:	f383 8811 	msr	BASEPRI, r3
 800108a:	f3bf 8f6f 	isb	sy
 800108e:	f3bf 8f4f 	dsb	sy
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	e7fe      	b.n	8001094 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001096:	f000 ff55 	bl	8001f44 <xTaskGetSchedulerState>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d102      	bne.n	80010a6 <xQueueReceive+0x6a>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <xQueueReceive+0x6e>
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <xQueueReceive+0x70>
 80010aa:	2300      	movs	r3, #0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d109      	bne.n	80010c4 <xQueueReceive+0x88>
 80010b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010b4:	f383 8811 	msr	BASEPRI, r3
 80010b8:	f3bf 8f6f 	isb	sy
 80010bc:	f3bf 8f4f 	dsb	sy
 80010c0:	61bb      	str	r3, [r7, #24]
 80010c2:	e7fe      	b.n	80010c2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80010c4:	f7ff fa6a 	bl	800059c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80010c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80010ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d01f      	beq.n	8001114 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80010d4:	68b9      	ldr	r1, [r7, #8]
 80010d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80010d8:	f000 f8f6 	bl	80012c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	1e5a      	subs	r2, r3, #1
 80010e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80010e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d00f      	beq.n	800110c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80010ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ee:	3310      	adds	r3, #16
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 fd8f 	bl	8001c14 <xTaskRemoveFromEventList>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d007      	beq.n	800110c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80010fc:	4b3c      	ldr	r3, [pc, #240]	; (80011f0 <xQueueReceive+0x1b4>)
 80010fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	f3bf 8f4f 	dsb	sy
 8001108:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800110c:	f7ff fa74 	bl	80005f8 <vPortExitCritical>
				return pdPASS;
 8001110:	2301      	movs	r3, #1
 8001112:	e069      	b.n	80011e8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d103      	bne.n	8001122 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800111a:	f7ff fa6d 	bl	80005f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800111e:	2300      	movs	r3, #0
 8001120:	e062      	b.n	80011e8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001124:	2b00      	cmp	r3, #0
 8001126:	d106      	bne.n	8001136 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	4618      	mov	r0, r3
 800112e:	f000 fdd3 	bl	8001cd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001132:	2301      	movs	r3, #1
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001136:	f7ff fa5f 	bl	80005f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800113a:	f000 fb51 	bl	80017e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800113e:	f7ff fa2d 	bl	800059c <vPortEnterCritical>
 8001142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001144:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001148:	b25b      	sxtb	r3, r3
 800114a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800114e:	d103      	bne.n	8001158 <xQueueReceive+0x11c>
 8001150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001152:	2200      	movs	r2, #0
 8001154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800115e:	b25b      	sxtb	r3, r3
 8001160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001164:	d103      	bne.n	800116e <xQueueReceive+0x132>
 8001166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800116e:	f7ff fa43 	bl	80005f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001172:	1d3a      	adds	r2, r7, #4
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	4611      	mov	r1, r2
 800117a:	4618      	mov	r0, r3
 800117c:	f000 fdc2 	bl	8001d04 <xTaskCheckForTimeOut>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d123      	bne.n	80011ce <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001188:	f000 f916 	bl	80013b8 <prvIsQueueEmpty>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d017      	beq.n	80011c2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001194:	3324      	adds	r3, #36	; 0x24
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	4611      	mov	r1, r2
 800119a:	4618      	mov	r0, r3
 800119c:	f000 fcec 	bl	8001b78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80011a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011a2:	f000 f8b7 	bl	8001314 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80011a6:	f000 fb29 	bl	80017fc <xTaskResumeAll>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d189      	bne.n	80010c4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <xQueueReceive+0x1b4>)
 80011b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	f3bf 8f4f 	dsb	sy
 80011bc:	f3bf 8f6f 	isb	sy
 80011c0:	e780      	b.n	80010c4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80011c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011c4:	f000 f8a6 	bl	8001314 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80011c8:	f000 fb18 	bl	80017fc <xTaskResumeAll>
 80011cc:	e77a      	b.n	80010c4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80011ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011d0:	f000 f8a0 	bl	8001314 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80011d4:	f000 fb12 	bl	80017fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80011d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011da:	f000 f8ed 	bl	80013b8 <prvIsQueueEmpty>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f43f af6f 	beq.w	80010c4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80011e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3730      	adds	r7, #48	; 0x30
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	e000ed04 	.word	0xe000ed04

080011f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001208:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	2b00      	cmp	r3, #0
 8001210:	d10d      	bne.n	800122e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d14d      	bne.n	80012b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	4618      	mov	r0, r3
 8001220:	f000 feae 	bl	8001f80 <xTaskPriorityDisinherit>
 8001224:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	e043      	b.n	80012b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d119      	bne.n	8001268 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6858      	ldr	r0, [r3, #4]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	461a      	mov	r2, r3
 800123e:	68b9      	ldr	r1, [r7, #8]
 8001240:	f002 f81a 	bl	8003278 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	441a      	add	r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	429a      	cmp	r2, r3
 800125c:	d32b      	bcc.n	80012b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	e026      	b.n	80012b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	68d8      	ldr	r0, [r3, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	461a      	mov	r2, r3
 8001272:	68b9      	ldr	r1, [r7, #8]
 8001274:	f002 f800 	bl	8003278 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	68da      	ldr	r2, [r3, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	425b      	negs	r3, r3
 8001282:	441a      	add	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	429a      	cmp	r2, r3
 8001292:	d207      	bcs.n	80012a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	425b      	negs	r3, r3
 800129e:	441a      	add	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d105      	bne.n	80012b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d002      	beq.n	80012b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1c5a      	adds	r2, r3, #1
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80012be:	697b      	ldr	r3, [r7, #20]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d018      	beq.n	800130c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68da      	ldr	r2, [r3, #12]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	441a      	add	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68da      	ldr	r2, [r3, #12]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d303      	bcc.n	80012fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68d9      	ldr	r1, [r3, #12]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	461a      	mov	r2, r3
 8001306:	6838      	ldr	r0, [r7, #0]
 8001308:	f001 ffb6 	bl	8003278 <memcpy>
	}
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800131c:	f7ff f93e 	bl	800059c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001326:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001328:	e011      	b.n	800134e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132e:	2b00      	cmp	r3, #0
 8001330:	d012      	beq.n	8001358 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3324      	adds	r3, #36	; 0x24
 8001336:	4618      	mov	r0, r3
 8001338:	f000 fc6c 	bl	8001c14 <xTaskRemoveFromEventList>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001342:	f000 fd3f 	bl	8001dc4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	3b01      	subs	r3, #1
 800134a:	b2db      	uxtb	r3, r3
 800134c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800134e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001352:	2b00      	cmp	r3, #0
 8001354:	dce9      	bgt.n	800132a <prvUnlockQueue+0x16>
 8001356:	e000      	b.n	800135a <prvUnlockQueue+0x46>
					break;
 8001358:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	22ff      	movs	r2, #255	; 0xff
 800135e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001362:	f7ff f949 	bl	80005f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001366:	f7ff f919 	bl	800059c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001370:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001372:	e011      	b.n	8001398 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d012      	beq.n	80013a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3310      	adds	r3, #16
 8001380:	4618      	mov	r0, r3
 8001382:	f000 fc47 	bl	8001c14 <xTaskRemoveFromEventList>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800138c:	f000 fd1a 	bl	8001dc4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001390:	7bbb      	ldrb	r3, [r7, #14]
 8001392:	3b01      	subs	r3, #1
 8001394:	b2db      	uxtb	r3, r3
 8001396:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001398:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800139c:	2b00      	cmp	r3, #0
 800139e:	dce9      	bgt.n	8001374 <prvUnlockQueue+0x60>
 80013a0:	e000      	b.n	80013a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80013a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	22ff      	movs	r2, #255	; 0xff
 80013a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80013ac:	f7ff f924 	bl	80005f8 <vPortExitCritical>
}
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80013c0:	f7ff f8ec 	bl	800059c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d102      	bne.n	80013d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80013cc:	2301      	movs	r3, #1
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	e001      	b.n	80013d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80013d6:	f7ff f90f 	bl	80005f8 <vPortExitCritical>

	return xReturn;
 80013da:	68fb      	ldr	r3, [r7, #12]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80013ec:	f7ff f8d6 	bl	800059c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d102      	bne.n	8001402 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80013fc:	2301      	movs	r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	e001      	b.n	8001406 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001406:	f7ff f8f7 	bl	80005f8 <vPortExitCritical>

	return xReturn;
 800140a:	68fb      	ldr	r3, [r7, #12]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	e014      	b.n	800144e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001424:	4a0e      	ldr	r2, [pc, #56]	; (8001460 <vQueueAddToRegistry+0x4c>)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d10b      	bne.n	8001448 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001430:	490b      	ldr	r1, [pc, #44]	; (8001460 <vQueueAddToRegistry+0x4c>)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800143a:	4a09      	ldr	r2, [pc, #36]	; (8001460 <vQueueAddToRegistry+0x4c>)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	4413      	add	r3, r2
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001446:	e005      	b.n	8001454 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	3301      	adds	r3, #1
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2b07      	cmp	r3, #7
 8001452:	d9e7      	bls.n	8001424 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	20012dc4 	.word	0x20012dc4

08001464 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001474:	f7ff f892 	bl	800059c <vPortEnterCritical>
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800147e:	b25b      	sxtb	r3, r3
 8001480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001484:	d103      	bne.n	800148e <vQueueWaitForMessageRestricted+0x2a>
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001494:	b25b      	sxtb	r3, r3
 8001496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800149a:	d103      	bne.n	80014a4 <vQueueWaitForMessageRestricted+0x40>
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80014a4:	f7ff f8a8 	bl	80005f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d106      	bne.n	80014be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	3324      	adds	r3, #36	; 0x24
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	68b9      	ldr	r1, [r7, #8]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 fb81 	bl	8001bc0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80014be:	6978      	ldr	r0, [r7, #20]
 80014c0:	f7ff ff28 	bl	8001314 <prvUnlockQueue>
	}
 80014c4:	bf00      	nop
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08c      	sub	sp, #48	; 0x30
 80014d0:	af04      	add	r7, sp, #16
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	4613      	mov	r3, r2
 80014da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff f975 	bl	80007d0 <pvPortMalloc>
 80014e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00e      	beq.n	800150c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80014ee:	2058      	movs	r0, #88	; 0x58
 80014f0:	f7ff f96e 	bl	80007d0 <pvPortMalloc>
 80014f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	631a      	str	r2, [r3, #48]	; 0x30
 8001502:	e005      	b.n	8001510 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001504:	6978      	ldr	r0, [r7, #20]
 8001506:	f7ff fa2b 	bl	8000960 <vPortFree>
 800150a:	e001      	b.n	8001510 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800150c:	2300      	movs	r3, #0
 800150e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d013      	beq.n	800153e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001516:	88fa      	ldrh	r2, [r7, #6]
 8001518:	2300      	movs	r3, #0
 800151a:	9303      	str	r3, [sp, #12]
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	9302      	str	r3, [sp, #8]
 8001520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001522:	9301      	str	r3, [sp, #4]
 8001524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	68b9      	ldr	r1, [r7, #8]
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f000 f80e 	bl	800154e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001532:	69f8      	ldr	r0, [r7, #28]
 8001534:	f000 f89a 	bl	800166c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001538:	2301      	movs	r3, #1
 800153a:	61bb      	str	r3, [r7, #24]
 800153c:	e002      	b.n	8001544 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
 8001542:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001544:	69bb      	ldr	r3, [r7, #24]
	}
 8001546:	4618      	mov	r0, r3
 8001548:	3720      	adds	r7, #32
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b088      	sub	sp, #32
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
 800155a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800155c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800155e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	461a      	mov	r2, r3
 8001566:	21a5      	movs	r1, #165	; 0xa5
 8001568:	f001 fe91 	bl	800328e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800156c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800156e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001576:	3b01      	subs	r3, #1
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	f023 0307 	bic.w	r3, r3, #7
 8001584:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	2b00      	cmp	r3, #0
 800158e:	d009      	beq.n	80015a4 <prvInitialiseNewTask+0x56>
 8001590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001594:	f383 8811 	msr	BASEPRI, r3
 8001598:	f3bf 8f6f 	isb	sy
 800159c:	f3bf 8f4f 	dsb	sy
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	e7fe      	b.n	80015a2 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d01f      	beq.n	80015ea <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
 80015ae:	e012      	b.n	80015d6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80015b0:	68ba      	ldr	r2, [r7, #8]
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	4413      	add	r3, r2
 80015b6:	7819      	ldrb	r1, [r3, #0]
 80015b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	4413      	add	r3, r2
 80015be:	3334      	adds	r3, #52	; 0x34
 80015c0:	460a      	mov	r2, r1
 80015c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	4413      	add	r3, r2
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d006      	beq.n	80015de <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	3301      	adds	r3, #1
 80015d4:	61fb      	str	r3, [r7, #28]
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	2b09      	cmp	r3, #9
 80015da:	d9e9      	bls.n	80015b0 <prvInitialiseNewTask+0x62>
 80015dc:	e000      	b.n	80015e0 <prvInitialiseNewTask+0x92>
			{
				break;
 80015de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80015e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80015e8:	e003      	b.n	80015f2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80015ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80015f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	d901      	bls.n	80015fc <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80015f8:	2304      	movs	r3, #4
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80015fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001600:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001606:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8001608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800160a:	2200      	movs	r2, #0
 800160c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800160e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001610:	3304      	adds	r3, #4
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe fe04 	bl	8000220 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800161a:	3318      	adds	r3, #24
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe fdff 	bl	8000220 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001626:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162a:	f1c3 0205 	rsb	r2, r3, #5
 800162e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001630:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001636:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163a:	2200      	movs	r2, #0
 800163c:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800163e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	68f9      	ldr	r1, [r7, #12]
 800164a:	69b8      	ldr	r0, [r7, #24]
 800164c:	f7fe fe7c 	bl	8000348 <pxPortInitialiseStack>
 8001650:	4602      	mov	r2, r0
 8001652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001654:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001658:	2b00      	cmp	r3, #0
 800165a:	d002      	beq.n	8001662 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800165c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001660:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001662:	bf00      	nop
 8001664:	3720      	adds	r7, #32
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001674:	f7fe ff92 	bl	800059c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001678:	4b2c      	ldr	r3, [pc, #176]	; (800172c <prvAddNewTaskToReadyList+0xc0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	3301      	adds	r3, #1
 800167e:	4a2b      	ldr	r2, [pc, #172]	; (800172c <prvAddNewTaskToReadyList+0xc0>)
 8001680:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001682:	4b2b      	ldr	r3, [pc, #172]	; (8001730 <prvAddNewTaskToReadyList+0xc4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d109      	bne.n	800169e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800168a:	4a29      	ldr	r2, [pc, #164]	; (8001730 <prvAddNewTaskToReadyList+0xc4>)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001690:	4b26      	ldr	r3, [pc, #152]	; (800172c <prvAddNewTaskToReadyList+0xc0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d110      	bne.n	80016ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001698:	f000 fbb8 	bl	8001e0c <prvInitialiseTaskLists>
 800169c:	e00d      	b.n	80016ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800169e:	4b25      	ldr	r3, [pc, #148]	; (8001734 <prvAddNewTaskToReadyList+0xc8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d109      	bne.n	80016ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80016a6:	4b22      	ldr	r3, [pc, #136]	; (8001730 <prvAddNewTaskToReadyList+0xc4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d802      	bhi.n	80016ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80016b4:	4a1e      	ldr	r2, [pc, #120]	; (8001730 <prvAddNewTaskToReadyList+0xc4>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80016ba:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <prvAddNewTaskToReadyList+0xcc>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	3301      	adds	r3, #1
 80016c0:	4a1d      	ldr	r2, [pc, #116]	; (8001738 <prvAddNewTaskToReadyList+0xcc>)
 80016c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80016c4:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <prvAddNewTaskToReadyList+0xcc>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d0:	2201      	movs	r2, #1
 80016d2:	409a      	lsls	r2, r3
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <prvAddNewTaskToReadyList+0xd0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4313      	orrs	r3, r2
 80016da:	4a18      	ldr	r2, [pc, #96]	; (800173c <prvAddNewTaskToReadyList+0xd0>)
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4a15      	ldr	r2, [pc, #84]	; (8001740 <prvAddNewTaskToReadyList+0xd4>)
 80016ec:	441a      	add	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3304      	adds	r3, #4
 80016f2:	4619      	mov	r1, r3
 80016f4:	4610      	mov	r0, r2
 80016f6:	f7fe fda0 	bl	800023a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80016fa:	f7fe ff7d 	bl	80005f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80016fe:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <prvAddNewTaskToReadyList+0xc8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00e      	beq.n	8001724 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <prvAddNewTaskToReadyList+0xc4>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	429a      	cmp	r2, r3
 8001712:	d207      	bcs.n	8001724 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <prvAddNewTaskToReadyList+0xd8>)
 8001716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	f3bf 8f4f 	dsb	sy
 8001720:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20012d54 	.word	0x20012d54
 8001730:	20012c7c 	.word	0x20012c7c
 8001734:	20012d60 	.word	0x20012d60
 8001738:	20012d70 	.word	0x20012d70
 800173c:	20012d5c 	.word	0x20012d5c
 8001740:	20012c80 	.word	0x20012c80
 8001744:	e000ed04 	.word	0xe000ed04

08001748 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800174e:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <vTaskStartScheduler+0x80>)
 8001750:	9301      	str	r3, [sp, #4]
 8001752:	2300      	movs	r3, #0
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	2300      	movs	r3, #0
 8001758:	2282      	movs	r2, #130	; 0x82
 800175a:	491c      	ldr	r1, [pc, #112]	; (80017cc <vTaskStartScheduler+0x84>)
 800175c:	481c      	ldr	r0, [pc, #112]	; (80017d0 <vTaskStartScheduler+0x88>)
 800175e:	f7ff feb5 	bl	80014cc <xTaskCreate>
 8001762:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d102      	bne.n	8001770 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800176a:	f000 fcf3 	bl	8002154 <xTimerCreateTimerTask>
 800176e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d115      	bne.n	80017a2 <vTaskStartScheduler+0x5a>
 8001776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800177a:	f383 8811 	msr	BASEPRI, r3
 800177e:	f3bf 8f6f 	isb	sy
 8001782:	f3bf 8f4f 	dsb	sy
 8001786:	60bb      	str	r3, [r7, #8]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <vTaskStartScheduler+0x8c>)
 800178a:	f04f 32ff 	mov.w	r2, #4294967295
 800178e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <vTaskStartScheduler+0x90>)
 8001792:	2201      	movs	r2, #1
 8001794:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <vTaskStartScheduler+0x94>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800179c:	f7fe fe60 	bl	8000460 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80017a0:	e00d      	b.n	80017be <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a8:	d109      	bne.n	80017be <vTaskStartScheduler+0x76>
 80017aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ae:	f383 8811 	msr	BASEPRI, r3
 80017b2:	f3bf 8f6f 	isb	sy
 80017b6:	f3bf 8f4f 	dsb	sy
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	e7fe      	b.n	80017bc <vTaskStartScheduler+0x74>
}
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20012d78 	.word	0x20012d78
 80017cc:	080032b8 	.word	0x080032b8
 80017d0:	08001ddd 	.word	0x08001ddd
 80017d4:	20012d74 	.word	0x20012d74
 80017d8:	20012d60 	.word	0x20012d60
 80017dc:	20012d58 	.word	0x20012d58

080017e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80017e4:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <vTaskSuspendAll+0x18>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	3301      	adds	r3, #1
 80017ea:	4a03      	ldr	r2, [pc, #12]	; (80017f8 <vTaskSuspendAll+0x18>)
 80017ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	20012d7c 	.word	0x20012d7c

080017fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800180a:	4b41      	ldr	r3, [pc, #260]	; (8001910 <xTaskResumeAll+0x114>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d109      	bne.n	8001826 <xTaskResumeAll+0x2a>
 8001812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001816:	f383 8811 	msr	BASEPRI, r3
 800181a:	f3bf 8f6f 	isb	sy
 800181e:	f3bf 8f4f 	dsb	sy
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	e7fe      	b.n	8001824 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001826:	f7fe feb9 	bl	800059c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800182a:	4b39      	ldr	r3, [pc, #228]	; (8001910 <xTaskResumeAll+0x114>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	3b01      	subs	r3, #1
 8001830:	4a37      	ldr	r2, [pc, #220]	; (8001910 <xTaskResumeAll+0x114>)
 8001832:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001834:	4b36      	ldr	r3, [pc, #216]	; (8001910 <xTaskResumeAll+0x114>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d161      	bne.n	8001900 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800183c:	4b35      	ldr	r3, [pc, #212]	; (8001914 <xTaskResumeAll+0x118>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d05d      	beq.n	8001900 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001844:	e02e      	b.n	80018a4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001846:	4b34      	ldr	r3, [pc, #208]	; (8001918 <xTaskResumeAll+0x11c>)
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3318      	adds	r3, #24
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fd4e 	bl	80002f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	3304      	adds	r3, #4
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fd49 	bl	80002f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001866:	2201      	movs	r2, #1
 8001868:	409a      	lsls	r2, r3
 800186a:	4b2c      	ldr	r3, [pc, #176]	; (800191c <xTaskResumeAll+0x120>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4313      	orrs	r3, r2
 8001870:	4a2a      	ldr	r2, [pc, #168]	; (800191c <xTaskResumeAll+0x120>)
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4a27      	ldr	r2, [pc, #156]	; (8001920 <xTaskResumeAll+0x124>)
 8001882:	441a      	add	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	3304      	adds	r3, #4
 8001888:	4619      	mov	r1, r3
 800188a:	4610      	mov	r0, r2
 800188c:	f7fe fcd5 	bl	800023a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001894:	4b23      	ldr	r3, [pc, #140]	; (8001924 <xTaskResumeAll+0x128>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189a:	429a      	cmp	r2, r3
 800189c:	d302      	bcc.n	80018a4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800189e:	4b22      	ldr	r3, [pc, #136]	; (8001928 <xTaskResumeAll+0x12c>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80018a4:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <xTaskResumeAll+0x11c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1cc      	bne.n	8001846 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80018b2:	f000 fb27 	bl	8001f04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80018b6:	4b1d      	ldr	r3, [pc, #116]	; (800192c <xTaskResumeAll+0x130>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d010      	beq.n	80018e4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80018c2:	f000 f847 	bl	8001954 <xTaskIncrementTick>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d002      	beq.n	80018d2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80018cc:	4b16      	ldr	r3, [pc, #88]	; (8001928 <xTaskResumeAll+0x12c>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f1      	bne.n	80018c2 <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <xTaskResumeAll+0x130>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80018e4:	4b10      	ldr	r3, [pc, #64]	; (8001928 <xTaskResumeAll+0x12c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d009      	beq.n	8001900 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80018ec:	2301      	movs	r3, #1
 80018ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <xTaskResumeAll+0x134>)
 80018f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	f3bf 8f4f 	dsb	sy
 80018fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001900:	f7fe fe7a 	bl	80005f8 <vPortExitCritical>

	return xAlreadyYielded;
 8001904:	68bb      	ldr	r3, [r7, #8]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20012d7c 	.word	0x20012d7c
 8001914:	20012d54 	.word	0x20012d54
 8001918:	20012d14 	.word	0x20012d14
 800191c:	20012d5c 	.word	0x20012d5c
 8001920:	20012c80 	.word	0x20012c80
 8001924:	20012c7c 	.word	0x20012c7c
 8001928:	20012d68 	.word	0x20012d68
 800192c:	20012d64 	.word	0x20012d64
 8001930:	e000ed04 	.word	0xe000ed04

08001934 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <xTaskGetTickCount+0x1c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001940:	687b      	ldr	r3, [r7, #4]
}
 8001942:	4618      	mov	r0, r3
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	20012d58 	.word	0x20012d58

08001954 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800195e:	4b4e      	ldr	r3, [pc, #312]	; (8001a98 <xTaskIncrementTick+0x144>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	f040 808d 	bne.w	8001a82 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001968:	4b4c      	ldr	r3, [pc, #304]	; (8001a9c <xTaskIncrementTick+0x148>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	3301      	adds	r3, #1
 800196e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001970:	4a4a      	ldr	r2, [pc, #296]	; (8001a9c <xTaskIncrementTick+0x148>)
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d11f      	bne.n	80019bc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800197c:	4b48      	ldr	r3, [pc, #288]	; (8001aa0 <xTaskIncrementTick+0x14c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d009      	beq.n	800199a <xTaskIncrementTick+0x46>
 8001986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800198a:	f383 8811 	msr	BASEPRI, r3
 800198e:	f3bf 8f6f 	isb	sy
 8001992:	f3bf 8f4f 	dsb	sy
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	e7fe      	b.n	8001998 <xTaskIncrementTick+0x44>
 800199a:	4b41      	ldr	r3, [pc, #260]	; (8001aa0 <xTaskIncrementTick+0x14c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	4b40      	ldr	r3, [pc, #256]	; (8001aa4 <xTaskIncrementTick+0x150>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a3e      	ldr	r2, [pc, #248]	; (8001aa0 <xTaskIncrementTick+0x14c>)
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	4a3e      	ldr	r2, [pc, #248]	; (8001aa4 <xTaskIncrementTick+0x150>)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	4b3e      	ldr	r3, [pc, #248]	; (8001aa8 <xTaskIncrementTick+0x154>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	3301      	adds	r3, #1
 80019b4:	4a3c      	ldr	r2, [pc, #240]	; (8001aa8 <xTaskIncrementTick+0x154>)
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	f000 faa4 	bl	8001f04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80019bc:	4b3b      	ldr	r3, [pc, #236]	; (8001aac <xTaskIncrementTick+0x158>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d348      	bcc.n	8001a58 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80019c6:	4b36      	ldr	r3, [pc, #216]	; (8001aa0 <xTaskIncrementTick+0x14c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d104      	bne.n	80019da <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019d0:	4b36      	ldr	r3, [pc, #216]	; (8001aac <xTaskIncrementTick+0x158>)
 80019d2:	f04f 32ff 	mov.w	r2, #4294967295
 80019d6:	601a      	str	r2, [r3, #0]
					break;
 80019d8:	e03e      	b.n	8001a58 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019da:	4b31      	ldr	r3, [pc, #196]	; (8001aa0 <xTaskIncrementTick+0x14c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d203      	bcs.n	80019fa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80019f2:	4a2e      	ldr	r2, [pc, #184]	; (8001aac <xTaskIncrementTick+0x158>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80019f8:	e02e      	b.n	8001a58 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	3304      	adds	r3, #4
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fc78 	bl	80002f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d004      	beq.n	8001a16 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	3318      	adds	r3, #24
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fc6f 	bl	80002f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	409a      	lsls	r2, r3
 8001a1e:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <xTaskIncrementTick+0x15c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	4a22      	ldr	r2, [pc, #136]	; (8001ab0 <xTaskIncrementTick+0x15c>)
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4a1f      	ldr	r2, [pc, #124]	; (8001ab4 <xTaskIncrementTick+0x160>)
 8001a36:	441a      	add	r2, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4610      	mov	r0, r2
 8001a40:	f7fe fbfb 	bl	800023a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a48:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <xTaskIncrementTick+0x164>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d3b9      	bcc.n	80019c6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001a52:	2301      	movs	r3, #1
 8001a54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a56:	e7b6      	b.n	80019c6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001a58:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <xTaskIncrementTick+0x164>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a5e:	4915      	ldr	r1, [pc, #84]	; (8001ab4 <xTaskIncrementTick+0x160>)
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d901      	bls.n	8001a74 <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8001a70:	2301      	movs	r3, #1
 8001a72:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001a74:	4b11      	ldr	r3, [pc, #68]	; (8001abc <xTaskIncrementTick+0x168>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d007      	beq.n	8001a8c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	e004      	b.n	8001a8c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <xTaskIncrementTick+0x16c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	3301      	adds	r3, #1
 8001a88:	4a0d      	ldr	r2, [pc, #52]	; (8001ac0 <xTaskIncrementTick+0x16c>)
 8001a8a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001a8c:	697b      	ldr	r3, [r7, #20]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20012d7c 	.word	0x20012d7c
 8001a9c:	20012d58 	.word	0x20012d58
 8001aa0:	20012d0c 	.word	0x20012d0c
 8001aa4:	20012d10 	.word	0x20012d10
 8001aa8:	20012d6c 	.word	0x20012d6c
 8001aac:	20012d74 	.word	0x20012d74
 8001ab0:	20012d5c 	.word	0x20012d5c
 8001ab4:	20012c80 	.word	0x20012c80
 8001ab8:	20012c7c 	.word	0x20012c7c
 8001abc:	20012d68 	.word	0x20012d68
 8001ac0:	20012d64 	.word	0x20012d64

08001ac4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b087      	sub	sp, #28
 8001ac8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001aca:	4b26      	ldr	r3, [pc, #152]	; (8001b64 <vTaskSwitchContext+0xa0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001ad2:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <vTaskSwitchContext+0xa4>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001ad8:	e03e      	b.n	8001b58 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8001ada:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <vTaskSwitchContext+0xa4>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ae0:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <vTaskSwitchContext+0xa8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	fab3 f383 	clz	r3, r3
 8001aec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001aee:	7afb      	ldrb	r3, [r7, #11]
 8001af0:	f1c3 031f 	rsb	r3, r3, #31
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	491e      	ldr	r1, [pc, #120]	; (8001b70 <vTaskSwitchContext+0xac>)
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	4613      	mov	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	440b      	add	r3, r1
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d109      	bne.n	8001b1e <vTaskSwitchContext+0x5a>
	__asm volatile
 8001b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b0e:	f383 8811 	msr	BASEPRI, r3
 8001b12:	f3bf 8f6f 	isb	sy
 8001b16:	f3bf 8f4f 	dsb	sy
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	e7fe      	b.n	8001b1c <vTaskSwitchContext+0x58>
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	4613      	mov	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4a11      	ldr	r2, [pc, #68]	; (8001b70 <vTaskSwitchContext+0xac>)
 8001b2a:	4413      	add	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	3308      	adds	r3, #8
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d104      	bne.n	8001b4e <vTaskSwitchContext+0x8a>
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	4a07      	ldr	r2, [pc, #28]	; (8001b74 <vTaskSwitchContext+0xb0>)
 8001b56:	6013      	str	r3, [r2, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	371c      	adds	r7, #28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	20012d7c 	.word	0x20012d7c
 8001b68:	20012d68 	.word	0x20012d68
 8001b6c:	20012d5c 	.word	0x20012d5c
 8001b70:	20012c80 	.word	0x20012c80
 8001b74:	20012c7c 	.word	0x20012c7c

08001b78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d109      	bne.n	8001b9c <vTaskPlaceOnEventList+0x24>
 8001b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b8c:	f383 8811 	msr	BASEPRI, r3
 8001b90:	f3bf 8f6f 	isb	sy
 8001b94:	f3bf 8f4f 	dsb	sy
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	e7fe      	b.n	8001b9a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001b9c:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <vTaskPlaceOnEventList+0x44>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	3318      	adds	r3, #24
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7fe fb6c 	bl	8000282 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001baa:	2101      	movs	r1, #1
 8001bac:	6838      	ldr	r0, [r7, #0]
 8001bae:	f000 fa6b 	bl	8002088 <prvAddCurrentTaskToDelayedList>
}
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20012c7c 	.word	0x20012c7c

08001bc0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d109      	bne.n	8001be6 <vTaskPlaceOnEventListRestricted+0x26>
 8001bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bd6:	f383 8811 	msr	BASEPRI, r3
 8001bda:	f3bf 8f6f 	isb	sy
 8001bde:	f3bf 8f4f 	dsb	sy
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	e7fe      	b.n	8001be4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <vTaskPlaceOnEventListRestricted+0x50>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	3318      	adds	r3, #24
 8001bec:	4619      	mov	r1, r3
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f7fe fb23 	bl	800023a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d002      	beq.n	8001c00 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	68b8      	ldr	r0, [r7, #8]
 8001c04:	f000 fa40 	bl	8002088 <prvAddCurrentTaskToDelayedList>
	}
 8001c08:	bf00      	nop
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20012c7c 	.word	0x20012c7c

08001c14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d109      	bne.n	8001c3e <xTaskRemoveFromEventList+0x2a>
 8001c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c2e:	f383 8811 	msr	BASEPRI, r3
 8001c32:	f3bf 8f6f 	isb	sy
 8001c36:	f3bf 8f4f 	dsb	sy
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	e7fe      	b.n	8001c3c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	3318      	adds	r3, #24
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fb56 	bl	80002f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <xTaskRemoveFromEventList+0xac>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d11c      	bne.n	8001c8a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	3304      	adds	r3, #4
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fb4d 	bl	80002f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5e:	2201      	movs	r2, #1
 8001c60:	409a      	lsls	r2, r3
 8001c62:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <xTaskRemoveFromEventList+0xb0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	4a16      	ldr	r2, [pc, #88]	; (8001cc4 <xTaskRemoveFromEventList+0xb0>)
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c70:	4613      	mov	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4a13      	ldr	r2, [pc, #76]	; (8001cc8 <xTaskRemoveFromEventList+0xb4>)
 8001c7a:	441a      	add	r2, r3
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	3304      	adds	r3, #4
 8001c80:	4619      	mov	r1, r3
 8001c82:	4610      	mov	r0, r2
 8001c84:	f7fe fad9 	bl	800023a <vListInsertEnd>
 8001c88:	e005      	b.n	8001c96 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	3318      	adds	r3, #24
 8001c8e:	4619      	mov	r1, r3
 8001c90:	480e      	ldr	r0, [pc, #56]	; (8001ccc <xTaskRemoveFromEventList+0xb8>)
 8001c92:	f7fe fad2 	bl	800023a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <xTaskRemoveFromEventList+0xbc>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d905      	bls.n	8001cb0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001ca8:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <xTaskRemoveFromEventList+0xc0>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	e001      	b.n	8001cb4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001cb4:	697b      	ldr	r3, [r7, #20]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20012d7c 	.word	0x20012d7c
 8001cc4:	20012d5c 	.word	0x20012d5c
 8001cc8:	20012c80 	.word	0x20012c80
 8001ccc:	20012d14 	.word	0x20012d14
 8001cd0:	20012c7c 	.word	0x20012c7c
 8001cd4:	20012d68 	.word	0x20012d68

08001cd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <vTaskInternalSetTimeOutState+0x24>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001ce8:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <vTaskInternalSetTimeOutState+0x28>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	605a      	str	r2, [r3, #4]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	20012d6c 	.word	0x20012d6c
 8001d00:	20012d58 	.word	0x20012d58

08001d04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d109      	bne.n	8001d28 <xTaskCheckForTimeOut+0x24>
 8001d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d18:	f383 8811 	msr	BASEPRI, r3
 8001d1c:	f3bf 8f6f 	isb	sy
 8001d20:	f3bf 8f4f 	dsb	sy
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	e7fe      	b.n	8001d26 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d109      	bne.n	8001d42 <xTaskCheckForTimeOut+0x3e>
 8001d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d32:	f383 8811 	msr	BASEPRI, r3
 8001d36:	f3bf 8f6f 	isb	sy
 8001d3a:	f3bf 8f4f 	dsb	sy
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	e7fe      	b.n	8001d40 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8001d42:	f7fe fc2b 	bl	800059c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001d46:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <xTaskCheckForTimeOut+0xb8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d5e:	d102      	bne.n	8001d66 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61fb      	str	r3, [r7, #28]
 8001d64:	e023      	b.n	8001dae <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <xTaskCheckForTimeOut+0xbc>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d007      	beq.n	8001d82 <xTaskCheckForTimeOut+0x7e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d802      	bhi.n	8001d82 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	61fb      	str	r3, [r7, #28]
 8001d80:	e015      	b.n	8001dae <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d90b      	bls.n	8001da4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	1ad2      	subs	r2, r2, r3
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff ff9d 	bl	8001cd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
 8001da2:	e004      	b.n	8001dae <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001daa:	2301      	movs	r3, #1
 8001dac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001dae:	f7fe fc23 	bl	80005f8 <vPortExitCritical>

	return xReturn;
 8001db2:	69fb      	ldr	r3, [r7, #28]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3720      	adds	r7, #32
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20012d58 	.word	0x20012d58
 8001dc0:	20012d6c 	.word	0x20012d6c

08001dc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <vTaskMissedYield+0x14>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]
}
 8001dce:	bf00      	nop
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	20012d68 	.word	0x20012d68

08001ddc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001de4:	f000 f852 	bl	8001e8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <prvIdleTask+0x28>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d9f9      	bls.n	8001de4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <prvIdleTask+0x2c>)
 8001df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	f3bf 8f4f 	dsb	sy
 8001dfc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001e00:	e7f0      	b.n	8001de4 <prvIdleTask+0x8>
 8001e02:	bf00      	nop
 8001e04:	20012c80 	.word	0x20012c80
 8001e08:	e000ed04 	.word	0xe000ed04

08001e0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001e12:	2300      	movs	r3, #0
 8001e14:	607b      	str	r3, [r7, #4]
 8001e16:	e00c      	b.n	8001e32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4a12      	ldr	r2, [pc, #72]	; (8001e6c <prvInitialiseTaskLists+0x60>)
 8001e24:	4413      	add	r3, r2
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe f9da 	bl	80001e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	607b      	str	r3, [r7, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	d9ef      	bls.n	8001e18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001e38:	480d      	ldr	r0, [pc, #52]	; (8001e70 <prvInitialiseTaskLists+0x64>)
 8001e3a:	f7fe f9d1 	bl	80001e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001e3e:	480d      	ldr	r0, [pc, #52]	; (8001e74 <prvInitialiseTaskLists+0x68>)
 8001e40:	f7fe f9ce 	bl	80001e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001e44:	480c      	ldr	r0, [pc, #48]	; (8001e78 <prvInitialiseTaskLists+0x6c>)
 8001e46:	f7fe f9cb 	bl	80001e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001e4a:	480c      	ldr	r0, [pc, #48]	; (8001e7c <prvInitialiseTaskLists+0x70>)
 8001e4c:	f7fe f9c8 	bl	80001e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001e50:	480b      	ldr	r0, [pc, #44]	; (8001e80 <prvInitialiseTaskLists+0x74>)
 8001e52:	f7fe f9c5 	bl	80001e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001e56:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <prvInitialiseTaskLists+0x78>)
 8001e58:	4a05      	ldr	r2, [pc, #20]	; (8001e70 <prvInitialiseTaskLists+0x64>)
 8001e5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001e5c:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <prvInitialiseTaskLists+0x7c>)
 8001e5e:	4a05      	ldr	r2, [pc, #20]	; (8001e74 <prvInitialiseTaskLists+0x68>)
 8001e60:	601a      	str	r2, [r3, #0]
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20012c80 	.word	0x20012c80
 8001e70:	20012ce4 	.word	0x20012ce4
 8001e74:	20012cf8 	.word	0x20012cf8
 8001e78:	20012d14 	.word	0x20012d14
 8001e7c:	20012d28 	.word	0x20012d28
 8001e80:	20012d40 	.word	0x20012d40
 8001e84:	20012d0c 	.word	0x20012d0c
 8001e88:	20012d10 	.word	0x20012d10

08001e8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001e92:	e019      	b.n	8001ec8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001e94:	f7fe fb82 	bl	800059c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e98:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <prvCheckTasksWaitingTermination+0x4c>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe fa25 	bl	80002f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <prvCheckTasksWaitingTermination+0x50>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <prvCheckTasksWaitingTermination+0x50>)
 8001eb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <prvCheckTasksWaitingTermination+0x54>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	4a09      	ldr	r2, [pc, #36]	; (8001ee0 <prvCheckTasksWaitingTermination+0x54>)
 8001ebc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001ebe:	f7fe fb9b 	bl	80005f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f80e 	bl	8001ee4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <prvCheckTasksWaitingTermination+0x54>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1e1      	bne.n	8001e94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20012d28 	.word	0x20012d28
 8001edc:	20012d54 	.word	0x20012d54
 8001ee0:	20012d3c 	.word	0x20012d3c

08001ee4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe fd35 	bl	8000960 <vPortFree>
			vPortFree( pxTCB );
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7fe fd32 	bl	8000960 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f0a:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <prvResetNextTaskUnblockTime+0x38>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d104      	bne.n	8001f1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001f14:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <prvResetNextTaskUnblockTime+0x3c>)
 8001f16:	f04f 32ff 	mov.w	r2, #4294967295
 8001f1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001f1c:	e008      	b.n	8001f30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f1e:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <prvResetNextTaskUnblockTime+0x38>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	4a04      	ldr	r2, [pc, #16]	; (8001f40 <prvResetNextTaskUnblockTime+0x3c>)
 8001f2e:	6013      	str	r3, [r2, #0]
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	20012d0c 	.word	0x20012d0c
 8001f40:	20012d74 	.word	0x20012d74

08001f44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <xTaskGetSchedulerState+0x34>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d102      	bne.n	8001f58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001f52:	2301      	movs	r3, #1
 8001f54:	607b      	str	r3, [r7, #4]
 8001f56:	e008      	b.n	8001f6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f58:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <xTaskGetSchedulerState+0x38>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d102      	bne.n	8001f66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001f60:	2302      	movs	r3, #2
 8001f62:	607b      	str	r3, [r7, #4]
 8001f64:	e001      	b.n	8001f6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001f66:	2300      	movs	r3, #0
 8001f68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001f6a:	687b      	ldr	r3, [r7, #4]
	}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	20012d60 	.word	0x20012d60
 8001f7c:	20012d7c 	.word	0x20012d7c

08001f80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d06c      	beq.n	8002070 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8001f96:	4b39      	ldr	r3, [pc, #228]	; (800207c <xTaskPriorityDisinherit+0xfc>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d009      	beq.n	8001fb4 <xTaskPriorityDisinherit+0x34>
 8001fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa4:	f383 8811 	msr	BASEPRI, r3
 8001fa8:	f3bf 8f6f 	isb	sy
 8001fac:	f3bf 8f4f 	dsb	sy
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	e7fe      	b.n	8001fb2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d109      	bne.n	8001fd0 <xTaskPriorityDisinherit+0x50>
 8001fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc0:	f383 8811 	msr	BASEPRI, r3
 8001fc4:	f3bf 8f6f 	isb	sy
 8001fc8:	f3bf 8f4f 	dsb	sy
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	e7fe      	b.n	8001fce <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd4:	1e5a      	subs	r2, r3, #1
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d044      	beq.n	8002070 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d140      	bne.n	8002070 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe f97e 	bl	80002f4 <uxListRemove>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d115      	bne.n	800202a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002002:	491f      	ldr	r1, [pc, #124]	; (8002080 <xTaskPriorityDisinherit+0x100>)
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10a      	bne.n	800202a <xTaskPriorityDisinherit+0xaa>
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002018:	2201      	movs	r2, #1
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43da      	mvns	r2, r3
 8002020:	4b18      	ldr	r3, [pc, #96]	; (8002084 <xTaskPriorityDisinherit+0x104>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4013      	ands	r3, r2
 8002026:	4a17      	ldr	r2, [pc, #92]	; (8002084 <xTaskPriorityDisinherit+0x104>)
 8002028:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002036:	f1c3 0205 	rsb	r2, r3, #5
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002042:	2201      	movs	r2, #1
 8002044:	409a      	lsls	r2, r3
 8002046:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <xTaskPriorityDisinherit+0x104>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4313      	orrs	r3, r2
 800204c:	4a0d      	ldr	r2, [pc, #52]	; (8002084 <xTaskPriorityDisinherit+0x104>)
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4a08      	ldr	r2, [pc, #32]	; (8002080 <xTaskPriorityDisinherit+0x100>)
 800205e:	441a      	add	r2, r3
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	3304      	adds	r3, #4
 8002064:	4619      	mov	r1, r3
 8002066:	4610      	mov	r0, r2
 8002068:	f7fe f8e7 	bl	800023a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800206c:	2301      	movs	r3, #1
 800206e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002070:	697b      	ldr	r3, [r7, #20]
	}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20012c7c 	.word	0x20012c7c
 8002080:	20012c80 	.word	0x20012c80
 8002084:	20012d5c 	.word	0x20012d5c

08002088 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002092:	4b29      	ldr	r3, [pc, #164]	; (8002138 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002098:	4b28      	ldr	r3, [pc, #160]	; (800213c <prvAddCurrentTaskToDelayedList+0xb4>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	3304      	adds	r3, #4
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe f928 	bl	80002f4 <uxListRemove>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d10b      	bne.n	80020c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80020aa:	4b24      	ldr	r3, [pc, #144]	; (800213c <prvAddCurrentTaskToDelayedList+0xb4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b0:	2201      	movs	r2, #1
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43da      	mvns	r2, r3
 80020b8:	4b21      	ldr	r3, [pc, #132]	; (8002140 <prvAddCurrentTaskToDelayedList+0xb8>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4013      	ands	r3, r2
 80020be:	4a20      	ldr	r2, [pc, #128]	; (8002140 <prvAddCurrentTaskToDelayedList+0xb8>)
 80020c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c8:	d10a      	bne.n	80020e0 <prvAddCurrentTaskToDelayedList+0x58>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d007      	beq.n	80020e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80020d0:	4b1a      	ldr	r3, [pc, #104]	; (800213c <prvAddCurrentTaskToDelayedList+0xb4>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	3304      	adds	r3, #4
 80020d6:	4619      	mov	r1, r3
 80020d8:	481a      	ldr	r0, [pc, #104]	; (8002144 <prvAddCurrentTaskToDelayedList+0xbc>)
 80020da:	f7fe f8ae 	bl	800023a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80020de:	e026      	b.n	800212e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80020e8:	4b14      	ldr	r3, [pc, #80]	; (800213c <prvAddCurrentTaskToDelayedList+0xb4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d209      	bcs.n	800210c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80020f8:	4b13      	ldr	r3, [pc, #76]	; (8002148 <prvAddCurrentTaskToDelayedList+0xc0>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4b0f      	ldr	r3, [pc, #60]	; (800213c <prvAddCurrentTaskToDelayedList+0xb4>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	3304      	adds	r3, #4
 8002102:	4619      	mov	r1, r3
 8002104:	4610      	mov	r0, r2
 8002106:	f7fe f8bc 	bl	8000282 <vListInsert>
}
 800210a:	e010      	b.n	800212e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800210c:	4b0f      	ldr	r3, [pc, #60]	; (800214c <prvAddCurrentTaskToDelayedList+0xc4>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b0a      	ldr	r3, [pc, #40]	; (800213c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	3304      	adds	r3, #4
 8002116:	4619      	mov	r1, r3
 8002118:	4610      	mov	r0, r2
 800211a:	f7fe f8b2 	bl	8000282 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800211e:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	429a      	cmp	r2, r3
 8002126:	d202      	bcs.n	800212e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002128:	4a09      	ldr	r2, [pc, #36]	; (8002150 <prvAddCurrentTaskToDelayedList+0xc8>)
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	6013      	str	r3, [r2, #0]
}
 800212e:	bf00      	nop
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20012d58 	.word	0x20012d58
 800213c:	20012c7c 	.word	0x20012c7c
 8002140:	20012d5c 	.word	0x20012d5c
 8002144:	20012d40 	.word	0x20012d40
 8002148:	20012d10 	.word	0x20012d10
 800214c:	20012d0c 	.word	0x20012d0c
 8002150:	20012d74 	.word	0x20012d74

08002154 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800215a:	2300      	movs	r3, #0
 800215c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800215e:	f000 fad1 	bl	8002704 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002162:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <xTimerCreateTimerTask+0x54>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00b      	beq.n	8002182 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <xTimerCreateTimerTask+0x58>)
 800216c:	9301      	str	r3, [sp, #4]
 800216e:	2302      	movs	r3, #2
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	2300      	movs	r3, #0
 8002174:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002178:	490d      	ldr	r1, [pc, #52]	; (80021b0 <xTimerCreateTimerTask+0x5c>)
 800217a:	480e      	ldr	r0, [pc, #56]	; (80021b4 <xTimerCreateTimerTask+0x60>)
 800217c:	f7ff f9a6 	bl	80014cc <xTaskCreate>
 8002180:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d109      	bne.n	800219c <xTimerCreateTimerTask+0x48>
 8002188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800218c:	f383 8811 	msr	BASEPRI, r3
 8002190:	f3bf 8f6f 	isb	sy
 8002194:	f3bf 8f4f 	dsb	sy
 8002198:	603b      	str	r3, [r7, #0]
 800219a:	e7fe      	b.n	800219a <xTimerCreateTimerTask+0x46>
	return xReturn;
 800219c:	687b      	ldr	r3, [r7, #4]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20012db0 	.word	0x20012db0
 80021ac:	20012db4 	.word	0x20012db4
 80021b0:	080032c0 	.word	0x080032c0
 80021b4:	080022e9 	.word	0x080022e9

080021b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	; 0x28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d109      	bne.n	80021e4 <xTimerGenericCommand+0x2c>
 80021d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d4:	f383 8811 	msr	BASEPRI, r3
 80021d8:	f3bf 8f6f 	isb	sy
 80021dc:	f3bf 8f4f 	dsb	sy
 80021e0:	623b      	str	r3, [r7, #32]
 80021e2:	e7fe      	b.n	80021e2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80021e4:	4b19      	ldr	r3, [pc, #100]	; (800224c <xTimerGenericCommand+0x94>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d02a      	beq.n	8002242 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	2b05      	cmp	r3, #5
 80021fc:	dc18      	bgt.n	8002230 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80021fe:	f7ff fea1 	bl	8001f44 <xTaskGetSchedulerState>
 8002202:	4603      	mov	r3, r0
 8002204:	2b02      	cmp	r3, #2
 8002206:	d109      	bne.n	800221c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002208:	4b10      	ldr	r3, [pc, #64]	; (800224c <xTimerGenericCommand+0x94>)
 800220a:	6818      	ldr	r0, [r3, #0]
 800220c:	f107 0114 	add.w	r1, r7, #20
 8002210:	2300      	movs	r3, #0
 8002212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002214:	f7fe fd80 	bl	8000d18 <xQueueGenericSend>
 8002218:	6278      	str	r0, [r7, #36]	; 0x24
 800221a:	e012      	b.n	8002242 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <xTimerGenericCommand+0x94>)
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	f107 0114 	add.w	r1, r7, #20
 8002224:	2300      	movs	r3, #0
 8002226:	2200      	movs	r2, #0
 8002228:	f7fe fd76 	bl	8000d18 <xQueueGenericSend>
 800222c:	6278      	str	r0, [r7, #36]	; 0x24
 800222e:	e008      	b.n	8002242 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <xTimerGenericCommand+0x94>)
 8002232:	6818      	ldr	r0, [r3, #0]
 8002234:	f107 0114 	add.w	r1, r7, #20
 8002238:	2300      	movs	r3, #0
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	f7fe fe66 	bl	8000f0c <xQueueGenericSendFromISR>
 8002240:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002244:	4618      	mov	r0, r3
 8002246:	3728      	adds	r7, #40	; 0x28
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20012db0 	.word	0x20012db0

08002250 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b088      	sub	sp, #32
 8002254:	af02      	add	r7, sp, #8
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800225a:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <prvProcessExpiredTimer+0x94>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	3304      	adds	r3, #4
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe f843 	bl	80002f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d021      	beq.n	80022c0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	699a      	ldr	r2, [r3, #24]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	18d1      	adds	r1, r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	6978      	ldr	r0, [r7, #20]
 800228a:	f000 f8d1 	bl	8002430 <prvInsertTimerInActiveList>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01e      	beq.n	80022d2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002294:	2300      	movs	r3, #0
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	2300      	movs	r3, #0
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	2100      	movs	r1, #0
 800229e:	6978      	ldr	r0, [r7, #20]
 80022a0:	f7ff ff8a 	bl	80021b8 <xTimerGenericCommand>
 80022a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d112      	bne.n	80022d2 <prvProcessExpiredTimer+0x82>
 80022ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b0:	f383 8811 	msr	BASEPRI, r3
 80022b4:	f3bf 8f6f 	isb	sy
 80022b8:	f3bf 8f4f 	dsb	sy
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	e7fe      	b.n	80022be <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022c6:	f023 0301 	bic.w	r3, r3, #1
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	6978      	ldr	r0, [r7, #20]
 80022d8:	4798      	blx	r3
}
 80022da:	bf00      	nop
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20012da8 	.word	0x20012da8

080022e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80022f0:	f107 0308 	add.w	r3, r7, #8
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 f857 	bl	80023a8 <prvGetNextExpireTime>
 80022fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	4619      	mov	r1, r3
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 f803 	bl	800230c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002306:	f000 f8d5 	bl	80024b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800230a:	e7f1      	b.n	80022f0 <prvTimerTask+0x8>

0800230c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002316:	f7ff fa63 	bl	80017e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800231a:	f107 0308 	add.w	r3, r7, #8
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f866 	bl	80023f0 <prvSampleTimeNow>
 8002324:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d130      	bne.n	800238e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10a      	bne.n	8002348 <prvProcessTimerOrBlockTask+0x3c>
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	429a      	cmp	r2, r3
 8002338:	d806      	bhi.n	8002348 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800233a:	f7ff fa5f 	bl	80017fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800233e:	68f9      	ldr	r1, [r7, #12]
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff ff85 	bl	8002250 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002346:	e024      	b.n	8002392 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d008      	beq.n	8002360 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800234e:	4b13      	ldr	r3, [pc, #76]	; (800239c <prvProcessTimerOrBlockTask+0x90>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <prvProcessTimerOrBlockTask+0x50>
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <prvProcessTimerOrBlockTask+0x52>
 800235c:	2300      	movs	r3, #0
 800235e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002360:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <prvProcessTimerOrBlockTask+0x94>)
 8002362:	6818      	ldr	r0, [r3, #0]
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	4619      	mov	r1, r3
 800236e:	f7ff f879 	bl	8001464 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002372:	f7ff fa43 	bl	80017fc <xTaskResumeAll>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10a      	bne.n	8002392 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800237c:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <prvProcessTimerOrBlockTask+0x98>)
 800237e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	f3bf 8f4f 	dsb	sy
 8002388:	f3bf 8f6f 	isb	sy
}
 800238c:	e001      	b.n	8002392 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800238e:	f7ff fa35 	bl	80017fc <xTaskResumeAll>
}
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20012dac 	.word	0x20012dac
 80023a0:	20012db0 	.word	0x20012db0
 80023a4:	e000ed04 	.word	0xe000ed04

080023a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80023b0:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <prvGetNextExpireTime+0x44>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <prvGetNextExpireTime+0x16>
 80023ba:	2201      	movs	r2, #1
 80023bc:	e000      	b.n	80023c0 <prvGetNextExpireTime+0x18>
 80023be:	2200      	movs	r2, #0
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d105      	bne.n	80023d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80023cc:	4b07      	ldr	r3, [pc, #28]	; (80023ec <prvGetNextExpireTime+0x44>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	e001      	b.n	80023dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80023dc:	68fb      	ldr	r3, [r7, #12]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20012da8 	.word	0x20012da8

080023f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80023f8:	f7ff fa9c 	bl	8001934 <xTaskGetTickCount>
 80023fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80023fe:	4b0b      	ldr	r3, [pc, #44]	; (800242c <prvSampleTimeNow+0x3c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	429a      	cmp	r2, r3
 8002406:	d205      	bcs.n	8002414 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002408:	f000 f918 	bl	800263c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	e002      	b.n	800241a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800241a:	4a04      	ldr	r2, [pc, #16]	; (800242c <prvSampleTimeNow+0x3c>)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002420:	68fb      	ldr	r3, [r7, #12]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20012db8 	.word	0x20012db8

08002430 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
 800243c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	429a      	cmp	r2, r3
 8002454:	d812      	bhi.n	800247c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	1ad2      	subs	r2, r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	429a      	cmp	r2, r3
 8002462:	d302      	bcc.n	800246a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002464:	2301      	movs	r3, #1
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	e01b      	b.n	80024a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800246a:	4b10      	ldr	r3, [pc, #64]	; (80024ac <prvInsertTimerInActiveList+0x7c>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	3304      	adds	r3, #4
 8002472:	4619      	mov	r1, r3
 8002474:	4610      	mov	r0, r2
 8002476:	f7fd ff04 	bl	8000282 <vListInsert>
 800247a:	e012      	b.n	80024a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d206      	bcs.n	8002492 <prvInsertTimerInActiveList+0x62>
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d302      	bcc.n	8002492 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800248c:	2301      	movs	r3, #1
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	e007      	b.n	80024a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002492:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <prvInsertTimerInActiveList+0x80>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	3304      	adds	r3, #4
 800249a:	4619      	mov	r1, r3
 800249c:	4610      	mov	r0, r2
 800249e:	f7fd fef0 	bl	8000282 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80024a2:	697b      	ldr	r3, [r7, #20]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20012dac 	.word	0x20012dac
 80024b0:	20012da8 	.word	0x20012da8

080024b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08c      	sub	sp, #48	; 0x30
 80024b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80024ba:	e0ac      	b.n	8002616 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f2c0 80a9 	blt.w	8002616 <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d004      	beq.n	80024da <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	3304      	adds	r3, #4
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fd ff0d 	bl	80002f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80024da:	1d3b      	adds	r3, r7, #4
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff ff87 	bl	80023f0 <prvSampleTimeNow>
 80024e2:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b09      	cmp	r3, #9
 80024e8:	f200 8094 	bhi.w	8002614 <prvProcessReceivedCommands+0x160>
 80024ec:	a201      	add	r2, pc, #4	; (adr r2, 80024f4 <prvProcessReceivedCommands+0x40>)
 80024ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f2:	bf00      	nop
 80024f4:	0800251d 	.word	0x0800251d
 80024f8:	0800251d 	.word	0x0800251d
 80024fc:	0800251d 	.word	0x0800251d
 8002500:	0800258f 	.word	0x0800258f
 8002504:	080025a3 	.word	0x080025a3
 8002508:	080025eb 	.word	0x080025eb
 800250c:	0800251d 	.word	0x0800251d
 8002510:	0800251d 	.word	0x0800251d
 8002514:	0800258f 	.word	0x0800258f
 8002518:	080025a3 	.word	0x080025a3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	b2da      	uxtb	r2, r3
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	18d1      	adds	r1, r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a3a      	ldr	r2, [r7, #32]
 800253a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800253c:	f7ff ff78 	bl	8002430 <prvInsertTimerInActiveList>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d067      	beq.n	8002616 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800254c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d05c      	beq.n	8002616 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	441a      	add	r2, r3
 8002564:	2300      	movs	r3, #0
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	2300      	movs	r3, #0
 800256a:	2100      	movs	r1, #0
 800256c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800256e:	f7ff fe23 	bl	80021b8 <xTimerGenericCommand>
 8002572:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d14d      	bne.n	8002616 <prvProcessReceivedCommands+0x162>
 800257a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800257e:	f383 8811 	msr	BASEPRI, r3
 8002582:	f3bf 8f6f 	isb	sy
 8002586:	f3bf 8f4f 	dsb	sy
 800258a:	61bb      	str	r3, [r7, #24]
 800258c:	e7fe      	b.n	800258c <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	b2da      	uxtb	r2, r3
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80025a0:	e039      	b.n	8002616 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d109      	bne.n	80025d6 <prvProcessReceivedCommands+0x122>
 80025c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c6:	f383 8811 	msr	BASEPRI, r3
 80025ca:	f3bf 8f6f 	isb	sy
 80025ce:	f3bf 8f4f 	dsb	sy
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	e7fe      	b.n	80025d4 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	699a      	ldr	r2, [r3, #24]
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	18d1      	adds	r1, r2, r3
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	6a3a      	ldr	r2, [r7, #32]
 80025e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025e4:	f7ff ff24 	bl	8002430 <prvInsertTimerInActiveList>
					break;
 80025e8:	e015      	b.n	8002616 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d103      	bne.n	8002600 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 80025f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025fa:	f7fe f9b1 	bl	8000960 <vPortFree>
 80025fe:	e00a      	b.n	8002616 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002606:	f023 0301 	bic.w	r3, r3, #1
 800260a:	b2da      	uxtb	r2, r3
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002612:	e000      	b.n	8002616 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 8002614:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002616:	4b08      	ldr	r3, [pc, #32]	; (8002638 <prvProcessReceivedCommands+0x184>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f107 0108 	add.w	r1, r7, #8
 800261e:	2200      	movs	r2, #0
 8002620:	4618      	mov	r0, r3
 8002622:	f7fe fd0b 	bl	800103c <xQueueReceive>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	f47f af47 	bne.w	80024bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800262e:	bf00      	nop
 8002630:	3728      	adds	r7, #40	; 0x28
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20012db0 	.word	0x20012db0

0800263c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b088      	sub	sp, #32
 8002640:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002642:	e047      	b.n	80026d4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002644:	4b2d      	ldr	r3, [pc, #180]	; (80026fc <prvSwitchTimerLists+0xc0>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800264e:	4b2b      	ldr	r3, [pc, #172]	; (80026fc <prvSwitchTimerLists+0xc0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	3304      	adds	r3, #4
 800265c:	4618      	mov	r0, r3
 800265e:	f7fd fe49 	bl	80002f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	6938      	ldr	r0, [r7, #16]
 8002668:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d02d      	beq.n	80026d4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	699a      	ldr	r2, [r3, #24]
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	4413      	add	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	429a      	cmp	r2, r3
 8002688:	d90e      	bls.n	80026a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002696:	4b19      	ldr	r3, [pc, #100]	; (80026fc <prvSwitchTimerLists+0xc0>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	3304      	adds	r3, #4
 800269e:	4619      	mov	r1, r3
 80026a0:	4610      	mov	r0, r2
 80026a2:	f7fd fdee 	bl	8000282 <vListInsert>
 80026a6:	e015      	b.n	80026d4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80026a8:	2300      	movs	r3, #0
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	2300      	movs	r3, #0
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	2100      	movs	r1, #0
 80026b2:	6938      	ldr	r0, [r7, #16]
 80026b4:	f7ff fd80 	bl	80021b8 <xTimerGenericCommand>
 80026b8:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d109      	bne.n	80026d4 <prvSwitchTimerLists+0x98>
 80026c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c4:	f383 8811 	msr	BASEPRI, r3
 80026c8:	f3bf 8f6f 	isb	sy
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	603b      	str	r3, [r7, #0]
 80026d2:	e7fe      	b.n	80026d2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80026d4:	4b09      	ldr	r3, [pc, #36]	; (80026fc <prvSwitchTimerLists+0xc0>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1b2      	bne.n	8002644 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80026de:	4b07      	ldr	r3, [pc, #28]	; (80026fc <prvSwitchTimerLists+0xc0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <prvSwitchTimerLists+0xc4>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a04      	ldr	r2, [pc, #16]	; (80026fc <prvSwitchTimerLists+0xc0>)
 80026ea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80026ec:	4a04      	ldr	r2, [pc, #16]	; (8002700 <prvSwitchTimerLists+0xc4>)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6013      	str	r3, [r2, #0]
}
 80026f2:	bf00      	nop
 80026f4:	3718      	adds	r7, #24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20012da8 	.word	0x20012da8
 8002700:	20012dac 	.word	0x20012dac

08002704 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002708:	f7fd ff48 	bl	800059c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800270c:	4b12      	ldr	r3, [pc, #72]	; (8002758 <prvCheckForValidListAndQueue+0x54>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d11d      	bne.n	8002750 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8002714:	4811      	ldr	r0, [pc, #68]	; (800275c <prvCheckForValidListAndQueue+0x58>)
 8002716:	f7fd fd63 	bl	80001e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800271a:	4811      	ldr	r0, [pc, #68]	; (8002760 <prvCheckForValidListAndQueue+0x5c>)
 800271c:	f7fd fd60 	bl	80001e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002720:	4b10      	ldr	r3, [pc, #64]	; (8002764 <prvCheckForValidListAndQueue+0x60>)
 8002722:	4a0e      	ldr	r2, [pc, #56]	; (800275c <prvCheckForValidListAndQueue+0x58>)
 8002724:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <prvCheckForValidListAndQueue+0x64>)
 8002728:	4a0d      	ldr	r2, [pc, #52]	; (8002760 <prvCheckForValidListAndQueue+0x5c>)
 800272a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800272c:	2200      	movs	r2, #0
 800272e:	210c      	movs	r1, #12
 8002730:	200a      	movs	r0, #10
 8002732:	f7fe fa99 	bl	8000c68 <xQueueGenericCreate>
 8002736:	4602      	mov	r2, r0
 8002738:	4b07      	ldr	r3, [pc, #28]	; (8002758 <prvCheckForValidListAndQueue+0x54>)
 800273a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <prvCheckForValidListAndQueue+0x54>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002744:	4b04      	ldr	r3, [pc, #16]	; (8002758 <prvCheckForValidListAndQueue+0x54>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4908      	ldr	r1, [pc, #32]	; (800276c <prvCheckForValidListAndQueue+0x68>)
 800274a:	4618      	mov	r0, r3
 800274c:	f7fe fe62 	bl	8001414 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002750:	f7fd ff52 	bl	80005f8 <vPortExitCritical>
}
 8002754:	bf00      	nop
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20012db0 	.word	0x20012db0
 800275c:	20012d80 	.word	0x20012d80
 8002760:	20012d94 	.word	0x20012d94
 8002764:	20012da8 	.word	0x20012da8
 8002768:	20012dac 	.word	0x20012dac
 800276c:	080032c8 	.word	0x080032c8

08002770 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8002780:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <DAC_SetChannel1Data+0x34>)
 8002782:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4413      	add	r3, r2
 800278a:	3308      	adds	r3, #8
 800278c:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	461a      	mov	r2, r3
 8002792:	887b      	ldrh	r3, [r7, #2]
 8002794:	6013      	str	r3, [r2, #0]
}
 8002796:	bf00      	nop
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40007400 	.word	0x40007400

080027a8 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4b25      	ldr	r3, [pc, #148]	; (8002854 <DMA_Init+0xac>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80027d2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80027de:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80027ea:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80027f6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fc:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4313      	orrs	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f023 0307 	bic.w	r3, r3, #7
 8002816:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	4313      	orrs	r3, r2
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	4313      	orrs	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	691a      	ldr	r2, [r3, #16]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	60da      	str	r2, [r3, #12]
}
 8002846:	bf00      	nop
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	f01c803f 	.word	0xf01c803f

08002858 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d006      	beq.n	8002878 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f043 0201 	orr.w	r2, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8002876:	e005      	b.n	8002884 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f023 0201 	bic.w	r2, r3, #1
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	601a      	str	r2, [r3, #0]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8002898:	2300      	movs	r3, #0
 800289a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d002      	beq.n	80028ae <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 80028a8:	2301      	movs	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
 80028ac:	e001      	b.n	80028b2 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 80028ae:	2300      	movs	r3, #0
 80028b0:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80028ca:	2300      	movs	r3, #0
 80028cc:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a15      	ldr	r2, [pc, #84]	; (800292c <DMA_GetFlagStatus+0x6c>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d802      	bhi.n	80028e0 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80028da:	4b15      	ldr	r3, [pc, #84]	; (8002930 <DMA_GetFlagStatus+0x70>)
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	e001      	b.n	80028e4 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80028e0:	4b14      	ldr	r3, [pc, #80]	; (8002934 <DMA_GetFlagStatus+0x74>)
 80028e2:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	e002      	b.n	80028fc <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002902:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002906:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	4013      	ands	r3, r2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8002912:	2301      	movs	r3, #1
 8002914:	75fb      	strb	r3, [r7, #23]
 8002916:	e001      	b.n	800291c <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8002918:	2300      	movs	r3, #0
 800291a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800291c:	7dfb      	ldrb	r3, [r7, #23]
}
 800291e:	4618      	mov	r0, r3
 8002920:	371c      	adds	r7, #28
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	4002640f 	.word	0x4002640f
 8002930:	40026000 	.word	0x40026000
 8002934:	40026400 	.word	0x40026400

08002938 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a10      	ldr	r2, [pc, #64]	; (8002988 <DMA_ClearFlag+0x50>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d802      	bhi.n	8002950 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800294a:	4b10      	ldr	r3, [pc, #64]	; (800298c <DMA_ClearFlag+0x54>)
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	e001      	b.n	8002954 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002950:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <DMA_ClearFlag+0x58>)
 8002952:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d007      	beq.n	800296e <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002964:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 800296c:	e006      	b.n	800297c <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002974:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	6093      	str	r3, [r2, #8]
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	4002640f 	.word	0x4002640f
 800298c:	40026000 	.word	0x40026000
 8002990:	40026400 	.word	0x40026400

08002994 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	e076      	b.n	8002a9e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80029b0:	2201      	movs	r2, #1
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4013      	ands	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d165      	bne.n	8002a98 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	2103      	movs	r1, #3
 80029d6:	fa01 f303 	lsl.w	r3, r1, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	401a      	ands	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	791b      	ldrb	r3, [r3, #4]
 80029ea:	4619      	mov	r1, r3
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	fa01 f303 	lsl.w	r3, r1, r3
 80029f4:	431a      	orrs	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	791b      	ldrb	r3, [r3, #4]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d003      	beq.n	8002a0a <GPIO_Init+0x76>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	791b      	ldrb	r3, [r3, #4]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d12e      	bne.n	8002a68 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	2103      	movs	r1, #3
 8002a14:	fa01 f303 	lsl.w	r3, r1, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	795b      	ldrb	r3, [r3, #5]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	4619      	mov	r1, r3
 8002a42:	2301      	movs	r3, #1
 8002a44:	408b      	lsls	r3, r1
 8002a46:	43db      	mvns	r3, r3
 8002a48:	401a      	ands	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	7992      	ldrb	r2, [r2, #6]
 8002a56:	4611      	mov	r1, r2
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	b292      	uxth	r2, r2
 8002a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a60:	b292      	uxth	r2, r2
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	2103      	movs	r1, #3
 8002a74:	fa01 f303 	lsl.w	r3, r1, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	401a      	ands	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	79db      	ldrb	r3, [r3, #7]
 8002a88:	4619      	mov	r1, r3
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	617b      	str	r3, [r7, #20]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2b0f      	cmp	r3, #15
 8002aa2:	d985      	bls.n	80029b0 <GPIO_Init+0x1c>
    }
  }
}
 8002aa4:	bf00      	nop
 8002aa6:	371c      	adds	r7, #28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002ab4:	4a12      	ldr	r2, [pc, #72]	; (8002b00 <RCC_DeInit+0x50>)
 8002ab6:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <RCC_DeInit+0x50>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ac0:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <RCC_DeInit+0x50>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 8002ac6:	4a0e      	ldr	r2, [pc, #56]	; (8002b00 <RCC_DeInit+0x50>)
 8002ac8:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <RCC_DeInit+0x50>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 8002ad0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002ad6:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <RCC_DeInit+0x50>)
 8002ad8:	4a0a      	ldr	r2, [pc, #40]	; (8002b04 <RCC_DeInit+0x54>)
 8002ada:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8002adc:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <RCC_DeInit+0x50>)
 8002ade:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <RCC_DeInit+0x58>)
 8002ae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002ae4:	4a06      	ldr	r2, [pc, #24]	; (8002b00 <RCC_DeInit+0x50>)
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <RCC_DeInit+0x50>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002af0:	4b03      	ldr	r3, [pc, #12]	; (8002b00 <RCC_DeInit+0x50>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 8002af6:	bf00      	nop
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	40023800 	.word	0x40023800
 8002b04:	24003010 	.word	0x24003010
 8002b08:	20003000 	.word	0x20003000

08002b0c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002b18:	78fb      	ldrb	r3, [r7, #3]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d006      	beq.n	8002b2c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8002b1e:	490a      	ldr	r1, [pc, #40]	; (8002b48 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002b20:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002b22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8002b2a:	e006      	b.n	8002b3a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8002b2c:	4906      	ldr	r1, [pc, #24]	; (8002b48 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002b2e:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002b30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	43db      	mvns	r3, r3
 8002b36:	4013      	ands	r3, r2
 8002b38:	630b      	str	r3, [r1, #48]	; 0x30
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	40023800 	.word	0x40023800

08002b4c <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	887a      	ldrh	r2, [r7, #2]
 8002b5c:	819a      	strh	r2, [r3, #12]
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b085      	sub	sp, #20
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	460b      	mov	r3, r1
 8002b74:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002b76:	2300      	movs	r3, #0
 8002b78:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	891b      	ldrh	r3, [r3, #8]
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	887b      	ldrh	r3, [r7, #2]
 8002b82:	4013      	ands	r3, r2
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d002      	beq.n	8002b90 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	73fb      	strb	r3, [r7, #15]
 8002b8e:	e001      	b.n	8002b94 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8002b90:	2300      	movs	r3, #0
 8002b92:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	4a10      	ldr	r2, [pc, #64]	; (8002bf4 <STM_EVAL_LEDInit+0x50>)
 8002bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ffa7 	bl	8002b0c <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	4a0d      	ldr	r2, [pc, #52]	; (8002bf8 <STM_EVAL_LEDInit+0x54>)
 8002bc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8002bd8:	79fb      	ldrb	r3, [r7, #7]
 8002bda:	4a08      	ldr	r2, [pc, #32]	; (8002bfc <STM_EVAL_LEDInit+0x58>)
 8002bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be0:	f107 0208 	add.w	r2, r7, #8
 8002be4:	4611      	mov	r1, r2
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff fed4 	bl	8002994 <GPIO_Init>
}
 8002bec:	bf00      	nop
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	080032fc 	.word	0x080032fc
 8002bf8:	080032f4 	.word	0x080032f4
 8002bfc:	20000004 	.word	0x20000004

08002c00 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	4a06      	ldr	r2, [pc, #24]	; (8002c28 <STM_EVAL_LEDOn+0x28>)
 8002c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c12:	79fa      	ldrb	r2, [r7, #7]
 8002c14:	4905      	ldr	r1, [pc, #20]	; (8002c2c <STM_EVAL_LEDOn+0x2c>)
 8002c16:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002c1a:	831a      	strh	r2, [r3, #24]
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	20000004 	.word	0x20000004
 8002c2c:	080032f4 	.word	0x080032f4

08002c30 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8002c34:	4b38      	ldr	r3, [pc, #224]	; (8002d18 <Audio_MAL_IRQHandler+0xe8>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	4b38      	ldr	r3, [pc, #224]	; (8002d1c <Audio_MAL_IRQHandler+0xec>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4610      	mov	r0, r2
 8002c40:	f7ff fe3e 	bl	80028c0 <DMA_GetFlagStatus>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d064      	beq.n	8002d14 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8002c4a:	4b35      	ldr	r3, [pc, #212]	; (8002d20 <Audio_MAL_IRQHandler+0xf0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d04c      	beq.n	8002cec <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8002c52:	bf00      	nop
 8002c54:	4b30      	ldr	r3, [pc, #192]	; (8002d18 <Audio_MAL_IRQHandler+0xe8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fe19 	bl	8002890 <DMA_GetCmdStatus>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1f7      	bne.n	8002c54 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8002c64:	4b2c      	ldr	r3, [pc, #176]	; (8002d18 <Audio_MAL_IRQHandler+0xe8>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4b2c      	ldr	r3, [pc, #176]	; (8002d1c <Audio_MAL_IRQHandler+0xec>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4610      	mov	r0, r2
 8002c70:	f7ff fe62 	bl	8002938 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8002c74:	4b2b      	ldr	r3, [pc, #172]	; (8002d24 <Audio_MAL_IRQHandler+0xf4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4b2b      	ldr	r3, [pc, #172]	; (8002d28 <Audio_MAL_IRQHandler+0xf8>)
 8002c7c:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8002c7e:	4b28      	ldr	r3, [pc, #160]	; (8002d20 <Audio_MAL_IRQHandler+0xf0>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c86:	4293      	cmp	r3, r2
 8002c88:	bf28      	it	cs
 8002c8a:	4613      	movcs	r3, r2
 8002c8c:	4a26      	ldr	r2, [pc, #152]	; (8002d28 <Audio_MAL_IRQHandler+0xf8>)
 8002c8e:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8002c90:	4b21      	ldr	r3, [pc, #132]	; (8002d18 <Audio_MAL_IRQHandler+0xe8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4924      	ldr	r1, [pc, #144]	; (8002d28 <Audio_MAL_IRQHandler+0xf8>)
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff fd86 	bl	80027a8 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8002c9c:	4b1e      	ldr	r3, [pc, #120]	; (8002d18 <Audio_MAL_IRQHandler+0xe8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff fdd8 	bl	8002858 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8002ca8:	4b1e      	ldr	r3, [pc, #120]	; (8002d24 <Audio_MAL_IRQHandler+0xf4>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	4b1c      	ldr	r3, [pc, #112]	; (8002d20 <Audio_MAL_IRQHandler+0xf0>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb4:	d203      	bcs.n	8002cbe <Audio_MAL_IRQHandler+0x8e>
 8002cb6:	4b1a      	ldr	r3, [pc, #104]	; (8002d20 <Audio_MAL_IRQHandler+0xf0>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	e000      	b.n	8002cc0 <Audio_MAL_IRQHandler+0x90>
 8002cbe:	4b1b      	ldr	r3, [pc, #108]	; (8002d2c <Audio_MAL_IRQHandler+0xfc>)
 8002cc0:	4413      	add	r3, r2
 8002cc2:	4a18      	ldr	r2, [pc, #96]	; (8002d24 <Audio_MAL_IRQHandler+0xf4>)
 8002cc4:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8002cc6:	4b16      	ldr	r3, [pc, #88]	; (8002d20 <Audio_MAL_IRQHandler+0xf0>)
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <Audio_MAL_IRQHandler+0xf0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002cd2:	428b      	cmp	r3, r1
 8002cd4:	bf28      	it	cs
 8002cd6:	460b      	movcs	r3, r1
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	4a11      	ldr	r2, [pc, #68]	; (8002d20 <Audio_MAL_IRQHandler+0xf0>)
 8002cdc:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8002cde:	4b0e      	ldr	r3, [pc, #56]	; (8002d18 <Audio_MAL_IRQHandler+0xe8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff fdb7 	bl	8002858 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8002cea:	e013      	b.n	8002d14 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8002cec:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <Audio_MAL_IRQHandler+0xe8>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff fdb0 	bl	8002858 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8002cf8:	4b07      	ldr	r3, [pc, #28]	; (8002d18 <Audio_MAL_IRQHandler+0xe8>)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	4b07      	ldr	r3, [pc, #28]	; (8002d1c <Audio_MAL_IRQHandler+0xec>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4619      	mov	r1, r3
 8002d02:	4610      	mov	r0, r2
 8002d04:	f7ff fe18 	bl	8002938 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <Audio_MAL_IRQHandler+0xf4>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 f8e4 	bl	8002edc <EVAL_AUDIO_TransferComplete_CallBack>
}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	2000001c 	.word	0x2000001c
 8002d1c:	20000020 	.word	0x20000020
 8002d20:	20000014 	.word	0x20000014
 8002d24:	20012e04 	.word	0x20012e04
 8002d28:	20012e44 	.word	0x20012e44
 8002d2c:	0001fffe 	.word	0x0001fffe

08002d30 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8002d34:	f7ff ff7c 	bl	8002c30 <Audio_MAL_IRQHandler>
}
 8002d38:	bf00      	nop
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8002d40:	f7ff ff76 	bl	8002c30 <Audio_MAL_IRQHandler>
}
 8002d44:	bf00      	nop
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8002d4c:	2102      	movs	r1, #2
 8002d4e:	480d      	ldr	r0, [pc, #52]	; (8002d84 <SPI3_IRQHandler+0x3c>)
 8002d50:	f7ff ff0b 	bl	8002b6a <SPI_I2S_GetFlagStatus>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d011      	beq.n	8002d7e <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8002d5a:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <SPI3_IRQHandler+0x40>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d106      	bne.n	8002d70 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8002d62:	f000 f8c6 	bl	8002ef2 <EVAL_AUDIO_GetSampleCallBack>
 8002d66:	4603      	mov	r3, r0
 8002d68:	4619      	mov	r1, r3
 8002d6a:	2004      	movs	r0, #4
 8002d6c:	f7ff fd00 	bl	8002770 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8002d70:	f000 f8bf 	bl	8002ef2 <EVAL_AUDIO_GetSampleCallBack>
 8002d74:	4603      	mov	r3, r0
 8002d76:	4619      	mov	r1, r3
 8002d78:	4802      	ldr	r0, [pc, #8]	; (8002d84 <SPI3_IRQHandler+0x3c>)
 8002d7a:	f7ff fee7 	bl	8002b4c <SPI_I2S_SendData>
  }
}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40003c00 	.word	0x40003c00
 8002d88:	20000018 	.word	0x20000018

08002d8c <ITM_SendChar>:
    \param [in]     ch  Character to transmit.

    \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8002d94:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002d98:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d012      	beq.n	8002dca <ITM_SendChar+0x3e>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 8002da4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002da8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002dac:	f003 0301 	and.w	r3, r3, #1
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00a      	beq.n	8002dca <ITM_SendChar+0x3e>
  {
    while (ITM->PORT[0].u32 == 0);
 8002db4:	bf00      	nop
 8002db6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0fa      	beq.n	8002db6 <ITM_SendChar+0x2a>
    ITM->PORT[0].u8 = (uint8_t) ch;
 8002dc0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002dca:	687b      	ldr	r3, [r7, #4]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <_write>:

/* Private functions */

// Printf
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */

	for(int i = 0; i < len; i++)
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	e009      	b.n	8002dfe <_write+0x26>
	{
		ITM_SendChar(ptr[i]);
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	4413      	add	r3, r2
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff ffca 	bl	8002d8c <ITM_SendChar>
	for(int i = 0; i < len; i++)
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	dbf1      	blt.n	8002dea <_write+0x12>
	}

	return len;
 8002e06:	687b      	ldr	r3, [r7, #4]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af02      	add	r7, sp, #8


  // INIT
  RCC_DeInit();						// System clock 16MHz olarak ayarlandi
 8002e16:	f7ff fe4b 	bl	8002ab0 <RCC_DeInit>
  SystemCoreClockUpdate();			// System clock update edildi
 8002e1a:	f000 f8e5 	bl	8002fe8 <SystemCoreClockUpdate>


  /* Initialize LEDs */
  STM_EVAL_LEDInit(LED3);
 8002e1e:	2001      	movs	r0, #1
 8002e20:	f7ff fec0 	bl	8002ba4 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED4);
 8002e24:	2000      	movs	r0, #0
 8002e26:	f7ff febd 	bl	8002ba4 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED5);
 8002e2a:	2002      	movs	r0, #2
 8002e2c:	f7ff feba 	bl	8002ba4 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED6);
 8002e30:	2003      	movs	r0, #3
 8002e32:	f7ff feb7 	bl	8002ba4 <STM_EVAL_LEDInit>

  /* Turn on LEDs */
  STM_EVAL_LEDOn(LED3);
 8002e36:	2001      	movs	r0, #1
 8002e38:	f7ff fee2 	bl	8002c00 <STM_EVAL_LEDOn>
  STM_EVAL_LEDOn(LED4);
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	f7ff fedf 	bl	8002c00 <STM_EVAL_LEDOn>
  STM_EVAL_LEDOn(LED5);
 8002e42:	2002      	movs	r0, #2
 8002e44:	f7ff fedc 	bl	8002c00 <STM_EVAL_LEDOn>
  STM_EVAL_LEDOn(LED6);
 8002e48:	2003      	movs	r0, #3
 8002e4a:	f7ff fed9 	bl	8002c00 <STM_EVAL_LEDOn>


  //FreeRTOS INIT

  // 1. TASK YARATILIR
  xTaskCreate( task_1_handle_fp,                // Function Pointer
 8002e4e:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <main+0x6c>)
 8002e50:	9301      	str	r3, [sp, #4]
 8002e52:	2301      	movs	r3, #1
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	2300      	movs	r3, #0
 8002e58:	2282      	movs	r2, #130	; 0x82
 8002e5a:	4909      	ldr	r1, [pc, #36]	; (8002e80 <main+0x70>)
 8002e5c:	4809      	ldr	r0, [pc, #36]	; (8002e84 <main+0x74>)
 8002e5e:	f7fe fb35 	bl	80014cc <xTaskCreate>
               NULL                    ,        // Function Parameter
               1                       ,		// PRIORTY
			   &p_my_task_handle_1_st   );      // Task object


  xTaskCreate( task_2_handle_fp,                // Function Pointer
 8002e62:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <main+0x78>)
 8002e64:	9301      	str	r3, [sp, #4]
 8002e66:	2301      	movs	r3, #1
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	2282      	movs	r2, #130	; 0x82
 8002e6e:	4907      	ldr	r1, [pc, #28]	; (8002e8c <main+0x7c>)
 8002e70:	4807      	ldr	r0, [pc, #28]	; (8002e90 <main+0x80>)
 8002e72:	f7fe fb2b 	bl	80014cc <xTaskCreate>
			   &p_my_task_handle_2_st   );      // Task object



  // 2. TASKLAR ZAMANLANIR
  vTaskStartScheduler();
 8002e76:	f7fe fc67 	bl	8001748 <vTaskStartScheduler>




  /* Infinite loop */
  while (1)
 8002e7a:	e7fe      	b.n	8002e7a <main+0x6a>
 8002e7c:	20012dbc 	.word	0x20012dbc
 8002e80:	080032d0 	.word	0x080032d0
 8002e84:	08002e95 	.word	0x08002e95
 8002e88:	20012dc0 	.word	0x20012dc0
 8002e8c:	080032d8 	.word	0x080032d8
 8002e90:	08002eb9 	.word	0x08002eb9

08002e94 <task_1_handle_fp>:
//!< CREATED TASK BEGIN   <<



void task_1_handle_fp(void *params_vp)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]

	while(1)
	{
		syc_task_1_u8++;
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <task_1_handle_fp+0x1c>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	4b02      	ldr	r3, [pc, #8]	; (8002eb0 <task_1_handle_fp+0x1c>)
 8002ea6:	701a      	strb	r2, [r3, #0]

		printf("TASK-1 \n");
 8002ea8:	4802      	ldr	r0, [pc, #8]	; (8002eb4 <task_1_handle_fp+0x20>)
 8002eaa:	f000 f995 	bl	80031d8 <puts>
		syc_task_1_u8++;
 8002eae:	e7f5      	b.n	8002e9c <task_1_handle_fp+0x8>
 8002eb0:	20012e81 	.word	0x20012e81
 8002eb4:	080032e0 	.word	0x080032e0

08002eb8 <task_2_handle_fp>:
	}
}


void task_2_handle_fp(void *params_vp)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]

	while(1)
	{
		syc_task_2_u8++;
 8002ec0:	4b04      	ldr	r3, [pc, #16]	; (8002ed4 <task_2_handle_fp+0x1c>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	4b02      	ldr	r3, [pc, #8]	; (8002ed4 <task_2_handle_fp+0x1c>)
 8002eca:	701a      	strb	r2, [r3, #0]

		printf("TASK-2 \n");
 8002ecc:	4802      	ldr	r0, [pc, #8]	; (8002ed8 <task_2_handle_fp+0x20>)
 8002ece:	f000 f983 	bl	80031d8 <puts>
		syc_task_2_u8++;
 8002ed2:	e7f5      	b.n	8002ec0 <task_2_handle_fp+0x8>
 8002ed4:	20012e80 	.word	0x20012e80
 8002ed8:	080032e8 	.word	0x080032e8

08002edc <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8002ee6:	bf00      	nop
}
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8002ef2:	b480      	push	{r7}
 8002ef4:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8002ef6:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f0a:	e003      	b.n	8002f14 <LoopCopyDataInit>

08002f0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f12:	3104      	adds	r1, #4

08002f14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f14:	480b      	ldr	r0, [pc, #44]	; (8002f44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f16:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f1c:	d3f6      	bcc.n	8002f0c <CopyDataInit>
  ldr  r2, =_sbss
 8002f1e:	4a0b      	ldr	r2, [pc, #44]	; (8002f4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f20:	e002      	b.n	8002f28 <LoopFillZerobss>

08002f22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f24:	f842 3b04 	str.w	r3, [r2], #4

08002f28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f28:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f2c:	d3f9      	bcc.n	8002f22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f2e:	f000 f825 	bl	8002f7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f32:	f000 f97d 	bl	8003230 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f36:	f7ff ff6b 	bl	8002e10 <main>
  bx  lr    
 8002f3a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002f3c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002f40:	08003314 	.word	0x08003314
  ldr  r0, =_sdata
 8002f44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002f48:	20000038 	.word	0x20000038
  ldr  r2, =_sbss
 8002f4c:	20000038 	.word	0x20000038
  ldr  r3, = _ebss
 8002f50:	20012e84 	.word	0x20012e84

08002f54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f54:	e7fe      	b.n	8002f54 <ADC_IRQHandler>

08002f56 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002f56:	b480      	push	{r7}
 8002f58:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002f5a:	e7fe      	b.n	8002f5a <HardFault_Handler+0x4>

08002f5c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002f60:	e7fe      	b.n	8002f60 <MemManage_Handler+0x4>

08002f62 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002f62:	b480      	push	{r7}
 8002f64:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002f66:	e7fe      	b.n	8002f66 <BusFault_Handler+0x4>

08002f68 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002f6c:	e7fe      	b.n	8002f6c <UsageFault_Handler+0x4>

08002f6e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	af00      	add	r7, sp, #0
}
 8002f72:	bf00      	nop
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f80:	4a16      	ldr	r2, [pc, #88]	; (8002fdc <SystemInit+0x60>)
 8002f82:	4b16      	ldr	r3, [pc, #88]	; (8002fdc <SystemInit+0x60>)
 8002f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002f90:	4a13      	ldr	r2, [pc, #76]	; (8002fe0 <SystemInit+0x64>)
 8002f92:	4b13      	ldr	r3, [pc, #76]	; (8002fe0 <SystemInit+0x64>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002f9c:	4b10      	ldr	r3, [pc, #64]	; (8002fe0 <SystemInit+0x64>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002fa2:	4a0f      	ldr	r2, [pc, #60]	; (8002fe0 <SystemInit+0x64>)
 8002fa4:	4b0e      	ldr	r3, [pc, #56]	; (8002fe0 <SystemInit+0x64>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002fb2:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <SystemInit+0x64>)
 8002fb4:	4a0b      	ldr	r2, [pc, #44]	; (8002fe4 <SystemInit+0x68>)
 8002fb6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002fb8:	4a09      	ldr	r2, [pc, #36]	; (8002fe0 <SystemInit+0x64>)
 8002fba:	4b09      	ldr	r3, [pc, #36]	; (8002fe0 <SystemInit+0x64>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fc2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002fc4:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <SystemInit+0x64>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002fca:	f000 f889 	bl	80030e0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fce:	4b03      	ldr	r3, [pc, #12]	; (8002fdc <SystemInit+0x60>)
 8002fd0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fd4:	609a      	str	r2, [r3, #8]
#endif
}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	e000ed00 	.word	0xe000ed00
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	24003010 	.word	0x24003010

08002fe8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	613b      	str	r3, [r7, #16]
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	2302      	movs	r3, #2
 8003000:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003002:	4b32      	ldr	r3, [pc, #200]	; (80030cc <SystemCoreClockUpdate+0xe4>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
 800300a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	2b04      	cmp	r3, #4
 8003010:	d007      	beq.n	8003022 <SystemCoreClockUpdate+0x3a>
 8003012:	2b08      	cmp	r3, #8
 8003014:	d009      	beq.n	800302a <SystemCoreClockUpdate+0x42>
 8003016:	2b00      	cmp	r3, #0
 8003018:	d13d      	bne.n	8003096 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800301a:	4b2d      	ldr	r3, [pc, #180]	; (80030d0 <SystemCoreClockUpdate+0xe8>)
 800301c:	4a2d      	ldr	r2, [pc, #180]	; (80030d4 <SystemCoreClockUpdate+0xec>)
 800301e:	601a      	str	r2, [r3, #0]
      break;
 8003020:	e03d      	b.n	800309e <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003022:	4b2b      	ldr	r3, [pc, #172]	; (80030d0 <SystemCoreClockUpdate+0xe8>)
 8003024:	4a2c      	ldr	r2, [pc, #176]	; (80030d8 <SystemCoreClockUpdate+0xf0>)
 8003026:	601a      	str	r2, [r3, #0]
      break;
 8003028:	e039      	b.n	800309e <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800302a:	4b28      	ldr	r3, [pc, #160]	; (80030cc <SystemCoreClockUpdate+0xe4>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	0d9b      	lsrs	r3, r3, #22
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003036:	4b25      	ldr	r3, [pc, #148]	; (80030cc <SystemCoreClockUpdate+0xe4>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800303e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00c      	beq.n	8003060 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003046:	4a24      	ldr	r2, [pc, #144]	; (80030d8 <SystemCoreClockUpdate+0xf0>)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	fbb2 f3f3 	udiv	r3, r2, r3
 800304e:	4a1f      	ldr	r2, [pc, #124]	; (80030cc <SystemCoreClockUpdate+0xe4>)
 8003050:	6852      	ldr	r2, [r2, #4]
 8003052:	0992      	lsrs	r2, r2, #6
 8003054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003058:	fb02 f303 	mul.w	r3, r2, r3
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	e00b      	b.n	8003078 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003060:	4a1c      	ldr	r2, [pc, #112]	; (80030d4 <SystemCoreClockUpdate+0xec>)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	fbb2 f3f3 	udiv	r3, r2, r3
 8003068:	4a18      	ldr	r2, [pc, #96]	; (80030cc <SystemCoreClockUpdate+0xe4>)
 800306a:	6852      	ldr	r2, [r2, #4]
 800306c:	0992      	lsrs	r2, r2, #6
 800306e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003072:	fb02 f303 	mul.w	r3, r2, r3
 8003076:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003078:	4b14      	ldr	r3, [pc, #80]	; (80030cc <SystemCoreClockUpdate+0xe4>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	0c1b      	lsrs	r3, r3, #16
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	3301      	adds	r3, #1
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003090:	4a0f      	ldr	r2, [pc, #60]	; (80030d0 <SystemCoreClockUpdate+0xe8>)
 8003092:	6013      	str	r3, [r2, #0]
      break;
 8003094:	e003      	b.n	800309e <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8003096:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <SystemCoreClockUpdate+0xe8>)
 8003098:	4a0e      	ldr	r2, [pc, #56]	; (80030d4 <SystemCoreClockUpdate+0xec>)
 800309a:	601a      	str	r2, [r3, #0]
      break;
 800309c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800309e:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <SystemCoreClockUpdate+0xe4>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	091b      	lsrs	r3, r3, #4
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	4a0c      	ldr	r2, [pc, #48]	; (80030dc <SystemCoreClockUpdate+0xf4>)
 80030aa:	5cd3      	ldrb	r3, [r2, r3]
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80030b0:	4b07      	ldr	r3, [pc, #28]	; (80030d0 <SystemCoreClockUpdate+0xe8>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ba:	4a05      	ldr	r2, [pc, #20]	; (80030d0 <SystemCoreClockUpdate+0xe8>)
 80030bc:	6013      	str	r3, [r2, #0]
}
 80030be:	bf00      	nop
 80030c0:	371c      	adds	r7, #28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800
 80030d0:	20000024 	.word	0x20000024
 80030d4:	00f42400 	.word	0x00f42400
 80030d8:	007a1200 	.word	0x007a1200
 80030dc:	20000028 	.word	0x20000028

080030e0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80030e6:	2300      	movs	r3, #0
 80030e8:	607b      	str	r3, [r7, #4]
 80030ea:	2300      	movs	r3, #0
 80030ec:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80030ee:	4a36      	ldr	r2, [pc, #216]	; (80031c8 <SetSysClock+0xe8>)
 80030f0:	4b35      	ldr	r3, [pc, #212]	; (80031c8 <SetSysClock+0xe8>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80030fa:	4b33      	ldr	r3, [pc, #204]	; (80031c8 <SetSysClock+0xe8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3301      	adds	r3, #1
 8003108:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d103      	bne.n	8003118 <SetSysClock+0x38>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003116:	d1f0      	bne.n	80030fa <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003118:	4b2b      	ldr	r3, [pc, #172]	; (80031c8 <SetSysClock+0xe8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003124:	2301      	movs	r3, #1
 8003126:	603b      	str	r3, [r7, #0]
 8003128:	e001      	b.n	800312e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800312a:	2300      	movs	r3, #0
 800312c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d142      	bne.n	80031ba <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003134:	4a24      	ldr	r2, [pc, #144]	; (80031c8 <SetSysClock+0xe8>)
 8003136:	4b24      	ldr	r3, [pc, #144]	; (80031c8 <SetSysClock+0xe8>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800313e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8003140:	4a22      	ldr	r2, [pc, #136]	; (80031cc <SetSysClock+0xec>)
 8003142:	4b22      	ldr	r3, [pc, #136]	; (80031cc <SetSysClock+0xec>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800314a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800314c:	4a1e      	ldr	r2, [pc, #120]	; (80031c8 <SetSysClock+0xe8>)
 800314e:	4b1e      	ldr	r3, [pc, #120]	; (80031c8 <SetSysClock+0xe8>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003154:	4a1c      	ldr	r2, [pc, #112]	; (80031c8 <SetSysClock+0xe8>)
 8003156:	4b1c      	ldr	r3, [pc, #112]	; (80031c8 <SetSysClock+0xe8>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800315e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003160:	4a19      	ldr	r2, [pc, #100]	; (80031c8 <SetSysClock+0xe8>)
 8003162:	4b19      	ldr	r3, [pc, #100]	; (80031c8 <SetSysClock+0xe8>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800316a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800316c:	4b16      	ldr	r3, [pc, #88]	; (80031c8 <SetSysClock+0xe8>)
 800316e:	4a18      	ldr	r2, [pc, #96]	; (80031d0 <SetSysClock+0xf0>)
 8003170:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003172:	4a15      	ldr	r2, [pc, #84]	; (80031c8 <SetSysClock+0xe8>)
 8003174:	4b14      	ldr	r3, [pc, #80]	; (80031c8 <SetSysClock+0xe8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800317c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800317e:	bf00      	nop
 8003180:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <SetSysClock+0xe8>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0f9      	beq.n	8003180 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800318c:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <SetSysClock+0xf4>)
 800318e:	f240 6205 	movw	r2, #1541	; 0x605
 8003192:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003194:	4a0c      	ldr	r2, [pc, #48]	; (80031c8 <SetSysClock+0xe8>)
 8003196:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <SetSysClock+0xe8>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f023 0303 	bic.w	r3, r3, #3
 800319e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80031a0:	4a09      	ldr	r2, [pc, #36]	; (80031c8 <SetSysClock+0xe8>)
 80031a2:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <SetSysClock+0xe8>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f043 0302 	orr.w	r3, r3, #2
 80031aa:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80031ac:	bf00      	nop
 80031ae:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <SetSysClock+0xe8>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	2b08      	cmp	r3, #8
 80031b8:	d1f9      	bne.n	80031ae <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	40023800 	.word	0x40023800
 80031cc:	40007000 	.word	0x40007000
 80031d0:	07405408 	.word	0x07405408
 80031d4:	40023c00 	.word	0x40023c00

080031d8 <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
	int length = strlen(s);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7fc fff5 	bl	80001d0 <strlen>
 80031e6:	4603      	mov	r3, r0
 80031e8:	613b      	str	r3, [r7, #16]
	int numbytes = 0;
 80031ea:	2300      	movs	r3, #0
 80031ec:	60fb      	str	r3, [r7, #12]
	int res;

	numbytes = _write(1, (char*)s, length);
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	2001      	movs	r0, #1
 80031f4:	f7ff fdf0 	bl	8002dd8 <_write>
 80031f8:	60f8      	str	r0, [r7, #12]
	numbytes += _write(1, "\n", 1);
 80031fa:	2201      	movs	r2, #1
 80031fc:	490b      	ldr	r1, [pc, #44]	; (800322c <puts+0x54>)
 80031fe:	2001      	movs	r0, #1
 8003200:	f7ff fdea 	bl	8002dd8 <_write>
 8003204:	4602      	mov	r2, r0
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4413      	add	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]

	if (numbytes == (length+1))
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	429a      	cmp	r2, r3
 8003214:	d102      	bne.n	800321c <puts+0x44>
	{
		res = 0;
 8003216:	2300      	movs	r3, #0
 8003218:	617b      	str	r3, [r7, #20]
 800321a:	e002      	b.n	8003222 <puts+0x4a>
	}
	else
	{
		res = EOF;
 800321c:	f04f 33ff 	mov.w	r3, #4294967295
 8003220:	617b      	str	r3, [r7, #20]
	}

	return res;
 8003222:	697b      	ldr	r3, [r7, #20]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	080032f0 	.word	0x080032f0

08003230 <__libc_init_array>:
 8003230:	b570      	push	{r4, r5, r6, lr}
 8003232:	4e0d      	ldr	r6, [pc, #52]	; (8003268 <__libc_init_array+0x38>)
 8003234:	4c0d      	ldr	r4, [pc, #52]	; (800326c <__libc_init_array+0x3c>)
 8003236:	1ba4      	subs	r4, r4, r6
 8003238:	10a4      	asrs	r4, r4, #2
 800323a:	2500      	movs	r5, #0
 800323c:	42a5      	cmp	r5, r4
 800323e:	d109      	bne.n	8003254 <__libc_init_array+0x24>
 8003240:	4e0b      	ldr	r6, [pc, #44]	; (8003270 <__libc_init_array+0x40>)
 8003242:	4c0c      	ldr	r4, [pc, #48]	; (8003274 <__libc_init_array+0x44>)
 8003244:	f000 f82c 	bl	80032a0 <_init>
 8003248:	1ba4      	subs	r4, r4, r6
 800324a:	10a4      	asrs	r4, r4, #2
 800324c:	2500      	movs	r5, #0
 800324e:	42a5      	cmp	r5, r4
 8003250:	d105      	bne.n	800325e <__libc_init_array+0x2e>
 8003252:	bd70      	pop	{r4, r5, r6, pc}
 8003254:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003258:	4798      	blx	r3
 800325a:	3501      	adds	r5, #1
 800325c:	e7ee      	b.n	800323c <__libc_init_array+0xc>
 800325e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003262:	4798      	blx	r3
 8003264:	3501      	adds	r5, #1
 8003266:	e7f2      	b.n	800324e <__libc_init_array+0x1e>
 8003268:	0800330c 	.word	0x0800330c
 800326c:	0800330c 	.word	0x0800330c
 8003270:	0800330c 	.word	0x0800330c
 8003274:	08003310 	.word	0x08003310

08003278 <memcpy>:
 8003278:	b510      	push	{r4, lr}
 800327a:	1e43      	subs	r3, r0, #1
 800327c:	440a      	add	r2, r1
 800327e:	4291      	cmp	r1, r2
 8003280:	d100      	bne.n	8003284 <memcpy+0xc>
 8003282:	bd10      	pop	{r4, pc}
 8003284:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003288:	f803 4f01 	strb.w	r4, [r3, #1]!
 800328c:	e7f7      	b.n	800327e <memcpy+0x6>

0800328e <memset>:
 800328e:	4402      	add	r2, r0
 8003290:	4603      	mov	r3, r0
 8003292:	4293      	cmp	r3, r2
 8003294:	d100      	bne.n	8003298 <memset+0xa>
 8003296:	4770      	bx	lr
 8003298:	f803 1b01 	strb.w	r1, [r3], #1
 800329c:	e7f9      	b.n	8003292 <memset+0x4>
	...

080032a0 <_init>:
 80032a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032a2:	bf00      	nop
 80032a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032a6:	bc08      	pop	{r3}
 80032a8:	469e      	mov	lr, r3
 80032aa:	4770      	bx	lr

080032ac <_fini>:
 80032ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ae:	bf00      	nop
 80032b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032b2:	bc08      	pop	{r3}
 80032b4:	469e      	mov	lr, r3
 80032b6:	4770      	bx	lr
