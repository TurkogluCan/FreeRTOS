
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000de8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000f78  08000f78  00010f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000f90  08000f90  00010f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000f94  08000f94  00010f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000034  20000000  08000f98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020034  2**0
                  CONTENTS
  7 .bss          00000124  20000034  20000034  00020034  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000158  20000158  00020034  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 10 .debug_info   00007fc9  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001465  00000000  00000000  0002802d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008f0  00000000  00000000  00029498  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000828  00000000  00000000  00029d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003c11  00000000  00000000  0002a5b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000038d0  00000000  00000000  0002e1c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00031a91  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000248c  00000000  00000000  00031b10  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00033f9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000034 	.word	0x20000034
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08000f60 	.word	0x08000f60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000038 	.word	0x20000038
 80001cc:	08000f60 	.word	0x08000f60

080001d0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80001d0:	4b07      	ldr	r3, [pc, #28]	; (80001f0 <pxCurrentTCBConst2>)
 80001d2:	6819      	ldr	r1, [r3, #0]
 80001d4:	6808      	ldr	r0, [r1, #0]
 80001d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001da:	f380 8809 	msr	PSP, r0
 80001de:	f3bf 8f6f 	isb	sy
 80001e2:	f04f 0000 	mov.w	r0, #0
 80001e6:	f380 8811 	msr	BASEPRI, r0
 80001ea:	4770      	bx	lr
 80001ec:	f3af 8000 	nop.w

080001f0 <pxCurrentTCBConst2>:
 80001f0:	20000050 	.word	0x20000050
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80001f4:	bf00      	nop
 80001f6:	bf00      	nop
	...

08000200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000200:	f3ef 8009 	mrs	r0, PSP
 8000204:	f3bf 8f6f 	isb	sy
 8000208:	4b15      	ldr	r3, [pc, #84]	; (8000260 <pxCurrentTCBConst>)
 800020a:	681a      	ldr	r2, [r3, #0]
 800020c:	f01e 0f10 	tst.w	lr, #16
 8000210:	bf08      	it	eq
 8000212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800021a:	6010      	str	r0, [r2, #0]
 800021c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000220:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000224:	f380 8811 	msr	BASEPRI, r0
 8000228:	f3bf 8f4f 	dsb	sy
 800022c:	f3bf 8f6f 	isb	sy
 8000230:	f000 f950 	bl	80004d4 <vTaskSwitchContext>
 8000234:	f04f 0000 	mov.w	r0, #0
 8000238:	f380 8811 	msr	BASEPRI, r0
 800023c:	bc09      	pop	{r0, r3}
 800023e:	6819      	ldr	r1, [r3, #0]
 8000240:	6808      	ldr	r0, [r1, #0]
 8000242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000246:	f01e 0f10 	tst.w	lr, #16
 800024a:	bf08      	it	eq
 800024c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000250:	f380 8809 	msr	PSP, r0
 8000254:	f3bf 8f6f 	isb	sy
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	f3af 8000 	nop.w

08000260 <pxCurrentTCBConst>:
 8000260:	20000050 	.word	0x20000050
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000264:	bf00      	nop
 8000266:	bf00      	nop

08000268 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800026e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000272:	f383 8811 	msr	BASEPRI, r3
 8000276:	f3bf 8f6f 	isb	sy
 800027a:	f3bf 8f4f 	dsb	sy
 800027e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000280:	f000 f812 	bl	80002a8 <xTaskIncrementTick>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d003      	beq.n	8000292 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800028a:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <SysTick_Handler+0x3c>)
 800028c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	2300      	movs	r3, #0
 8000294:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	e000ed04 	.word	0xe000ed04

080002a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b08a      	sub	sp, #40	; 0x28
 80002ac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80002ae:	2300      	movs	r3, #0
 80002b0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80002b2:	4b7d      	ldr	r3, [pc, #500]	; (80004a8 <xTaskIncrementTick+0x200>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	f040 80eb 	bne.w	8000492 <xTaskIncrementTick+0x1ea>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80002bc:	4b7b      	ldr	r3, [pc, #492]	; (80004ac <xTaskIncrementTick+0x204>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	3301      	adds	r3, #1
 80002c2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80002c4:	4a79      	ldr	r2, [pc, #484]	; (80004ac <xTaskIncrementTick+0x204>)
 80002c6:	6a3b      	ldr	r3, [r7, #32]
 80002c8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80002ca:	6a3b      	ldr	r3, [r7, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d11f      	bne.n	8000310 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80002d0:	4b77      	ldr	r3, [pc, #476]	; (80004b0 <xTaskIncrementTick+0x208>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d009      	beq.n	80002ee <xTaskIncrementTick+0x46>
        __asm volatile
 80002da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002de:	f383 8811 	msr	BASEPRI, r3
 80002e2:	f3bf 8f6f 	isb	sy
 80002e6:	f3bf 8f4f 	dsb	sy
 80002ea:	607b      	str	r3, [r7, #4]
 80002ec:	e7fe      	b.n	80002ec <xTaskIncrementTick+0x44>
 80002ee:	4b70      	ldr	r3, [pc, #448]	; (80004b0 <xTaskIncrementTick+0x208>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	61fb      	str	r3, [r7, #28]
 80002f4:	4b6f      	ldr	r3, [pc, #444]	; (80004b4 <xTaskIncrementTick+0x20c>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a6d      	ldr	r2, [pc, #436]	; (80004b0 <xTaskIncrementTick+0x208>)
 80002fa:	6013      	str	r3, [r2, #0]
 80002fc:	4a6d      	ldr	r2, [pc, #436]	; (80004b4 <xTaskIncrementTick+0x20c>)
 80002fe:	69fb      	ldr	r3, [r7, #28]
 8000300:	6013      	str	r3, [r2, #0]
 8000302:	4b6d      	ldr	r3, [pc, #436]	; (80004b8 <xTaskIncrementTick+0x210>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	3301      	adds	r3, #1
 8000308:	4a6b      	ldr	r2, [pc, #428]	; (80004b8 <xTaskIncrementTick+0x210>)
 800030a:	6013      	str	r3, [r2, #0]
 800030c:	f000 f93c 	bl	8000588 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000310:	4b6a      	ldr	r3, [pc, #424]	; (80004bc <xTaskIncrementTick+0x214>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	6a3a      	ldr	r2, [r7, #32]
 8000316:	429a      	cmp	r2, r3
 8000318:	f0c0 80a6 	bcc.w	8000468 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800031c:	4b64      	ldr	r3, [pc, #400]	; (80004b0 <xTaskIncrementTick+0x208>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d104      	bne.n	8000330 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000326:	4b65      	ldr	r3, [pc, #404]	; (80004bc <xTaskIncrementTick+0x214>)
 8000328:	f04f 32ff 	mov.w	r2, #4294967295
 800032c:	601a      	str	r2, [r3, #0]
                    break;
 800032e:	e09b      	b.n	8000468 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000330:	4b5f      	ldr	r3, [pc, #380]	; (80004b0 <xTaskIncrementTick+0x208>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	68db      	ldr	r3, [r3, #12]
 8000336:	68db      	ldr	r3, [r3, #12]
 8000338:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800033a:	69bb      	ldr	r3, [r7, #24]
 800033c:	685b      	ldr	r3, [r3, #4]
 800033e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8000340:	6a3a      	ldr	r2, [r7, #32]
 8000342:	697b      	ldr	r3, [r7, #20]
 8000344:	429a      	cmp	r2, r3
 8000346:	d203      	bcs.n	8000350 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000348:	4a5c      	ldr	r2, [pc, #368]	; (80004bc <xTaskIncrementTick+0x214>)
 800034a:	697b      	ldr	r3, [r7, #20]
 800034c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800034e:	e08b      	b.n	8000468 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000350:	69bb      	ldr	r3, [r7, #24]
 8000352:	695b      	ldr	r3, [r3, #20]
 8000354:	613b      	str	r3, [r7, #16]
 8000356:	69bb      	ldr	r3, [r7, #24]
 8000358:	689b      	ldr	r3, [r3, #8]
 800035a:	69ba      	ldr	r2, [r7, #24]
 800035c:	68d2      	ldr	r2, [r2, #12]
 800035e:	609a      	str	r2, [r3, #8]
 8000360:	69bb      	ldr	r3, [r7, #24]
 8000362:	68db      	ldr	r3, [r3, #12]
 8000364:	69ba      	ldr	r2, [r7, #24]
 8000366:	6892      	ldr	r2, [r2, #8]
 8000368:	605a      	str	r2, [r3, #4]
 800036a:	693b      	ldr	r3, [r7, #16]
 800036c:	685a      	ldr	r2, [r3, #4]
 800036e:	69bb      	ldr	r3, [r7, #24]
 8000370:	3304      	adds	r3, #4
 8000372:	429a      	cmp	r2, r3
 8000374:	d103      	bne.n	800037e <xTaskIncrementTick+0xd6>
 8000376:	69bb      	ldr	r3, [r7, #24]
 8000378:	68da      	ldr	r2, [r3, #12]
 800037a:	693b      	ldr	r3, [r7, #16]
 800037c:	605a      	str	r2, [r3, #4]
 800037e:	69bb      	ldr	r3, [r7, #24]
 8000380:	2200      	movs	r2, #0
 8000382:	615a      	str	r2, [r3, #20]
 8000384:	693b      	ldr	r3, [r7, #16]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	1e5a      	subs	r2, r3, #1
 800038a:	693b      	ldr	r3, [r7, #16]
 800038c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800038e:	69bb      	ldr	r3, [r7, #24]
 8000390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000392:	2b00      	cmp	r3, #0
 8000394:	d01e      	beq.n	80003d4 <xTaskIncrementTick+0x12c>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000396:	69bb      	ldr	r3, [r7, #24]
 8000398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800039a:	60fb      	str	r3, [r7, #12]
 800039c:	69bb      	ldr	r3, [r7, #24]
 800039e:	69db      	ldr	r3, [r3, #28]
 80003a0:	69ba      	ldr	r2, [r7, #24]
 80003a2:	6a12      	ldr	r2, [r2, #32]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	69bb      	ldr	r3, [r7, #24]
 80003a8:	6a1b      	ldr	r3, [r3, #32]
 80003aa:	69ba      	ldr	r2, [r7, #24]
 80003ac:	69d2      	ldr	r2, [r2, #28]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	685a      	ldr	r2, [r3, #4]
 80003b4:	69bb      	ldr	r3, [r7, #24]
 80003b6:	3318      	adds	r3, #24
 80003b8:	429a      	cmp	r2, r3
 80003ba:	d103      	bne.n	80003c4 <xTaskIncrementTick+0x11c>
 80003bc:	69bb      	ldr	r3, [r7, #24]
 80003be:	6a1a      	ldr	r2, [r3, #32]
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	69bb      	ldr	r3, [r7, #24]
 80003c6:	2200      	movs	r2, #0
 80003c8:	629a      	str	r2, [r3, #40]	; 0x28
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	1e5a      	subs	r2, r3, #1
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80003d4:	69bb      	ldr	r3, [r7, #24]
 80003d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003d8:	2201      	movs	r2, #1
 80003da:	409a      	lsls	r2, r3
 80003dc:	4b38      	ldr	r3, [pc, #224]	; (80004c0 <xTaskIncrementTick+0x218>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4313      	orrs	r3, r2
 80003e2:	4a37      	ldr	r2, [pc, #220]	; (80004c0 <xTaskIncrementTick+0x218>)
 80003e4:	6013      	str	r3, [r2, #0]
 80003e6:	69bb      	ldr	r3, [r7, #24]
 80003e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80003ea:	4936      	ldr	r1, [pc, #216]	; (80004c4 <xTaskIncrementTick+0x21c>)
 80003ec:	4613      	mov	r3, r2
 80003ee:	009b      	lsls	r3, r3, #2
 80003f0:	4413      	add	r3, r2
 80003f2:	009b      	lsls	r3, r3, #2
 80003f4:	440b      	add	r3, r1
 80003f6:	3304      	adds	r3, #4
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	60bb      	str	r3, [r7, #8]
 80003fc:	69bb      	ldr	r3, [r7, #24]
 80003fe:	68ba      	ldr	r2, [r7, #8]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	68bb      	ldr	r3, [r7, #8]
 8000404:	689a      	ldr	r2, [r3, #8]
 8000406:	69bb      	ldr	r3, [r7, #24]
 8000408:	60da      	str	r2, [r3, #12]
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	689b      	ldr	r3, [r3, #8]
 800040e:	69ba      	ldr	r2, [r7, #24]
 8000410:	3204      	adds	r2, #4
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	69bb      	ldr	r3, [r7, #24]
 8000416:	1d1a      	adds	r2, r3, #4
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	609a      	str	r2, [r3, #8]
 800041c:	69bb      	ldr	r3, [r7, #24]
 800041e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000420:	4613      	mov	r3, r2
 8000422:	009b      	lsls	r3, r3, #2
 8000424:	4413      	add	r3, r2
 8000426:	009b      	lsls	r3, r3, #2
 8000428:	4a26      	ldr	r2, [pc, #152]	; (80004c4 <xTaskIncrementTick+0x21c>)
 800042a:	441a      	add	r2, r3
 800042c:	69bb      	ldr	r3, [r7, #24]
 800042e:	615a      	str	r2, [r3, #20]
 8000430:	69bb      	ldr	r3, [r7, #24]
 8000432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000434:	4923      	ldr	r1, [pc, #140]	; (80004c4 <xTaskIncrementTick+0x21c>)
 8000436:	4613      	mov	r3, r2
 8000438:	009b      	lsls	r3, r3, #2
 800043a:	4413      	add	r3, r2
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	440b      	add	r3, r1
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	1c59      	adds	r1, r3, #1
 8000444:	481f      	ldr	r0, [pc, #124]	; (80004c4 <xTaskIncrementTick+0x21c>)
 8000446:	4613      	mov	r3, r2
 8000448:	009b      	lsls	r3, r3, #2
 800044a:	4413      	add	r3, r2
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	4403      	add	r3, r0
 8000450:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000452:	69bb      	ldr	r3, [r7, #24]
 8000454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000456:	4b1c      	ldr	r3, [pc, #112]	; (80004c8 <xTaskIncrementTick+0x220>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800045c:	429a      	cmp	r2, r3
 800045e:	f67f af5d 	bls.w	800031c <xTaskIncrementTick+0x74>
                        {
                            xSwitchRequired = pdTRUE;
 8000462:	2301      	movs	r3, #1
 8000464:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000466:	e759      	b.n	800031c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000468:	4b17      	ldr	r3, [pc, #92]	; (80004c8 <xTaskIncrementTick+0x220>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800046e:	4915      	ldr	r1, [pc, #84]	; (80004c4 <xTaskIncrementTick+0x21c>)
 8000470:	4613      	mov	r3, r2
 8000472:	009b      	lsls	r3, r3, #2
 8000474:	4413      	add	r3, r2
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	440b      	add	r3, r1
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2b01      	cmp	r3, #1
 800047e:	d901      	bls.n	8000484 <xTaskIncrementTick+0x1dc>
            {
                xSwitchRequired = pdTRUE;
 8000480:	2301      	movs	r3, #1
 8000482:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <xTaskIncrementTick+0x224>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d007      	beq.n	800049c <xTaskIncrementTick+0x1f4>
            {
                xSwitchRequired = pdTRUE;
 800048c:	2301      	movs	r3, #1
 800048e:	627b      	str	r3, [r7, #36]	; 0x24
 8000490:	e004      	b.n	800049c <xTaskIncrementTick+0x1f4>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8000492:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <xTaskIncrementTick+0x228>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	3301      	adds	r3, #1
 8000498:	4a0d      	ldr	r2, [pc, #52]	; (80004d0 <xTaskIncrementTick+0x228>)
 800049a:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800049c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800049e:	4618      	mov	r0, r3
 80004a0:	3728      	adds	r7, #40	; 0x28
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	200000d8 	.word	0x200000d8
 80004ac:	200000c0 	.word	0x200000c0
 80004b0:	200000b8 	.word	0x200000b8
 80004b4:	200000bc 	.word	0x200000bc
 80004b8:	200000d0 	.word	0x200000d0
 80004bc:	200000d4 	.word	0x200000d4
 80004c0:	200000c4 	.word	0x200000c4
 80004c4:	20000054 	.word	0x20000054
 80004c8:	20000050 	.word	0x20000050
 80004cc:	200000cc 	.word	0x200000cc
 80004d0:	200000c8 	.word	0x200000c8

080004d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b087      	sub	sp, #28
 80004d8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80004da:	4b26      	ldr	r3, [pc, #152]	; (8000574 <vTaskSwitchContext+0xa0>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d003      	beq.n	80004ea <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80004e2:	4b25      	ldr	r3, [pc, #148]	; (8000578 <vTaskSwitchContext+0xa4>)
 80004e4:	2201      	movs	r2, #1
 80004e6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80004e8:	e03e      	b.n	8000568 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 80004ea:	4b23      	ldr	r3, [pc, #140]	; (8000578 <vTaskSwitchContext+0xa4>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80004f0:	4b22      	ldr	r3, [pc, #136]	; (800057c <vTaskSwitchContext+0xa8>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	fab3 f383 	clz	r3, r3
 80004fc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80004fe:	7afb      	ldrb	r3, [r7, #11]
 8000500:	f1c3 031f 	rsb	r3, r3, #31
 8000504:	617b      	str	r3, [r7, #20]
 8000506:	491e      	ldr	r1, [pc, #120]	; (8000580 <vTaskSwitchContext+0xac>)
 8000508:	697a      	ldr	r2, [r7, #20]
 800050a:	4613      	mov	r3, r2
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	4413      	add	r3, r2
 8000510:	009b      	lsls	r3, r3, #2
 8000512:	440b      	add	r3, r1
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d109      	bne.n	800052e <vTaskSwitchContext+0x5a>
        __asm volatile
 800051a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800051e:	f383 8811 	msr	BASEPRI, r3
 8000522:	f3bf 8f6f 	isb	sy
 8000526:	f3bf 8f4f 	dsb	sy
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	e7fe      	b.n	800052c <vTaskSwitchContext+0x58>
 800052e:	697a      	ldr	r2, [r7, #20]
 8000530:	4613      	mov	r3, r2
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	4413      	add	r3, r2
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	4a11      	ldr	r2, [pc, #68]	; (8000580 <vTaskSwitchContext+0xac>)
 800053a:	4413      	add	r3, r2
 800053c:	613b      	str	r3, [r7, #16]
 800053e:	693b      	ldr	r3, [r7, #16]
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	685a      	ldr	r2, [r3, #4]
 8000544:	693b      	ldr	r3, [r7, #16]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	693b      	ldr	r3, [r7, #16]
 800054a:	685a      	ldr	r2, [r3, #4]
 800054c:	693b      	ldr	r3, [r7, #16]
 800054e:	3308      	adds	r3, #8
 8000550:	429a      	cmp	r2, r3
 8000552:	d104      	bne.n	800055e <vTaskSwitchContext+0x8a>
 8000554:	693b      	ldr	r3, [r7, #16]
 8000556:	685b      	ldr	r3, [r3, #4]
 8000558:	685a      	ldr	r2, [r3, #4]
 800055a:	693b      	ldr	r3, [r7, #16]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	693b      	ldr	r3, [r7, #16]
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	4a07      	ldr	r2, [pc, #28]	; (8000584 <vTaskSwitchContext+0xb0>)
 8000566:	6013      	str	r3, [r2, #0]
}
 8000568:	bf00      	nop
 800056a:	371c      	adds	r7, #28
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	200000d8 	.word	0x200000d8
 8000578:	200000cc 	.word	0x200000cc
 800057c:	200000c4 	.word	0x200000c4
 8000580:	20000054 	.word	0x20000054
 8000584:	20000050 	.word	0x20000050

08000588 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800058c:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <prvResetNextTaskUnblockTime+0x30>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d104      	bne.n	80005a0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000596:	4b09      	ldr	r3, [pc, #36]	; (80005bc <prvResetNextTaskUnblockTime+0x34>)
 8000598:	f04f 32ff 	mov.w	r2, #4294967295
 800059c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800059e:	e005      	b.n	80005ac <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <prvResetNextTaskUnblockTime+0x30>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	68db      	ldr	r3, [r3, #12]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a04      	ldr	r2, [pc, #16]	; (80005bc <prvResetNextTaskUnblockTime+0x34>)
 80005aa:	6013      	str	r3, [r2, #0]
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	200000b8 	.word	0x200000b8
 80005bc:	200000d4 	.word	0x200000d4

080005c0 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	460b      	mov	r3, r1
 80005ca:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <DAC_SetChannel1Data+0x34>)
 80005d2:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4413      	add	r3, r2
 80005da:	3308      	adds	r3, #8
 80005dc:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	461a      	mov	r2, r3
 80005e2:	887b      	ldrh	r3, [r7, #2]
 80005e4:	6013      	str	r3, [r2, #0]
}
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	40007400 	.word	0x40007400

080005f8 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800060c:	68fa      	ldr	r2, [r7, #12]
 800060e:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <DMA_Init+0xac>)
 8000610:	4013      	ands	r3, r2
 8000612:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000622:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800062e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	6a1b      	ldr	r3, [r3, #32]
 8000634:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800063a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000640:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000646:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800064c:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800064e:	68fa      	ldr	r2, [r7, #12]
 8000650:	4313      	orrs	r3, r2
 8000652:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	68fa      	ldr	r2, [r7, #12]
 8000658:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	f023 0307 	bic.w	r3, r3, #7
 8000666:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000670:	4313      	orrs	r3, r2
 8000672:	68fa      	ldr	r2, [r7, #12]
 8000674:	4313      	orrs	r3, r2
 8000676:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	68fa      	ldr	r2, [r7, #12]
 800067c:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	691a      	ldr	r2, [r3, #16]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	685a      	ldr	r2, [r3, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	689a      	ldr	r2, [r3, #8]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	60da      	str	r2, [r3, #12]
}
 8000696:	bf00      	nop
 8000698:	3714      	adds	r7, #20
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	f01c803f 	.word	0xf01c803f

080006a8 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	460b      	mov	r3, r1
 80006b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80006b4:	78fb      	ldrb	r3, [r7, #3]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d006      	beq.n	80006c8 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f043 0201 	orr.w	r2, r3, #1
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80006c6:	e005      	b.n	80006d4 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f023 0201 	bic.w	r2, r3, #1
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	601a      	str	r2, [r3, #0]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f003 0301 	and.w	r3, r3, #1
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d002      	beq.n	80006fe <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 80006f8:	2301      	movs	r3, #1
 80006fa:	73fb      	strb	r3, [r7, #15]
 80006fc:	e001      	b.n	8000702 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 80006fe:	2300      	movs	r3, #0
 8000700:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000702:	7bfb      	ldrb	r3, [r7, #15]
}
 8000704:	4618      	mov	r0, r3
 8000706:	3714      	adds	r7, #20
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000710:	b480      	push	{r7}
 8000712:	b087      	sub	sp, #28
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800071a:	2300      	movs	r3, #0
 800071c:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4a15      	ldr	r2, [pc, #84]	; (800077c <DMA_GetFlagStatus+0x6c>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d802      	bhi.n	8000730 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <DMA_GetFlagStatus+0x70>)
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	e001      	b.n	8000734 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <DMA_GetFlagStatus+0x74>)
 8000732:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800073a:	2b00      	cmp	r3, #0
 800073c:	d003      	beq.n	8000746 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	e002      	b.n	800074c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000752:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000756:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000758:	68fa      	ldr	r2, [r7, #12]
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	4013      	ands	r3, r2
 800075e:	2b00      	cmp	r3, #0
 8000760:	d002      	beq.n	8000768 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000762:	2301      	movs	r3, #1
 8000764:	75fb      	strb	r3, [r7, #23]
 8000766:	e001      	b.n	800076c <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000768:	2300      	movs	r3, #0
 800076a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800076c:	7dfb      	ldrb	r3, [r7, #23]
}
 800076e:	4618      	mov	r0, r3
 8000770:	371c      	adds	r7, #28
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	4002640f 	.word	0x4002640f
 8000780:	40026000 	.word	0x40026000
 8000784:	40026400 	.word	0x40026400

08000788 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4a10      	ldr	r2, [pc, #64]	; (80007d8 <DMA_ClearFlag+0x50>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d802      	bhi.n	80007a0 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <DMA_ClearFlag+0x54>)
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	e001      	b.n	80007a4 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <DMA_ClearFlag+0x58>)
 80007a2:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d007      	beq.n	80007be <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80007b4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80007b8:	68fa      	ldr	r2, [r7, #12]
 80007ba:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80007bc:	e006      	b.n	80007cc <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80007c4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80007c8:	68fa      	ldr	r2, [r7, #12]
 80007ca:	6093      	str	r3, [r2, #8]
}
 80007cc:	bf00      	nop
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	4002640f 	.word	0x4002640f
 80007dc:	40026000 	.word	0x40026000
 80007e0:	40026400 	.word	0x40026400

080007e4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b087      	sub	sp, #28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
 80007fe:	e076      	b.n	80008ee <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000800:	2201      	movs	r2, #1
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	4013      	ands	r3, r2
 8000812:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000814:	68fa      	ldr	r2, [r7, #12]
 8000816:	693b      	ldr	r3, [r7, #16]
 8000818:	429a      	cmp	r2, r3
 800081a:	d165      	bne.n	80008e8 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	2103      	movs	r1, #3
 8000826:	fa01 f303 	lsl.w	r3, r1, r3
 800082a:	43db      	mvns	r3, r3
 800082c:	401a      	ands	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	791b      	ldrb	r3, [r3, #4]
 800083a:	4619      	mov	r1, r3
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	fa01 f303 	lsl.w	r3, r1, r3
 8000844:	431a      	orrs	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	791b      	ldrb	r3, [r3, #4]
 800084e:	2b01      	cmp	r3, #1
 8000850:	d003      	beq.n	800085a <GPIO_Init+0x76>
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	791b      	ldrb	r3, [r3, #4]
 8000856:	2b02      	cmp	r3, #2
 8000858:	d12e      	bne.n	80008b8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	689a      	ldr	r2, [r3, #8]
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	2103      	movs	r1, #3
 8000864:	fa01 f303 	lsl.w	r3, r1, r3
 8000868:	43db      	mvns	r3, r3
 800086a:	401a      	ands	r2, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	689a      	ldr	r2, [r3, #8]
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	795b      	ldrb	r3, [r3, #5]
 8000878:	4619      	mov	r1, r3
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	fa01 f303 	lsl.w	r3, r1, r3
 8000882:	431a      	orrs	r2, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	685a      	ldr	r2, [r3, #4]
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	b29b      	uxth	r3, r3
 8000890:	4619      	mov	r1, r3
 8000892:	2301      	movs	r3, #1
 8000894:	408b      	lsls	r3, r1
 8000896:	43db      	mvns	r3, r3
 8000898:	401a      	ands	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	683a      	ldr	r2, [r7, #0]
 80008a4:	7992      	ldrb	r2, [r2, #6]
 80008a6:	4611      	mov	r1, r2
 80008a8:	697a      	ldr	r2, [r7, #20]
 80008aa:	b292      	uxth	r2, r2
 80008ac:	fa01 f202 	lsl.w	r2, r1, r2
 80008b0:	b292      	uxth	r2, r2
 80008b2:	431a      	orrs	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	68da      	ldr	r2, [r3, #12]
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	b29b      	uxth	r3, r3
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	2103      	movs	r1, #3
 80008c4:	fa01 f303 	lsl.w	r3, r1, r3
 80008c8:	43db      	mvns	r3, r3
 80008ca:	401a      	ands	r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	68da      	ldr	r2, [r3, #12]
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	79db      	ldrb	r3, [r3, #7]
 80008d8:	4619      	mov	r1, r3
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	fa01 f303 	lsl.w	r3, r1, r3
 80008e2:	431a      	orrs	r2, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	3301      	adds	r3, #1
 80008ec:	617b      	str	r3, [r7, #20]
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	2b0f      	cmp	r3, #15
 80008f2:	d985      	bls.n	8000800 <GPIO_Init+0x1c>
    }
  }
}
 80008f4:	bf00      	nop
 80008f6:	371c      	adds	r7, #28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000904:	4a12      	ldr	r2, [pc, #72]	; (8000950 <RCC_DeInit+0x50>)
 8000906:	4b12      	ldr	r3, [pc, #72]	; (8000950 <RCC_DeInit+0x50>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f043 0301 	orr.w	r3, r3, #1
 800090e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <RCC_DeInit+0x50>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 8000916:	4a0e      	ldr	r2, [pc, #56]	; (8000950 <RCC_DeInit+0x50>)
 8000918:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <RCC_DeInit+0x50>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 8000920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000924:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000926:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <RCC_DeInit+0x50>)
 8000928:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <RCC_DeInit+0x54>)
 800092a:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <RCC_DeInit+0x50>)
 800092e:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <RCC_DeInit+0x58>)
 8000930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000934:	4a06      	ldr	r2, [pc, #24]	; (8000950 <RCC_DeInit+0x50>)
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <RCC_DeInit+0x50>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800093e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <RCC_DeInit+0x50>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	40023800 	.word	0x40023800
 8000954:	24003010 	.word	0x24003010
 8000958:	20003000 	.word	0x20003000

0800095c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	460b      	mov	r3, r1
 8000966:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000968:	78fb      	ldrb	r3, [r7, #3]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d006      	beq.n	800097c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800096e:	490a      	ldr	r1, [pc, #40]	; (8000998 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000972:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4313      	orrs	r3, r2
 8000978:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800097a:	e006      	b.n	800098a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800097c:	4906      	ldr	r1, [pc, #24]	; (8000998 <RCC_AHB1PeriphClockCmd+0x3c>)
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	43db      	mvns	r3, r3
 8000986:	4013      	ands	r3, r2
 8000988:	630b      	str	r3, [r1, #48]	; 0x30
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	887a      	ldrh	r2, [r7, #2]
 80009ac:	819a      	strh	r2, [r3, #12]
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80009ba:	b480      	push	{r7}
 80009bc:	b085      	sub	sp, #20
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
 80009c2:	460b      	mov	r3, r1
 80009c4:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80009c6:	2300      	movs	r3, #0
 80009c8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	891b      	ldrh	r3, [r3, #8]
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	887b      	ldrh	r3, [r7, #2]
 80009d2:	4013      	ands	r3, r2
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d002      	beq.n	80009e0 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80009da:	2301      	movs	r3, #1
 80009dc:	73fb      	strb	r3, [r7, #15]
 80009de:	e001      	b.n	80009e4 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80009e0:	2300      	movs	r3, #0
 80009e2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
	...

080009f4 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	4a10      	ldr	r2, [pc, #64]	; (8000a44 <STM_EVAL_LEDInit+0x50>)
 8000a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a06:	2101      	movs	r1, #1
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ffa7 	bl	800095c <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	4a0d      	ldr	r2, [pc, #52]	; (8000a48 <STM_EVAL_LEDInit+0x54>)
 8000a12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000a24:	2302      	movs	r3, #2
 8000a26:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	4a08      	ldr	r2, [pc, #32]	; (8000a4c <STM_EVAL_LEDInit+0x58>)
 8000a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a30:	f107 0208 	add.w	r2, r7, #8
 8000a34:	4611      	mov	r1, r2
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fed4 	bl	80007e4 <GPIO_Init>
}
 8000a3c:	bf00      	nop
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	08000f80 	.word	0x08000f80
 8000a48:	08000f78 	.word	0x08000f78
 8000a4c:	20000000 	.word	0x20000000

08000a50 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	4a06      	ldr	r2, [pc, #24]	; (8000a78 <STM_EVAL_LEDOn+0x28>)
 8000a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a62:	79fa      	ldrb	r2, [r7, #7]
 8000a64:	4905      	ldr	r1, [pc, #20]	; (8000a7c <STM_EVAL_LEDOn+0x2c>)
 8000a66:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000a6a:	831a      	strh	r2, [r3, #24]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	08000f78 	.word	0x08000f78

08000a80 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000a84:	4b38      	ldr	r3, [pc, #224]	; (8000b68 <Audio_MAL_IRQHandler+0xe8>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b38      	ldr	r3, [pc, #224]	; (8000b6c <Audio_MAL_IRQHandler+0xec>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4610      	mov	r0, r2
 8000a90:	f7ff fe3e 	bl	8000710 <DMA_GetFlagStatus>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d064      	beq.n	8000b64 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8000a9a:	4b35      	ldr	r3, [pc, #212]	; (8000b70 <Audio_MAL_IRQHandler+0xf0>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d04c      	beq.n	8000b3c <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8000aa2:	bf00      	nop
 8000aa4:	4b30      	ldr	r3, [pc, #192]	; (8000b68 <Audio_MAL_IRQHandler+0xe8>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fe19 	bl	80006e0 <DMA_GetCmdStatus>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d1f7      	bne.n	8000aa4 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000ab4:	4b2c      	ldr	r3, [pc, #176]	; (8000b68 <Audio_MAL_IRQHandler+0xe8>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b2c      	ldr	r3, [pc, #176]	; (8000b6c <Audio_MAL_IRQHandler+0xec>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4619      	mov	r1, r3
 8000abe:	4610      	mov	r0, r2
 8000ac0:	f7ff fe62 	bl	8000788 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000ac4:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <Audio_MAL_IRQHandler+0xf4>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <Audio_MAL_IRQHandler+0xf8>)
 8000acc:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000ace:	4b28      	ldr	r3, [pc, #160]	; (8000b70 <Audio_MAL_IRQHandler+0xf0>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	bf28      	it	cs
 8000ada:	4613      	movcs	r3, r2
 8000adc:	4a26      	ldr	r2, [pc, #152]	; (8000b78 <Audio_MAL_IRQHandler+0xf8>)
 8000ade:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000ae0:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <Audio_MAL_IRQHandler+0xe8>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4924      	ldr	r1, [pc, #144]	; (8000b78 <Audio_MAL_IRQHandler+0xf8>)
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff fd86 	bl	80005f8 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000aec:	4b1e      	ldr	r3, [pc, #120]	; (8000b68 <Audio_MAL_IRQHandler+0xe8>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2101      	movs	r1, #1
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fdd8 	bl	80006a8 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000af8:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <Audio_MAL_IRQHandler+0xf4>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <Audio_MAL_IRQHandler+0xf0>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b04:	d203      	bcs.n	8000b0e <Audio_MAL_IRQHandler+0x8e>
 8000b06:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <Audio_MAL_IRQHandler+0xf0>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	e000      	b.n	8000b10 <Audio_MAL_IRQHandler+0x90>
 8000b0e:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <Audio_MAL_IRQHandler+0xfc>)
 8000b10:	4413      	add	r3, r2
 8000b12:	4a18      	ldr	r2, [pc, #96]	; (8000b74 <Audio_MAL_IRQHandler+0xf4>)
 8000b14:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8000b16:	4b16      	ldr	r3, [pc, #88]	; (8000b70 <Audio_MAL_IRQHandler+0xf0>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <Audio_MAL_IRQHandler+0xf0>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b22:	428b      	cmp	r3, r1
 8000b24:	bf28      	it	cs
 8000b26:	460b      	movcs	r3, r1
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	4a11      	ldr	r2, [pc, #68]	; (8000b70 <Audio_MAL_IRQHandler+0xf0>)
 8000b2c:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <Audio_MAL_IRQHandler+0xe8>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2101      	movs	r1, #1
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fdb7 	bl	80006a8 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000b3a:	e013      	b.n	8000b64 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <Audio_MAL_IRQHandler+0xe8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fdb0 	bl	80006a8 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8000b48:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <Audio_MAL_IRQHandler+0xe8>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <Audio_MAL_IRQHandler+0xec>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4619      	mov	r1, r3
 8000b52:	4610      	mov	r0, r2
 8000b54:	f7ff fe18 	bl	8000788 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <Audio_MAL_IRQHandler+0xf4>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 f85b 	bl	8000c1a <EVAL_AUDIO_TransferComplete_CallBack>
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000018 	.word	0x20000018
 8000b6c:	2000001c 	.word	0x2000001c
 8000b70:	20000010 	.word	0x20000010
 8000b74:	200000dc 	.word	0x200000dc
 8000b78:	2000011c 	.word	0x2000011c
 8000b7c:	0001fffe 	.word	0x0001fffe

08000b80 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000b84:	f7ff ff7c 	bl	8000a80 <Audio_MAL_IRQHandler>
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000b90:	f7ff ff76 	bl	8000a80 <Audio_MAL_IRQHandler>
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <SPI3_IRQHandler+0x3c>)
 8000ba0:	f7ff ff0b 	bl	80009ba <SPI_I2S_GetFlagStatus>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d011      	beq.n	8000bce <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <SPI3_IRQHandler+0x40>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d106      	bne.n	8000bc0 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8000bb2:	f000 f83d 	bl	8000c30 <EVAL_AUDIO_GetSampleCallBack>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	4619      	mov	r1, r3
 8000bba:	2004      	movs	r0, #4
 8000bbc:	f7ff fd00 	bl	80005c0 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8000bc0:	f000 f836 	bl	8000c30 <EVAL_AUDIO_GetSampleCallBack>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <SPI3_IRQHandler+0x3c>)
 8000bca:	f7ff fee7 	bl	800099c <SPI_I2S_SendData>
  }
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40003c00 	.word	0x40003c00
 8000bd8:	20000014 	.word	0x20000014

08000bdc <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0


	// INIT

	RCC_DeInit();
 8000be0:	f7ff fe8e 	bl	8000900 <RCC_DeInit>
	SystemCoreClockUpdate();
 8000be4:	f000 f8a0 	bl	8000d28 <SystemCoreClockUpdate>




  /* Initialize LEDs */
  STM_EVAL_LEDInit(LED3);
 8000be8:	2001      	movs	r0, #1
 8000bea:	f7ff ff03 	bl	80009f4 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED4);
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f7ff ff00 	bl	80009f4 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED5);
 8000bf4:	2002      	movs	r0, #2
 8000bf6:	f7ff fefd 	bl	80009f4 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED6);
 8000bfa:	2003      	movs	r0, #3
 8000bfc:	f7ff fefa 	bl	80009f4 <STM_EVAL_LEDInit>

  /* Turn on LEDs */
  STM_EVAL_LEDOn(LED3);
 8000c00:	2001      	movs	r0, #1
 8000c02:	f7ff ff25 	bl	8000a50 <STM_EVAL_LEDOn>
  STM_EVAL_LEDOn(LED4);
 8000c06:	2000      	movs	r0, #0
 8000c08:	f7ff ff22 	bl	8000a50 <STM_EVAL_LEDOn>
  STM_EVAL_LEDOn(LED5);
 8000c0c:	2002      	movs	r0, #2
 8000c0e:	f7ff ff1f 	bl	8000a50 <STM_EVAL_LEDOn>
  STM_EVAL_LEDOn(LED6);
 8000c12:	2003      	movs	r0, #3
 8000c14:	f7ff ff1c 	bl	8000a50 <STM_EVAL_LEDOn>




  /* Infinite loop */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <main+0x3c>

08000c1a <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8000c1a:	b480      	push	{r7}
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
 8000c22:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8000c24:	bf00      	nop
}
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8000c34:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
	...

08000c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c4a:	e003      	b.n	8000c54 <LoopCopyDataInit>

08000c4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c52:	3104      	adds	r1, #4

08000c54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c54:	480b      	ldr	r0, [pc, #44]	; (8000c84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c5c:	d3f6      	bcc.n	8000c4c <CopyDataInit>
  ldr  r2, =_sbss
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c60:	e002      	b.n	8000c68 <LoopFillZerobss>

08000c62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c64:	f842 3b04 	str.w	r3, [r2], #4

08000c68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c68:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c6c:	d3f9      	bcc.n	8000c62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c6e:	f000 f825 	bl	8000cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c72:	f000 f951 	bl	8000f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c76:	f7ff ffb1 	bl	8000bdc <main>
  bx  lr    
 8000c7a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c7c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c80:	08000f98 	.word	0x08000f98
  ldr  r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c88:	20000034 	.word	0x20000034
  ldr  r2, =_sbss
 8000c8c:	20000034 	.word	0x20000034
  ldr  r3, = _ebss
 8000c90:	20000158 	.word	0x20000158

08000c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC_IRQHandler>

08000c96 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <UsageFault_Handler+0x4>

08000cae <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc0:	4a16      	ldr	r2, [pc, #88]	; (8000d1c <SystemInit+0x60>)
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <SystemInit+0x60>)
 8000cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000cd0:	4a13      	ldr	r2, [pc, #76]	; (8000d20 <SystemInit+0x64>)
 8000cd2:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <SystemInit+0x64>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000cdc:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <SystemInit+0x64>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000ce2:	4a0f      	ldr	r2, [pc, #60]	; (8000d20 <SystemInit+0x64>)
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <SystemInit+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cf0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <SystemInit+0x64>)
 8000cf4:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <SystemInit+0x68>)
 8000cf6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000cf8:	4a09      	ldr	r2, [pc, #36]	; (8000d20 <SystemInit+0x64>)
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <SystemInit+0x64>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <SystemInit+0x64>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000d0a:	f000 f889 	bl	8000e20 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d0e:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <SystemInit+0x60>)
 8000d10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d14:	609a      	str	r2, [r3, #8]
#endif
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00
 8000d20:	40023800 	.word	0x40023800
 8000d24:	24003010 	.word	0x24003010

08000d28 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b087      	sub	sp, #28
 8000d2c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	2302      	movs	r3, #2
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	2302      	movs	r3, #2
 8000d40:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000d42:	4b32      	ldr	r3, [pc, #200]	; (8000e0c <SystemCoreClockUpdate+0xe4>)
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	f003 030c 	and.w	r3, r3, #12
 8000d4a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	d007      	beq.n	8000d62 <SystemCoreClockUpdate+0x3a>
 8000d52:	2b08      	cmp	r3, #8
 8000d54:	d009      	beq.n	8000d6a <SystemCoreClockUpdate+0x42>
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d13d      	bne.n	8000dd6 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000d5a:	4b2d      	ldr	r3, [pc, #180]	; (8000e10 <SystemCoreClockUpdate+0xe8>)
 8000d5c:	4a2d      	ldr	r2, [pc, #180]	; (8000e14 <SystemCoreClockUpdate+0xec>)
 8000d5e:	601a      	str	r2, [r3, #0]
      break;
 8000d60:	e03d      	b.n	8000dde <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000d62:	4b2b      	ldr	r3, [pc, #172]	; (8000e10 <SystemCoreClockUpdate+0xe8>)
 8000d64:	4a2c      	ldr	r2, [pc, #176]	; (8000e18 <SystemCoreClockUpdate+0xf0>)
 8000d66:	601a      	str	r2, [r3, #0]
      break;
 8000d68:	e039      	b.n	8000dde <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000d6a:	4b28      	ldr	r3, [pc, #160]	; (8000e0c <SystemCoreClockUpdate+0xe4>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	0d9b      	lsrs	r3, r3, #22
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d76:	4b25      	ldr	r3, [pc, #148]	; (8000e0c <SystemCoreClockUpdate+0xe4>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d7e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d00c      	beq.n	8000da0 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000d86:	4a24      	ldr	r2, [pc, #144]	; (8000e18 <SystemCoreClockUpdate+0xf0>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8e:	4a1f      	ldr	r2, [pc, #124]	; (8000e0c <SystemCoreClockUpdate+0xe4>)
 8000d90:	6852      	ldr	r2, [r2, #4]
 8000d92:	0992      	lsrs	r2, r2, #6
 8000d94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000d98:	fb02 f303 	mul.w	r3, r2, r3
 8000d9c:	617b      	str	r3, [r7, #20]
 8000d9e:	e00b      	b.n	8000db8 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000da0:	4a1c      	ldr	r2, [pc, #112]	; (8000e14 <SystemCoreClockUpdate+0xec>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da8:	4a18      	ldr	r2, [pc, #96]	; (8000e0c <SystemCoreClockUpdate+0xe4>)
 8000daa:	6852      	ldr	r2, [r2, #4]
 8000dac:	0992      	lsrs	r2, r2, #6
 8000dae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000db2:	fb02 f303 	mul.w	r3, r2, r3
 8000db6:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000db8:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <SystemCoreClockUpdate+0xe4>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	0c1b      	lsrs	r3, r3, #16
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000dc8:	697a      	ldr	r2, [r7, #20]
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd0:	4a0f      	ldr	r2, [pc, #60]	; (8000e10 <SystemCoreClockUpdate+0xe8>)
 8000dd2:	6013      	str	r3, [r2, #0]
      break;
 8000dd4:	e003      	b.n	8000dde <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <SystemCoreClockUpdate+0xe8>)
 8000dd8:	4a0e      	ldr	r2, [pc, #56]	; (8000e14 <SystemCoreClockUpdate+0xec>)
 8000dda:	601a      	str	r2, [r3, #0]
      break;
 8000ddc:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <SystemCoreClockUpdate+0xe4>)
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	091b      	lsrs	r3, r3, #4
 8000de4:	f003 030f 	and.w	r3, r3, #15
 8000de8:	4a0c      	ldr	r2, [pc, #48]	; (8000e1c <SystemCoreClockUpdate+0xf4>)
 8000dea:	5cd3      	ldrb	r3, [r2, r3]
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000df0:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <SystemCoreClockUpdate+0xe8>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	fa22 f303 	lsr.w	r3, r2, r3
 8000dfa:	4a05      	ldr	r2, [pc, #20]	; (8000e10 <SystemCoreClockUpdate+0xe8>)
 8000dfc:	6013      	str	r3, [r2, #0]
}
 8000dfe:	bf00      	nop
 8000e00:	371c      	adds	r7, #28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	20000020 	.word	0x20000020
 8000e14:	00f42400 	.word	0x00f42400
 8000e18:	007a1200 	.word	0x007a1200
 8000e1c:	20000024 	.word	0x20000024

08000e20 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000e2e:	4a36      	ldr	r2, [pc, #216]	; (8000f08 <SetSysClock+0xe8>)
 8000e30:	4b35      	ldr	r3, [pc, #212]	; (8000f08 <SetSysClock+0xe8>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e38:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000e3a:	4b33      	ldr	r3, [pc, #204]	; (8000f08 <SetSysClock+0xe8>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e42:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3301      	adds	r3, #1
 8000e48:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d103      	bne.n	8000e58 <SetSysClock+0x38>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000e56:	d1f0      	bne.n	8000e3a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000e58:	4b2b      	ldr	r3, [pc, #172]	; (8000f08 <SetSysClock+0xe8>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d002      	beq.n	8000e6a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000e64:	2301      	movs	r3, #1
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	e001      	b.n	8000e6e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d142      	bne.n	8000efa <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000e74:	4a24      	ldr	r2, [pc, #144]	; (8000f08 <SetSysClock+0xe8>)
 8000e76:	4b24      	ldr	r3, [pc, #144]	; (8000f08 <SetSysClock+0xe8>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000e80:	4a22      	ldr	r2, [pc, #136]	; (8000f0c <SetSysClock+0xec>)
 8000e82:	4b22      	ldr	r3, [pc, #136]	; (8000f0c <SetSysClock+0xec>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e8a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000e8c:	4a1e      	ldr	r2, [pc, #120]	; (8000f08 <SetSysClock+0xe8>)
 8000e8e:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <SetSysClock+0xe8>)
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000e94:	4a1c      	ldr	r2, [pc, #112]	; (8000f08 <SetSysClock+0xe8>)
 8000e96:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <SetSysClock+0xe8>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e9e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000ea0:	4a19      	ldr	r2, [pc, #100]	; (8000f08 <SetSysClock+0xe8>)
 8000ea2:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <SetSysClock+0xe8>)
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000eaa:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000eac:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <SetSysClock+0xe8>)
 8000eae:	4a18      	ldr	r2, [pc, #96]	; (8000f10 <SetSysClock+0xf0>)
 8000eb0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000eb2:	4a15      	ldr	r2, [pc, #84]	; (8000f08 <SetSysClock+0xe8>)
 8000eb4:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <SetSysClock+0xe8>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ebc:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000ebe:	bf00      	nop
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <SetSysClock+0xe8>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d0f9      	beq.n	8000ec0 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <SetSysClock+0xf4>)
 8000ece:	f240 6205 	movw	r2, #1541	; 0x605
 8000ed2:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000ed4:	4a0c      	ldr	r2, [pc, #48]	; (8000f08 <SetSysClock+0xe8>)
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <SetSysClock+0xe8>)
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f023 0303 	bic.w	r3, r3, #3
 8000ede:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000ee0:	4a09      	ldr	r2, [pc, #36]	; (8000f08 <SetSysClock+0xe8>)
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <SetSysClock+0xe8>)
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	f043 0302 	orr.w	r3, r3, #2
 8000eea:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000eec:	bf00      	nop
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <SetSysClock+0xe8>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	f003 030c 	and.w	r3, r3, #12
 8000ef6:	2b08      	cmp	r3, #8
 8000ef8:	d1f9      	bne.n	8000eee <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40007000 	.word	0x40007000
 8000f10:	07405408 	.word	0x07405408
 8000f14:	40023c00 	.word	0x40023c00

08000f18 <__libc_init_array>:
 8000f18:	b570      	push	{r4, r5, r6, lr}
 8000f1a:	4e0d      	ldr	r6, [pc, #52]	; (8000f50 <__libc_init_array+0x38>)
 8000f1c:	4c0d      	ldr	r4, [pc, #52]	; (8000f54 <__libc_init_array+0x3c>)
 8000f1e:	1ba4      	subs	r4, r4, r6
 8000f20:	10a4      	asrs	r4, r4, #2
 8000f22:	2500      	movs	r5, #0
 8000f24:	42a5      	cmp	r5, r4
 8000f26:	d109      	bne.n	8000f3c <__libc_init_array+0x24>
 8000f28:	4e0b      	ldr	r6, [pc, #44]	; (8000f58 <__libc_init_array+0x40>)
 8000f2a:	4c0c      	ldr	r4, [pc, #48]	; (8000f5c <__libc_init_array+0x44>)
 8000f2c:	f000 f818 	bl	8000f60 <_init>
 8000f30:	1ba4      	subs	r4, r4, r6
 8000f32:	10a4      	asrs	r4, r4, #2
 8000f34:	2500      	movs	r5, #0
 8000f36:	42a5      	cmp	r5, r4
 8000f38:	d105      	bne.n	8000f46 <__libc_init_array+0x2e>
 8000f3a:	bd70      	pop	{r4, r5, r6, pc}
 8000f3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f40:	4798      	blx	r3
 8000f42:	3501      	adds	r5, #1
 8000f44:	e7ee      	b.n	8000f24 <__libc_init_array+0xc>
 8000f46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f4a:	4798      	blx	r3
 8000f4c:	3501      	adds	r5, #1
 8000f4e:	e7f2      	b.n	8000f36 <__libc_init_array+0x1e>
 8000f50:	08000f90 	.word	0x08000f90
 8000f54:	08000f90 	.word	0x08000f90
 8000f58:	08000f90 	.word	0x08000f90
 8000f5c:	08000f94 	.word	0x08000f94

08000f60 <_init>:
 8000f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f62:	bf00      	nop
 8000f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f66:	bc08      	pop	{r3}
 8000f68:	469e      	mov	lr, r3
 8000f6a:	4770      	bx	lr

08000f6c <_fini>:
 8000f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f6e:	bf00      	nop
 8000f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f72:	bc08      	pop	{r3}
 8000f74:	469e      	mov	lr, r3
 8000f76:	4770      	bx	lr
