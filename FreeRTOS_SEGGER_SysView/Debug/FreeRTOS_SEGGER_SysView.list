
FreeRTOS_SEGGER_SysView.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bf8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08004d88  08004d88  00014d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004eac  08004eac  00014eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004eb0  08004eb0  00014eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000038  20000000  08004eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020038  2**0
                  CONTENTS
  7 .bss          000154c4  20000038  20000038  00020038  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200154fc  200154fc  00020038  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013dbd  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002b32  00000000  00000000  00033e25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ff8  00000000  00000000  00036958  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ea0  00000000  00000000  00037950  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007cd7  00000000  00000000  000387f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005aab  00000000  00000000  000404c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00045f72  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000434c  00000000  00000000  00045ff0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000038 	.word	0x20000038
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d70 	.word	0x08004d70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000003c 	.word	0x2000003c
 80001cc:	08004d70 	.word	0x08004d70

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f103 0208 	add.w	r2, r3, #8
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f04f 32ff 	mov.w	r2, #4294967295
 80001f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f103 0208 	add.w	r2, r3, #8
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f103 0208 	add.w	r2, r3, #8
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr

08000220 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2200      	movs	r2, #0
 800022c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr

0800023a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800023a:	b480      	push	{r7}
 800023c:	b085      	sub	sp, #20
 800023e:	af00      	add	r7, sp, #0
 8000240:	6078      	str	r0, [r7, #4]
 8000242:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	68fa      	ldr	r2, [r7, #12]
 800024e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	689a      	ldr	r2, [r3, #8]
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	689b      	ldr	r3, [r3, #8]
 800025c:	683a      	ldr	r2, [r7, #0]
 800025e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	683a      	ldr	r2, [r7, #0]
 8000264:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	1c5a      	adds	r2, r3, #1
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	601a      	str	r2, [r3, #0]
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr

08000282 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000282:	b480      	push	{r7}
 8000284:	b085      	sub	sp, #20
 8000286:	af00      	add	r7, sp, #0
 8000288:	6078      	str	r0, [r7, #4]
 800028a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000298:	d103      	bne.n	80002a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	691b      	ldr	r3, [r3, #16]
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	e00c      	b.n	80002bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	3308      	adds	r3, #8
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	e002      	b.n	80002b0 <vListInsert+0x2e>
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	60fb      	str	r3, [r7, #12]
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	681a      	ldr	r2, [r3, #0]
 80002b6:	68bb      	ldr	r3, [r7, #8]
 80002b8:	429a      	cmp	r2, r3
 80002ba:	d9f6      	bls.n	80002aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	685a      	ldr	r2, [r3, #4]
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	683a      	ldr	r2, [r7, #0]
 80002ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	68fa      	ldr	r2, [r7, #12]
 80002d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	683a      	ldr	r2, [r7, #0]
 80002d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	687a      	ldr	r2, [r7, #4]
 80002dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	1c5a      	adds	r2, r3, #1
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	601a      	str	r2, [r3, #0]
}
 80002e8:	bf00      	nop
 80002ea:	3714      	adds	r7, #20
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr

080002f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	691b      	ldr	r3, [r3, #16]
 8000300:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	685b      	ldr	r3, [r3, #4]
 8000306:	687a      	ldr	r2, [r7, #4]
 8000308:	6892      	ldr	r2, [r2, #8]
 800030a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	6852      	ldr	r2, [r2, #4]
 8000314:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	685a      	ldr	r2, [r3, #4]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	429a      	cmp	r2, r3
 800031e:	d103      	bne.n	8000328 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	689a      	ldr	r2, [r3, #8]
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	1e5a      	subs	r2, r3, #1
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	681b      	ldr	r3, [r3, #0]
}
 800033c:	4618      	mov	r0, r3
 800033e:	3714      	adds	r7, #20
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr

08000348 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
 800034e:	60f8      	str	r0, [r7, #12]
 8000350:	60b9      	str	r1, [r7, #8]
 8000352:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	3b04      	subs	r3, #4
 8000358:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	3b04      	subs	r3, #4
 8000366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	f023 0201 	bic.w	r2, r3, #1
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	3b04      	subs	r3, #4
 8000376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000378:	4a0c      	ldr	r2, [pc, #48]	; (80003ac <pxPortInitialiseStack+0x64>)
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	3b14      	subs	r3, #20
 8000382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000384:	687a      	ldr	r2, [r7, #4]
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	3b04      	subs	r3, #4
 800038e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	f06f 0202 	mvn.w	r2, #2
 8000396:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	3b20      	subs	r3, #32
 800039c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800039e:	68fb      	ldr	r3, [r7, #12]
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	3714      	adds	r7, #20
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr
 80003ac:	080003b1 	.word	0x080003b1

080003b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80003b6:	2300      	movs	r3, #0
 80003b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <prvTaskExitError+0x50>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003c2:	d009      	beq.n	80003d8 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80003c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003c8:	f383 8811 	msr	BASEPRI, r3
 80003cc:	f3bf 8f6f 	isb	sy
 80003d0:	f3bf 8f4f 	dsb	sy
 80003d4:	60fb      	str	r3, [r7, #12]
 80003d6:	e7fe      	b.n	80003d6 <prvTaskExitError+0x26>
 80003d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003dc:	f383 8811 	msr	BASEPRI, r3
 80003e0:	f3bf 8f6f 	isb	sy
 80003e4:	f3bf 8f4f 	dsb	sy
 80003e8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80003ea:	bf00      	nop
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d0fc      	beq.n	80003ec <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80003f2:	bf00      	nop
 80003f4:	3714      	adds	r7, #20
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	20000000 	.word	0x20000000
	...

08000410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000410:	4b07      	ldr	r3, [pc, #28]	; (8000430 <pxCurrentTCBConst2>)
 8000412:	6819      	ldr	r1, [r3, #0]
 8000414:	6808      	ldr	r0, [r1, #0]
 8000416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800041a:	f380 8809 	msr	PSP, r0
 800041e:	f3bf 8f6f 	isb	sy
 8000422:	f04f 0000 	mov.w	r0, #0
 8000426:	f380 8811 	msr	BASEPRI, r0
 800042a:	4770      	bx	lr
 800042c:	f3af 8000 	nop.w

08000430 <pxCurrentTCBConst2>:
 8000430:	20012c7c 	.word	0x20012c7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000434:	bf00      	nop
 8000436:	bf00      	nop

08000438 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8000438:	4808      	ldr	r0, [pc, #32]	; (800045c <prvPortStartFirstTask+0x24>)
 800043a:	6800      	ldr	r0, [r0, #0]
 800043c:	6800      	ldr	r0, [r0, #0]
 800043e:	f380 8808 	msr	MSP, r0
 8000442:	f04f 0000 	mov.w	r0, #0
 8000446:	f380 8814 	msr	CONTROL, r0
 800044a:	b662      	cpsie	i
 800044c:	b661      	cpsie	f
 800044e:	f3bf 8f4f 	dsb	sy
 8000452:	f3bf 8f6f 	isb	sy
 8000456:	df00      	svc	0
 8000458:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800045a:	bf00      	nop
 800045c:	e000ed08 	.word	0xe000ed08

08000460 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b086      	sub	sp, #24
 8000464:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000466:	4b44      	ldr	r3, [pc, #272]	; (8000578 <xPortStartScheduler+0x118>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a44      	ldr	r2, [pc, #272]	; (800057c <xPortStartScheduler+0x11c>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d109      	bne.n	8000484 <xPortStartScheduler+0x24>
 8000470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000474:	f383 8811 	msr	BASEPRI, r3
 8000478:	f3bf 8f6f 	isb	sy
 800047c:	f3bf 8f4f 	dsb	sy
 8000480:	613b      	str	r3, [r7, #16]
 8000482:	e7fe      	b.n	8000482 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000484:	4b3c      	ldr	r3, [pc, #240]	; (8000578 <xPortStartScheduler+0x118>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a3d      	ldr	r2, [pc, #244]	; (8000580 <xPortStartScheduler+0x120>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d109      	bne.n	80004a2 <xPortStartScheduler+0x42>
 800048e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000492:	f383 8811 	msr	BASEPRI, r3
 8000496:	f3bf 8f6f 	isb	sy
 800049a:	f3bf 8f4f 	dsb	sy
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	e7fe      	b.n	80004a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80004a2:	4b38      	ldr	r3, [pc, #224]	; (8000584 <xPortStartScheduler+0x124>)
 80004a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	22ff      	movs	r2, #255	; 0xff
 80004b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80004bc:	78fb      	ldrb	r3, [r7, #3]
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80004c4:	b2da      	uxtb	r2, r3
 80004c6:	4b30      	ldr	r3, [pc, #192]	; (8000588 <xPortStartScheduler+0x128>)
 80004c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80004ca:	4b30      	ldr	r3, [pc, #192]	; (800058c <xPortStartScheduler+0x12c>)
 80004cc:	2207      	movs	r2, #7
 80004ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80004d0:	e009      	b.n	80004e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80004d2:	4b2e      	ldr	r3, [pc, #184]	; (800058c <xPortStartScheduler+0x12c>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	3b01      	subs	r3, #1
 80004d8:	4a2c      	ldr	r2, [pc, #176]	; (800058c <xPortStartScheduler+0x12c>)
 80004da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80004dc:	78fb      	ldrb	r3, [r7, #3]
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80004e6:	78fb      	ldrb	r3, [r7, #3]
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ee:	2b80      	cmp	r3, #128	; 0x80
 80004f0:	d0ef      	beq.n	80004d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80004f2:	4b26      	ldr	r3, [pc, #152]	; (800058c <xPortStartScheduler+0x12c>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f1c3 0307 	rsb	r3, r3, #7
 80004fa:	2b04      	cmp	r3, #4
 80004fc:	d009      	beq.n	8000512 <xPortStartScheduler+0xb2>
 80004fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000502:	f383 8811 	msr	BASEPRI, r3
 8000506:	f3bf 8f6f 	isb	sy
 800050a:	f3bf 8f4f 	dsb	sy
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	e7fe      	b.n	8000510 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000512:	4b1e      	ldr	r3, [pc, #120]	; (800058c <xPortStartScheduler+0x12c>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	021b      	lsls	r3, r3, #8
 8000518:	4a1c      	ldr	r2, [pc, #112]	; (800058c <xPortStartScheduler+0x12c>)
 800051a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800051c:	4b1b      	ldr	r3, [pc, #108]	; (800058c <xPortStartScheduler+0x12c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000524:	4a19      	ldr	r2, [pc, #100]	; (800058c <xPortStartScheduler+0x12c>)
 8000526:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	b2da      	uxtb	r2, r3
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000530:	4a17      	ldr	r2, [pc, #92]	; (8000590 <xPortStartScheduler+0x130>)
 8000532:	4b17      	ldr	r3, [pc, #92]	; (8000590 <xPortStartScheduler+0x130>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800053a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800053c:	4a14      	ldr	r2, [pc, #80]	; (8000590 <xPortStartScheduler+0x130>)
 800053e:	4b14      	ldr	r3, [pc, #80]	; (8000590 <xPortStartScheduler+0x130>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000546:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000548:	f000 f8d6 	bl	80006f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800054c:	4b11      	ldr	r3, [pc, #68]	; (8000594 <xPortStartScheduler+0x134>)
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8000552:	f000 f8f5 	bl	8000740 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8000556:	4a10      	ldr	r2, [pc, #64]	; (8000598 <xPortStartScheduler+0x138>)
 8000558:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <xPortStartScheduler+0x138>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000560:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8000562:	f7ff ff69 	bl	8000438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8000566:	f001 fb7b 	bl	8001c60 <vTaskSwitchContext>
	prvTaskExitError();
 800056a:	f7ff ff21 	bl	80003b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800056e:	2300      	movs	r3, #0
}
 8000570:	4618      	mov	r0, r3
 8000572:	3718      	adds	r7, #24
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	e000ed00 	.word	0xe000ed00
 800057c:	410fc271 	.word	0x410fc271
 8000580:	410fc270 	.word	0x410fc270
 8000584:	e000e400 	.word	0xe000e400
 8000588:	20000054 	.word	0x20000054
 800058c:	20000058 	.word	0x20000058
 8000590:	e000ed20 	.word	0xe000ed20
 8000594:	20000000 	.word	0x20000000
 8000598:	e000ef34 	.word	0xe000ef34

0800059c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a6:	f383 8811 	msr	BASEPRI, r3
 80005aa:	f3bf 8f6f 	isb	sy
 80005ae:	f3bf 8f4f 	dsb	sy
 80005b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <vPortEnterCritical+0x54>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	3301      	adds	r3, #1
 80005ba:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <vPortEnterCritical+0x54>)
 80005bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80005be:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <vPortEnterCritical+0x54>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d10e      	bne.n	80005e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <vPortEnterCritical+0x58>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d009      	beq.n	80005e4 <vPortEnterCritical+0x48>
 80005d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005d4:	f383 8811 	msr	BASEPRI, r3
 80005d8:	f3bf 8f6f 	isb	sy
 80005dc:	f3bf 8f4f 	dsb	sy
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	e7fe      	b.n	80005e2 <vPortEnterCritical+0x46>
	}
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	20000000 	.word	0x20000000
 80005f4:	e000ed04 	.word	0xe000ed04

080005f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <vPortExitCritical+0x4c>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d109      	bne.n	800061a <vPortExitCritical+0x22>
 8000606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800060a:	f383 8811 	msr	BASEPRI, r3
 800060e:	f3bf 8f6f 	isb	sy
 8000612:	f3bf 8f4f 	dsb	sy
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	e7fe      	b.n	8000618 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <vPortExitCritical+0x4c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	3b01      	subs	r3, #1
 8000620:	4a08      	ldr	r2, [pc, #32]	; (8000644 <vPortExitCritical+0x4c>)
 8000622:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <vPortExitCritical+0x4c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d104      	bne.n	8000636 <vPortExitCritical+0x3e>
 800062c:	2300      	movs	r3, #0
 800062e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000000 	.word	0x20000000
	...

08000650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000650:	f3ef 8009 	mrs	r0, PSP
 8000654:	f3bf 8f6f 	isb	sy
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <pxCurrentTCBConst>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	f01e 0f10 	tst.w	lr, #16
 8000660:	bf08      	it	eq
 8000662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800066a:	6010      	str	r0, [r2, #0]
 800066c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000670:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000674:	f380 8811 	msr	BASEPRI, r0
 8000678:	f3bf 8f4f 	dsb	sy
 800067c:	f3bf 8f6f 	isb	sy
 8000680:	f001 faee 	bl	8001c60 <vTaskSwitchContext>
 8000684:	f04f 0000 	mov.w	r0, #0
 8000688:	f380 8811 	msr	BASEPRI, r0
 800068c:	bc09      	pop	{r0, r3}
 800068e:	6819      	ldr	r1, [r3, #0]
 8000690:	6808      	ldr	r0, [r1, #0]
 8000692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000696:	f01e 0f10 	tst.w	lr, #16
 800069a:	bf08      	it	eq
 800069c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80006a0:	f380 8809 	msr	PSP, r0
 80006a4:	f3bf 8f6f 	isb	sy
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	f3af 8000 	nop.w

080006b0 <pxCurrentTCBConst>:
 80006b0:	20012c7c 	.word	0x20012c7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop

080006b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
	__asm volatile
 80006be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006c2:	f383 8811 	msr	BASEPRI, r3
 80006c6:	f3bf 8f6f 	isb	sy
 80006ca:	f3bf 8f4f 	dsb	sy
 80006ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80006d0:	f001 fa0a 	bl	8001ae8 <xTaskIncrementTick>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d003      	beq.n	80006e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <SysTick_Handler+0x3c>)
 80006dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	2300      	movs	r3, #0
 80006e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	e000ed04 	.word	0xe000ed04

080006f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80006fc:	4b0b      	ldr	r3, [pc, #44]	; (800072c <vPortSetupTimerInterrupt+0x34>)
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <vPortSetupTimerInterrupt+0x38>)
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000708:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <vPortSetupTimerInterrupt+0x3c>)
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <vPortSetupTimerInterrupt+0x40>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	490b      	ldr	r1, [pc, #44]	; (800073c <vPortSetupTimerInterrupt+0x44>)
 8000710:	fba1 1303 	umull	r1, r3, r1, r3
 8000714:	099b      	lsrs	r3, r3, #6
 8000716:	3b01      	subs	r3, #1
 8000718:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800071a:	4b04      	ldr	r3, [pc, #16]	; (800072c <vPortSetupTimerInterrupt+0x34>)
 800071c:	2207      	movs	r2, #7
 800071e:	601a      	str	r2, [r3, #0]
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000e010 	.word	0xe000e010
 8000730:	e000e018 	.word	0xe000e018
 8000734:	e000e014 	.word	0xe000e014
 8000738:	20000024 	.word	0x20000024
 800073c:	10624dd3 	.word	0x10624dd3

08000740 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8000740:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000750 <vPortEnableVFP+0x10>
 8000744:	6801      	ldr	r1, [r0, #0]
 8000746:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074a:	6001      	str	r1, [r0, #0]
 800074c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800074e:	bf00      	nop
 8000750:	e000ed88 	.word	0xe000ed88

08000754 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800075a:	f3ef 8305 	mrs	r3, IPSR
 800075e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	2b0f      	cmp	r3, #15
 8000764:	d913      	bls.n	800078e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000766:	4a16      	ldr	r2, [pc, #88]	; (80007c0 <vPortValidateInterruptPriority+0x6c>)
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	4413      	add	r3, r2
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <vPortValidateInterruptPriority+0x70>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	7afa      	ldrb	r2, [r7, #11]
 8000776:	429a      	cmp	r2, r3
 8000778:	d209      	bcs.n	800078e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800077a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800077e:	f383 8811 	msr	BASEPRI, r3
 8000782:	f3bf 8f6f 	isb	sy
 8000786:	f3bf 8f4f 	dsb	sy
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	e7fe      	b.n	800078c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <vPortValidateInterruptPriority+0x74>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000796:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <vPortValidateInterruptPriority+0x78>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	429a      	cmp	r2, r3
 800079c:	d909      	bls.n	80007b2 <vPortValidateInterruptPriority+0x5e>
 800079e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007a2:	f383 8811 	msr	BASEPRI, r3
 80007a6:	f3bf 8f6f 	isb	sy
 80007aa:	f3bf 8f4f 	dsb	sy
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	e7fe      	b.n	80007b0 <vPortValidateInterruptPriority+0x5c>
	}
 80007b2:	bf00      	nop
 80007b4:	3714      	adds	r7, #20
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000e3f0 	.word	0xe000e3f0
 80007c4:	20000054 	.word	0x20000054
 80007c8:	e000ed0c 	.word	0xe000ed0c
 80007cc:	20000058 	.word	0x20000058

080007d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80007dc:	f001 f8b4 	bl	8001948 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80007e0:	4b59      	ldr	r3, [pc, #356]	; (8000948 <pvPortMalloc+0x178>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d101      	bne.n	80007ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80007e8:	f000 f91a 	bl	8000a20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80007ec:	4b57      	ldr	r3, [pc, #348]	; (800094c <pvPortMalloc+0x17c>)
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4013      	ands	r3, r2
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	f040 8091 	bne.w	800091c <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d01c      	beq.n	800083a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8000800:	2208      	movs	r2, #8
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4413      	add	r3, r2
 8000806:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	2b00      	cmp	r3, #0
 8000810:	d013      	beq.n	800083a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	f023 0307 	bic.w	r3, r3, #7
 8000818:	3308      	adds	r3, #8
 800081a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f003 0307 	and.w	r3, r3, #7
 8000822:	2b00      	cmp	r3, #0
 8000824:	d009      	beq.n	800083a <pvPortMalloc+0x6a>
 8000826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800082a:	f383 8811 	msr	BASEPRI, r3
 800082e:	f3bf 8f6f 	isb	sy
 8000832:	f3bf 8f4f 	dsb	sy
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	e7fe      	b.n	8000838 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d06d      	beq.n	800091c <pvPortMalloc+0x14c>
 8000840:	4b43      	ldr	r3, [pc, #268]	; (8000950 <pvPortMalloc+0x180>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	429a      	cmp	r2, r3
 8000848:	d868      	bhi.n	800091c <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800084a:	4b42      	ldr	r3, [pc, #264]	; (8000954 <pvPortMalloc+0x184>)
 800084c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800084e:	4b41      	ldr	r3, [pc, #260]	; (8000954 <pvPortMalloc+0x184>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000854:	e004      	b.n	8000860 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8000856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000858:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800085a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	429a      	cmp	r2, r3
 8000868:	d203      	bcs.n	8000872 <pvPortMalloc+0xa2>
 800086a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d1f1      	bne.n	8000856 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000872:	4b35      	ldr	r3, [pc, #212]	; (8000948 <pvPortMalloc+0x178>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000878:	429a      	cmp	r2, r3
 800087a:	d04f      	beq.n	800091c <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800087c:	6a3b      	ldr	r3, [r7, #32]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2208      	movs	r2, #8
 8000882:	4413      	add	r3, r2
 8000884:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	6a3b      	ldr	r3, [r7, #32]
 800088c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000890:	685a      	ldr	r2, [r3, #4]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	1ad2      	subs	r2, r2, r3
 8000896:	2308      	movs	r3, #8
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	429a      	cmp	r2, r3
 800089c:	d91e      	bls.n	80008dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800089e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4413      	add	r3, r2
 80008a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	f003 0307 	and.w	r3, r3, #7
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d009      	beq.n	80008c4 <pvPortMalloc+0xf4>
 80008b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008b4:	f383 8811 	msr	BASEPRI, r3
 80008b8:	f3bf 8f6f 	isb	sy
 80008bc:	f3bf 8f4f 	dsb	sy
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	e7fe      	b.n	80008c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80008c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c6:	685a      	ldr	r2, [r3, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	1ad2      	subs	r2, r2, r3
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80008d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80008d6:	69b8      	ldr	r0, [r7, #24]
 80008d8:	f000 f904 	bl	8000ae4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80008dc:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <pvPortMalloc+0x180>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	4a1a      	ldr	r2, [pc, #104]	; (8000950 <pvPortMalloc+0x180>)
 80008e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80008ea:	4b19      	ldr	r3, [pc, #100]	; (8000950 <pvPortMalloc+0x180>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <pvPortMalloc+0x188>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d203      	bcs.n	80008fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <pvPortMalloc+0x180>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a17      	ldr	r2, [pc, #92]	; (8000958 <pvPortMalloc+0x188>)
 80008fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80008fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000900:	685a      	ldr	r2, [r3, #4]
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <pvPortMalloc+0x17c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	431a      	orrs	r2, r3
 8000908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800090c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <pvPortMalloc+0x18c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	3301      	adds	r3, #1
 8000918:	4a10      	ldr	r2, [pc, #64]	; (800095c <pvPortMalloc+0x18c>)
 800091a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800091c:	f001 f822 	bl	8001964 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	2b00      	cmp	r3, #0
 8000928:	d009      	beq.n	800093e <pvPortMalloc+0x16e>
 800092a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800092e:	f383 8811 	msr	BASEPRI, r3
 8000932:	f3bf 8f6f 	isb	sy
 8000936:	f3bf 8f4f 	dsb	sy
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	e7fe      	b.n	800093c <pvPortMalloc+0x16c>
	return pvReturn;
 800093e:	69fb      	ldr	r3, [r7, #28]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3728      	adds	r7, #40	; 0x28
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20012c64 	.word	0x20012c64
 800094c:	20012c78 	.word	0x20012c78
 8000950:	20012c68 	.word	0x20012c68
 8000954:	20012c5c 	.word	0x20012c5c
 8000958:	20012c6c 	.word	0x20012c6c
 800095c:	20012c70 	.word	0x20012c70

08000960 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d04b      	beq.n	8000a0a <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000972:	2308      	movs	r3, #8
 8000974:	425b      	negs	r3, r3
 8000976:	697a      	ldr	r2, [r7, #20]
 8000978:	4413      	add	r3, r2
 800097a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	685a      	ldr	r2, [r3, #4]
 8000984:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <vPortFree+0xb4>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4013      	ands	r3, r2
 800098a:	2b00      	cmp	r3, #0
 800098c:	d109      	bne.n	80009a2 <vPortFree+0x42>
 800098e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000992:	f383 8811 	msr	BASEPRI, r3
 8000996:	f3bf 8f6f 	isb	sy
 800099a:	f3bf 8f4f 	dsb	sy
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	e7fe      	b.n	80009a0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d009      	beq.n	80009be <vPortFree+0x5e>
 80009aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009ae:	f383 8811 	msr	BASEPRI, r3
 80009b2:	f3bf 8f6f 	isb	sy
 80009b6:	f3bf 8f4f 	dsb	sy
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	e7fe      	b.n	80009bc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	685a      	ldr	r2, [r3, #4]
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <vPortFree+0xb4>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4013      	ands	r3, r2
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d01e      	beq.n	8000a0a <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d11a      	bne.n	8000a0a <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	685a      	ldr	r2, [r3, #4]
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <vPortFree+0xb4>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	43db      	mvns	r3, r3
 80009de:	401a      	ands	r2, r3
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80009e4:	f000 ffb0 	bl	8001948 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	685a      	ldr	r2, [r3, #4]
 80009ec:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <vPortFree+0xb8>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4413      	add	r3, r2
 80009f2:	4a09      	ldr	r2, [pc, #36]	; (8000a18 <vPortFree+0xb8>)
 80009f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80009f6:	6938      	ldr	r0, [r7, #16]
 80009f8:	f000 f874 	bl	8000ae4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <vPortFree+0xbc>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	3301      	adds	r3, #1
 8000a02:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <vPortFree+0xbc>)
 8000a04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8000a06:	f000 ffad 	bl	8001964 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000a0a:	bf00      	nop
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20012c78 	.word	0x20012c78
 8000a18:	20012c68 	.word	0x20012c68
 8000a1c:	20012c74 	.word	0x20012c74

08000a20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000a26:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000a2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000a2c:	4b27      	ldr	r3, [pc, #156]	; (8000acc <prvHeapInit+0xac>)
 8000a2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d00c      	beq.n	8000a54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	3307      	adds	r3, #7
 8000a3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f023 0307 	bic.w	r3, r3, #7
 8000a46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000a48:	68ba      	ldr	r2, [r7, #8]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	4a1f      	ldr	r2, [pc, #124]	; (8000acc <prvHeapInit+0xac>)
 8000a50:	4413      	add	r3, r2
 8000a52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a58:	4a1d      	ldr	r2, [pc, #116]	; (8000ad0 <prvHeapInit+0xb0>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <prvHeapInit+0xb0>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	4413      	add	r3, r2
 8000a6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a6c:	2208      	movs	r2, #8
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	1a9b      	subs	r3, r3, r2
 8000a72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f023 0307 	bic.w	r3, r3, #7
 8000a7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4a15      	ldr	r2, [pc, #84]	; (8000ad4 <prvHeapInit+0xb4>)
 8000a80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <prvHeapInit+0xb4>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2200      	movs	r2, #0
 8000a88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a8a:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <prvHeapInit+0xb4>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	68fa      	ldr	r2, [r7, #12]
 8000a9a:	1ad2      	subs	r2, r2, r3
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <prvHeapInit+0xb4>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <prvHeapInit+0xb8>)
 8000aae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	4a09      	ldr	r2, [pc, #36]	; (8000adc <prvHeapInit+0xbc>)
 8000ab6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <prvHeapInit+0xc0>)
 8000aba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000abe:	601a      	str	r2, [r3, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	2000005c 	.word	0x2000005c
 8000ad0:	20012c5c 	.word	0x20012c5c
 8000ad4:	20012c64 	.word	0x20012c64
 8000ad8:	20012c6c 	.word	0x20012c6c
 8000adc:	20012c68 	.word	0x20012c68
 8000ae0:	20012c78 	.word	0x20012c78

08000ae4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000aec:	4b28      	ldr	r3, [pc, #160]	; (8000b90 <prvInsertBlockIntoFreeList+0xac>)
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	e002      	b.n	8000af8 <prvInsertBlockIntoFreeList+0x14>
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d3f7      	bcc.n	8000af2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	441a      	add	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d108      	bne.n	8000b26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	685a      	ldr	r2, [r3, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	441a      	add	r2, r3
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	441a      	add	r2, r3
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d118      	bne.n	8000b6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <prvInsertBlockIntoFreeList+0xb0>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d00d      	beq.n	8000b62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	685a      	ldr	r2, [r3, #4]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	441a      	add	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	e008      	b.n	8000b74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <prvInsertBlockIntoFreeList+0xb0>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	e003      	b.n	8000b74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b74:	68fa      	ldr	r2, [r7, #12]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d002      	beq.n	8000b82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b82:	bf00      	nop
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20012c5c 	.word	0x20012c5c
 8000b94:	20012c64 	.word	0x20012c64

08000b98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d109      	bne.n	8000bc0 <xQueueGenericReset+0x28>
 8000bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bb0:	f383 8811 	msr	BASEPRI, r3
 8000bb4:	f3bf 8f6f 	isb	sy
 8000bb8:	f3bf 8f4f 	dsb	sy
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	e7fe      	b.n	8000bbe <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000bc0:	f7ff fcec 	bl	800059c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bcc:	68f9      	ldr	r1, [r7, #12]
 8000bce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000bd0:	fb01 f303 	mul.w	r3, r1, r3
 8000bd4:	441a      	add	r2, r3
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	68f9      	ldr	r1, [r7, #12]
 8000bf4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000bf6:	fb01 f303 	mul.w	r3, r1, r3
 8000bfa:	441a      	add	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	22ff      	movs	r2, #255	; 0xff
 8000c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	22ff      	movs	r2, #255	; 0xff
 8000c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d114      	bne.n	8000c40 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	691b      	ldr	r3, [r3, #16]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d01a      	beq.n	8000c54 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	3310      	adds	r3, #16
 8000c22:	4618      	mov	r0, r3
 8000c24:	f001 f8dc 	bl	8001de0 <xTaskRemoveFromEventList>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d012      	beq.n	8000c54 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <xQueueGenericReset+0xcc>)
 8000c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	f3bf 8f4f 	dsb	sy
 8000c3a:	f3bf 8f6f 	isb	sy
 8000c3e:	e009      	b.n	8000c54 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	3310      	adds	r3, #16
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff facb 	bl	80001e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	3324      	adds	r3, #36	; 0x24
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fac6 	bl	80001e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000c54:	f7ff fcd0 	bl	80005f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000c58:	2301      	movs	r3, #1
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	e000ed04 	.word	0xe000ed04

08000c68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	; 0x28
 8000c6c:	af02      	add	r7, sp, #8
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	4613      	mov	r3, r2
 8000c74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d109      	bne.n	8000c90 <xQueueGenericCreate+0x28>
 8000c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c80:	f383 8811 	msr	BASEPRI, r3
 8000c84:	f3bf 8f6f 	isb	sy
 8000c88:	f3bf 8f4f 	dsb	sy
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	e7fe      	b.n	8000c8e <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	fb02 f303 	mul.w	r3, r2, r3
 8000c98:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3350      	adds	r3, #80	; 0x50
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fd96 	bl	80007d0 <pvPortMalloc>
 8000ca4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d00d      	beq.n	8000cc8 <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	3350      	adds	r3, #80	; 0x50
 8000cb4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000cb6:	79fa      	ldrb	r2, [r7, #7]
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	68b9      	ldr	r1, [r7, #8]
 8000cc2:	68f8      	ldr	r0, [r7, #12]
 8000cc4:	f000 f805 	bl	8000cd2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000cc8:	69bb      	ldr	r3, [r7, #24]
	}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3720      	adds	r7, #32
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b084      	sub	sp, #16
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	60f8      	str	r0, [r7, #12]
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
 8000cde:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d103      	bne.n	8000cee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	e002      	b.n	8000cf4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	68ba      	ldr	r2, [r7, #8]
 8000cfe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000d00:	2101      	movs	r1, #1
 8000d02:	69b8      	ldr	r0, [r7, #24]
 8000d04:	f7ff ff48 	bl	8000b98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	78fa      	ldrb	r2, [r7, #3]
 8000d0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8000d10:	78fb      	ldrb	r3, [r7, #3]
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	68f9      	ldr	r1, [r7, #12]
 8000d16:	2073      	movs	r0, #115	; 0x73
 8000d18:	f002 fe92 	bl	8003a40 <SEGGER_SYSVIEW_RecordU32x3>
}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b090      	sub	sp, #64	; 0x40
 8000d28:	af02      	add	r7, sp, #8
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
 8000d30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000d32:	2300      	movs	r3, #0
 8000d34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d109      	bne.n	8000d54 <xQueueGenericSend+0x30>
 8000d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d44:	f383 8811 	msr	BASEPRI, r3
 8000d48:	f3bf 8f6f 	isb	sy
 8000d4c:	f3bf 8f4f 	dsb	sy
 8000d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d52:	e7fe      	b.n	8000d52 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d103      	bne.n	8000d62 <xQueueGenericSend+0x3e>
 8000d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <xQueueGenericSend+0x42>
 8000d62:	2301      	movs	r3, #1
 8000d64:	e000      	b.n	8000d68 <xQueueGenericSend+0x44>
 8000d66:	2300      	movs	r3, #0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d109      	bne.n	8000d80 <xQueueGenericSend+0x5c>
 8000d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d70:	f383 8811 	msr	BASEPRI, r3
 8000d74:	f3bf 8f6f 	isb	sy
 8000d78:	f3bf 8f4f 	dsb	sy
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d7e:	e7fe      	b.n	8000d7e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d103      	bne.n	8000d8e <xQueueGenericSend+0x6a>
 8000d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d101      	bne.n	8000d92 <xQueueGenericSend+0x6e>
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e000      	b.n	8000d94 <xQueueGenericSend+0x70>
 8000d92:	2300      	movs	r3, #0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d109      	bne.n	8000dac <xQueueGenericSend+0x88>
 8000d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d9c:	f383 8811 	msr	BASEPRI, r3
 8000da0:	f3bf 8f6f 	isb	sy
 8000da4:	f3bf 8f4f 	dsb	sy
 8000da8:	623b      	str	r3, [r7, #32]
 8000daa:	e7fe      	b.n	8000daa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000dac:	f001 f9b4 	bl	8002118 <xTaskGetSchedulerState>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d102      	bne.n	8000dbc <xQueueGenericSend+0x98>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d101      	bne.n	8000dc0 <xQueueGenericSend+0x9c>
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e000      	b.n	8000dc2 <xQueueGenericSend+0x9e>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d109      	bne.n	8000dda <xQueueGenericSend+0xb6>
 8000dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dca:	f383 8811 	msr	BASEPRI, r3
 8000dce:	f3bf 8f6f 	isb	sy
 8000dd2:	f3bf 8f4f 	dsb	sy
 8000dd6:	61fb      	str	r3, [r7, #28]
 8000dd8:	e7fe      	b.n	8000dd8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000dda:	f7ff fbdf 	bl	800059c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d302      	bcc.n	8000df0 <xQueueGenericSend+0xcc>
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d136      	bne.n	8000e5e <xQueueGenericSend+0x13a>
			{
				traceQUEUE_SEND( pxQueue );
 8000df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000df2:	4618      	mov	r0, r3
 8000df4:	f003 fada 	bl	80043ac <SEGGER_SYSVIEW_ShrinkId>
 8000df8:	68ba      	ldr	r2, [r7, #8]
 8000dfa:	6879      	ldr	r1, [r7, #4]
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	460b      	mov	r3, r1
 8000e02:	4601      	mov	r1, r0
 8000e04:	205a      	movs	r0, #90	; 0x5a
 8000e06:	f002 fe91 	bl	8003b2c <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000e0a:	683a      	ldr	r2, [r7, #0]
 8000e0c:	68b9      	ldr	r1, [r7, #8]
 8000e0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e10:	f000 fa6a 	bl	80012e8 <prvCopyDataToQueue>
 8000e14:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d010      	beq.n	8000e40 <xQueueGenericSend+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e20:	3324      	adds	r3, #36	; 0x24
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 ffdc 	bl	8001de0 <xTaskRemoveFromEventList>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d013      	beq.n	8000e56 <xQueueGenericSend+0x132>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000e2e:	4b4d      	ldr	r3, [pc, #308]	; (8000f64 <xQueueGenericSend+0x240>)
 8000e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	f3bf 8f4f 	dsb	sy
 8000e3a:	f3bf 8f6f 	isb	sy
 8000e3e:	e00a      	b.n	8000e56 <xQueueGenericSend+0x132>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d007      	beq.n	8000e56 <xQueueGenericSend+0x132>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000e46:	4b47      	ldr	r3, [pc, #284]	; (8000f64 <xQueueGenericSend+0x240>)
 8000e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	f3bf 8f4f 	dsb	sy
 8000e52:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000e56:	f7ff fbcf 	bl	80005f8 <vPortExitCritical>
				return pdPASS;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e07d      	b.n	8000f5a <xQueueGenericSend+0x236>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d110      	bne.n	8000e86 <xQueueGenericSend+0x162>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000e64:	f7ff fbc8 	bl	80005f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8000e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f003 fa9e 	bl	80043ac <SEGGER_SYSVIEW_ShrinkId>
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	4601      	mov	r1, r0
 8000e7c:	205a      	movs	r0, #90	; 0x5a
 8000e7e:	f002 fe55 	bl	8003b2c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e069      	b.n	8000f5a <xQueueGenericSend+0x236>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d106      	bne.n	8000e9a <xQueueGenericSend+0x176>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4618      	mov	r0, r3
 8000e92:	f001 f80b 	bl	8001eac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000e96:	2301      	movs	r3, #1
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000e9a:	f7ff fbad 	bl	80005f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000e9e:	f000 fd53 	bl	8001948 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000ea2:	f7ff fb7b 	bl	800059c <vPortEnterCritical>
 8000ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000eac:	b25b      	sxtb	r3, r3
 8000eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb2:	d103      	bne.n	8000ebc <xQueueGenericSend+0x198>
 8000eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ec2:	b25b      	sxtb	r3, r3
 8000ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec8:	d103      	bne.n	8000ed2 <xQueueGenericSend+0x1ae>
 8000eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000ed2:	f7ff fb91 	bl	80005f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000ed6:	1d3a      	adds	r2, r7, #4
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4611      	mov	r1, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 fffa 	bl	8001ed8 <xTaskCheckForTimeOut>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d124      	bne.n	8000f34 <xQueueGenericSend+0x210>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000eea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000eec:	f000 faf4 	bl	80014d8 <prvIsQueueFull>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d018      	beq.n	8000f28 <xQueueGenericSend+0x204>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ef8:	3310      	adds	r3, #16
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	4611      	mov	r1, r2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 ff1c 	bl	8001d3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000f04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f06:	f000 fa7f 	bl	8001408 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000f0a:	f000 fd2b 	bl	8001964 <xTaskResumeAll>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f47f af62 	bne.w	8000dda <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <xQueueGenericSend+0x240>)
 8000f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	f3bf 8f4f 	dsb	sy
 8000f22:	f3bf 8f6f 	isb	sy
 8000f26:	e758      	b.n	8000dda <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000f28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f2a:	f000 fa6d 	bl	8001408 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000f2e:	f000 fd19 	bl	8001964 <xTaskResumeAll>
 8000f32:	e752      	b.n	8000dda <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000f34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f36:	f000 fa67 	bl	8001408 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000f3a:	f000 fd13 	bl	8001964 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8000f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f40:	4618      	mov	r0, r3
 8000f42:	f003 fa33 	bl	80043ac <SEGGER_SYSVIEW_ShrinkId>
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4601      	mov	r1, r0
 8000f52:	205a      	movs	r0, #90	; 0x5a
 8000f54:	f002 fdea 	bl	8003b2c <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8000f58:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3738      	adds	r7, #56	; 0x38
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	e000ed04 	.word	0xe000ed04

08000f68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b090      	sub	sp, #64	; 0x40
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8000f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d109      	bne.n	8000f94 <xQueueGenericSendFromISR+0x2c>
 8000f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f84:	f383 8811 	msr	BASEPRI, r3
 8000f88:	f3bf 8f6f 	isb	sy
 8000f8c:	f3bf 8f4f 	dsb	sy
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f92:	e7fe      	b.n	8000f92 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d103      	bne.n	8000fa2 <xQueueGenericSendFromISR+0x3a>
 8000f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <xQueueGenericSendFromISR+0x3e>
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e000      	b.n	8000fa8 <xQueueGenericSendFromISR+0x40>
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d109      	bne.n	8000fc0 <xQueueGenericSendFromISR+0x58>
 8000fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fb0:	f383 8811 	msr	BASEPRI, r3
 8000fb4:	f3bf 8f6f 	isb	sy
 8000fb8:	f3bf 8f4f 	dsb	sy
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8000fbe:	e7fe      	b.n	8000fbe <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d103      	bne.n	8000fce <xQueueGenericSendFromISR+0x66>
 8000fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d101      	bne.n	8000fd2 <xQueueGenericSendFromISR+0x6a>
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e000      	b.n	8000fd4 <xQueueGenericSendFromISR+0x6c>
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d109      	bne.n	8000fec <xQueueGenericSendFromISR+0x84>
 8000fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fdc:	f383 8811 	msr	BASEPRI, r3
 8000fe0:	f3bf 8f6f 	isb	sy
 8000fe4:	f3bf 8f4f 	dsb	sy
 8000fe8:	623b      	str	r3, [r7, #32]
 8000fea:	e7fe      	b.n	8000fea <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000fec:	f7ff fbb2 	bl	8000754 <vPortValidateInterruptPriority>
	__asm volatile
 8000ff0:	f3ef 8211 	mrs	r2, BASEPRI
 8000ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ff8:	f383 8811 	msr	BASEPRI, r3
 8000ffc:	f3bf 8f6f 	isb	sy
 8001000:	f3bf 8f4f 	dsb	sy
 8001004:	61fa      	str	r2, [r7, #28]
 8001006:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8001008:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800100a:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800100c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800100e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001014:	429a      	cmp	r2, r3
 8001016:	d302      	bcc.n	800101e <xQueueGenericSendFromISR+0xb6>
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	2b02      	cmp	r3, #2
 800101c:	d139      	bne.n	8001092 <xQueueGenericSendFromISR+0x12a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800101e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001020:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001024:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800102a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 800102e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001030:	4618      	mov	r0, r3
 8001032:	f003 f9bb 	bl	80043ac <SEGGER_SYSVIEW_ShrinkId>
 8001036:	4601      	mov	r1, r0
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	461a      	mov	r2, r3
 800103c:	2060      	movs	r0, #96	; 0x60
 800103e:	f002 fca5 	bl	800398c <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	68b9      	ldr	r1, [r7, #8]
 8001046:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001048:	f000 f94e 	bl	80012e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800104c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001054:	d112      	bne.n	800107c <xQueueGenericSendFromISR+0x114>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105a:	2b00      	cmp	r3, #0
 800105c:	d016      	beq.n	800108c <xQueueGenericSendFromISR+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800105e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001060:	3324      	adds	r3, #36	; 0x24
 8001062:	4618      	mov	r0, r3
 8001064:	f000 febc 	bl	8001de0 <xTaskRemoveFromEventList>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00e      	beq.n	800108c <xQueueGenericSendFromISR+0x124>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00b      	beq.n	800108c <xQueueGenericSendFromISR+0x124>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2201      	movs	r2, #1
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	e007      	b.n	800108c <xQueueGenericSendFromISR+0x124>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800107c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001080:	3301      	adds	r3, #1
 8001082:	b2db      	uxtb	r3, r3
 8001084:	b25a      	sxtb	r2, r3
 8001086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800108c:	2301      	movs	r3, #1
 800108e:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8001090:	e00b      	b.n	80010aa <xQueueGenericSendFromISR+0x142>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8001092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001094:	4618      	mov	r0, r3
 8001096:	f003 f989 	bl	80043ac <SEGGER_SYSVIEW_ShrinkId>
 800109a:	4601      	mov	r1, r0
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	461a      	mov	r2, r3
 80010a0:	2060      	movs	r0, #96	; 0x60
 80010a2:	f002 fc73 	bl	800398c <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ac:	617b      	str	r3, [r7, #20]
	__asm volatile
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80010b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3740      	adds	r7, #64	; 0x40
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	b08f      	sub	sp, #60	; 0x3c
 80010c4:	af02      	add	r7, sp, #8
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80010d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d109      	bne.n	80010ee <xQueueReceive+0x2e>
	__asm volatile
 80010da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010de:	f383 8811 	msr	BASEPRI, r3
 80010e2:	f3bf 8f6f 	isb	sy
 80010e6:	f3bf 8f4f 	dsb	sy
 80010ea:	623b      	str	r3, [r7, #32]
 80010ec:	e7fe      	b.n	80010ec <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d103      	bne.n	80010fc <xQueueReceive+0x3c>
 80010f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d101      	bne.n	8001100 <xQueueReceive+0x40>
 80010fc:	2301      	movs	r3, #1
 80010fe:	e000      	b.n	8001102 <xQueueReceive+0x42>
 8001100:	2300      	movs	r3, #0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d109      	bne.n	800111a <xQueueReceive+0x5a>
 8001106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800110a:	f383 8811 	msr	BASEPRI, r3
 800110e:	f3bf 8f6f 	isb	sy
 8001112:	f3bf 8f4f 	dsb	sy
 8001116:	61fb      	str	r3, [r7, #28]
 8001118:	e7fe      	b.n	8001118 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800111a:	f000 fffd 	bl	8002118 <xTaskGetSchedulerState>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d102      	bne.n	800112a <xQueueReceive+0x6a>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <xQueueReceive+0x6e>
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <xQueueReceive+0x70>
 800112e:	2300      	movs	r3, #0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d109      	bne.n	8001148 <xQueueReceive+0x88>
 8001134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001138:	f383 8811 	msr	BASEPRI, r3
 800113c:	f3bf 8f6f 	isb	sy
 8001140:	f3bf 8f4f 	dsb	sy
 8001144:	61bb      	str	r3, [r7, #24]
 8001146:	e7fe      	b.n	8001146 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001148:	f7ff fa28 	bl	800059c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001150:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	2b00      	cmp	r3, #0
 8001156:	d031      	beq.n	80011bc <xQueueReceive+0xfc>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001158:	68b9      	ldr	r1, [r7, #8]
 800115a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800115c:	f000 f92e 	bl	80013bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8001160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001162:	4618      	mov	r0, r3
 8001164:	f003 f922 	bl	80043ac <SEGGER_SYSVIEW_ShrinkId>
 8001168:	4604      	mov	r4, r0
 800116a:	2000      	movs	r0, #0
 800116c:	f003 f91e 	bl	80043ac <SEGGER_SYSVIEW_ShrinkId>
 8001170:	4601      	mov	r1, r0
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	2301      	movs	r3, #1
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	4613      	mov	r3, r2
 800117a:	460a      	mov	r2, r1
 800117c:	4621      	mov	r1, r4
 800117e:	205c      	movs	r0, #92	; 0x5c
 8001180:	f002 fcd4 	bl	8003b2c <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001186:	1e5a      	subs	r2, r3, #1
 8001188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800118c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d00f      	beq.n	80011b4 <xQueueReceive+0xf4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001196:	3310      	adds	r3, #16
 8001198:	4618      	mov	r0, r3
 800119a:	f000 fe21 	bl	8001de0 <xTaskRemoveFromEventList>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d007      	beq.n	80011b4 <xQueueReceive+0xf4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80011a4:	4b4f      	ldr	r3, [pc, #316]	; (80012e4 <xQueueReceive+0x224>)
 80011a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	f3bf 8f4f 	dsb	sy
 80011b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80011b4:	f7ff fa20 	bl	80005f8 <vPortExitCritical>
				return pdPASS;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e08e      	b.n	80012da <xQueueReceive+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d115      	bne.n	80011ee <xQueueReceive+0x12e>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80011c2:	f7ff fa19 	bl	80005f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80011c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c8:	4618      	mov	r0, r3
 80011ca:	f003 f8ef 	bl	80043ac <SEGGER_SYSVIEW_ShrinkId>
 80011ce:	4604      	mov	r4, r0
 80011d0:	2000      	movs	r0, #0
 80011d2:	f003 f8eb 	bl	80043ac <SEGGER_SYSVIEW_ShrinkId>
 80011d6:	4601      	mov	r1, r0
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	2301      	movs	r3, #1
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	4613      	mov	r3, r2
 80011e0:	460a      	mov	r2, r1
 80011e2:	4621      	mov	r1, r4
 80011e4:	205c      	movs	r0, #92	; 0x5c
 80011e6:	f002 fca1 	bl	8003b2c <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e075      	b.n	80012da <xQueueReceive+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80011ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d106      	bne.n	8001202 <xQueueReceive+0x142>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 fe57 	bl	8001eac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80011fe:	2301      	movs	r3, #1
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001202:	f7ff f9f9 	bl	80005f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001206:	f000 fb9f 	bl	8001948 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800120a:	f7ff f9c7 	bl	800059c <vPortEnterCritical>
 800120e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001210:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001214:	b25b      	sxtb	r3, r3
 8001216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800121a:	d103      	bne.n	8001224 <xQueueReceive+0x164>
 800121c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001226:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800122a:	b25b      	sxtb	r3, r3
 800122c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001230:	d103      	bne.n	800123a <xQueueReceive+0x17a>
 8001232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800123a:	f7ff f9dd 	bl	80005f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800123e:	1d3a      	adds	r2, r7, #4
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	4611      	mov	r1, r2
 8001246:	4618      	mov	r0, r3
 8001248:	f000 fe46 	bl	8001ed8 <xTaskCheckForTimeOut>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d124      	bne.n	800129c <xQueueReceive+0x1dc>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001252:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001254:	f000 f92a 	bl	80014ac <prvIsQueueEmpty>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d018      	beq.n	8001290 <xQueueReceive+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800125e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001260:	3324      	adds	r3, #36	; 0x24
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	4611      	mov	r1, r2
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fd68 	bl	8001d3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800126c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800126e:	f000 f8cb 	bl	8001408 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001272:	f000 fb77 	bl	8001964 <xTaskResumeAll>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	f47f af65 	bne.w	8001148 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <xQueueReceive+0x224>)
 8001280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	f3bf 8f4f 	dsb	sy
 800128a:	f3bf 8f6f 	isb	sy
 800128e:	e75b      	b.n	8001148 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001290:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001292:	f000 f8b9 	bl	8001408 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001296:	f000 fb65 	bl	8001964 <xTaskResumeAll>
 800129a:	e755      	b.n	8001148 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800129c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800129e:	f000 f8b3 	bl	8001408 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80012a2:	f000 fb5f 	bl	8001964 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80012a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012a8:	f000 f900 	bl	80014ac <prvIsQueueEmpty>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f43f af4a 	beq.w	8001148 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80012b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b6:	4618      	mov	r0, r3
 80012b8:	f003 f878 	bl	80043ac <SEGGER_SYSVIEW_ShrinkId>
 80012bc:	4604      	mov	r4, r0
 80012be:	2000      	movs	r0, #0
 80012c0:	f003 f874 	bl	80043ac <SEGGER_SYSVIEW_ShrinkId>
 80012c4:	4601      	mov	r1, r0
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	2301      	movs	r3, #1
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	4613      	mov	r3, r2
 80012ce:	460a      	mov	r2, r1
 80012d0:	4621      	mov	r1, r4
 80012d2:	205c      	movs	r0, #92	; 0x5c
 80012d4:	f002 fc2a 	bl	8003b2c <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 80012d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3734      	adds	r7, #52	; 0x34
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd90      	pop	{r4, r7, pc}
 80012e2:	bf00      	nop
 80012e4:	e000ed04 	.word	0xe000ed04

080012e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10d      	bne.n	8001322 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d14d      	bne.n	80013aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	4618      	mov	r0, r3
 8001314:	f000 ff1e 	bl	8002154 <xTaskPriorityDisinherit>
 8001318:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	e043      	b.n	80013aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d119      	bne.n	800135c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6858      	ldr	r0, [r3, #4]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	461a      	mov	r2, r3
 8001332:	68b9      	ldr	r1, [r7, #8]
 8001334:	f003 fd09 	bl	8004d4a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	441a      	add	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	429a      	cmp	r2, r3
 8001350:	d32b      	bcc.n	80013aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	e026      	b.n	80013aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	68d8      	ldr	r0, [r3, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	461a      	mov	r2, r3
 8001366:	68b9      	ldr	r1, [r7, #8]
 8001368:	f003 fcef 	bl	8004d4a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	68da      	ldr	r2, [r3, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	425b      	negs	r3, r3
 8001376:	441a      	add	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	68da      	ldr	r2, [r3, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	429a      	cmp	r2, r3
 8001386:	d207      	bcs.n	8001398 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	425b      	negs	r3, r3
 8001392:	441a      	add	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d105      	bne.n	80013aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d002      	beq.n	80013aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1c5a      	adds	r2, r3, #1
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80013b2:	697b      	ldr	r3, [r7, #20]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d018      	beq.n	8001400 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	441a      	add	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68da      	ldr	r2, [r3, #12]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d303      	bcc.n	80013f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68d9      	ldr	r1, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	461a      	mov	r2, r3
 80013fa:	6838      	ldr	r0, [r7, #0]
 80013fc:	f003 fca5 	bl	8004d4a <memcpy>
	}
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001410:	f7ff f8c4 	bl	800059c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800141a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800141c:	e011      	b.n	8001442 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001422:	2b00      	cmp	r3, #0
 8001424:	d012      	beq.n	800144c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3324      	adds	r3, #36	; 0x24
 800142a:	4618      	mov	r0, r3
 800142c:	f000 fcd8 	bl	8001de0 <xTaskRemoveFromEventList>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001436:	f000 fdaf 	bl	8001f98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	3b01      	subs	r3, #1
 800143e:	b2db      	uxtb	r3, r3
 8001440:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001446:	2b00      	cmp	r3, #0
 8001448:	dce9      	bgt.n	800141e <prvUnlockQueue+0x16>
 800144a:	e000      	b.n	800144e <prvUnlockQueue+0x46>
					break;
 800144c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	22ff      	movs	r2, #255	; 0xff
 8001452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001456:	f7ff f8cf 	bl	80005f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800145a:	f7ff f89f 	bl	800059c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001464:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001466:	e011      	b.n	800148c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d012      	beq.n	8001496 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3310      	adds	r3, #16
 8001474:	4618      	mov	r0, r3
 8001476:	f000 fcb3 	bl	8001de0 <xTaskRemoveFromEventList>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001480:	f000 fd8a 	bl	8001f98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001484:	7bbb      	ldrb	r3, [r7, #14]
 8001486:	3b01      	subs	r3, #1
 8001488:	b2db      	uxtb	r3, r3
 800148a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800148c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001490:	2b00      	cmp	r3, #0
 8001492:	dce9      	bgt.n	8001468 <prvUnlockQueue+0x60>
 8001494:	e000      	b.n	8001498 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001496:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	22ff      	movs	r2, #255	; 0xff
 800149c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80014a0:	f7ff f8aa 	bl	80005f8 <vPortExitCritical>
}
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80014b4:	f7ff f872 	bl	800059c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d102      	bne.n	80014c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80014c0:	2301      	movs	r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	e001      	b.n	80014ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80014ca:	f7ff f895 	bl	80005f8 <vPortExitCritical>

	return xReturn;
 80014ce:	68fb      	ldr	r3, [r7, #12]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80014e0:	f7ff f85c 	bl	800059c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d102      	bne.n	80014f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80014f0:	2301      	movs	r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	e001      	b.n	80014fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80014fa:	f7ff f87d 	bl	80005f8 <vPortExitCritical>

	return xReturn;
 80014fe:	68fb      	ldr	r3, [r7, #12]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	e01e      	b.n	8001556 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001518:	4a12      	ldr	r2, [pc, #72]	; (8001564 <vQueueAddToRegistry+0x5c>)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d115      	bne.n	8001550 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001524:	490f      	ldr	r1, [pc, #60]	; (8001564 <vQueueAddToRegistry+0x5c>)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800152e:	4a0d      	ldr	r2, [pc, #52]	; (8001564 <vQueueAddToRegistry+0x5c>)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	4413      	add	r3, r2
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4618      	mov	r0, r3
 800153e:	f002 ff35 	bl	80043ac <SEGGER_SYSVIEW_ShrinkId>
 8001542:	4601      	mov	r1, r0
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	461a      	mov	r2, r3
 8001548:	2071      	movs	r0, #113	; 0x71
 800154a:	f002 fa1f 	bl	800398c <SEGGER_SYSVIEW_RecordU32x2>
				break;
 800154e:	e005      	b.n	800155c <vQueueAddToRegistry+0x54>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	3301      	adds	r3, #1
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2b07      	cmp	r3, #7
 800155a:	d9dd      	bls.n	8001518 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20015394 	.word	0x20015394

08001568 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001578:	f7ff f810 	bl	800059c <vPortEnterCritical>
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001582:	b25b      	sxtb	r3, r3
 8001584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001588:	d103      	bne.n	8001592 <vQueueWaitForMessageRestricted+0x2a>
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001598:	b25b      	sxtb	r3, r3
 800159a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800159e:	d103      	bne.n	80015a8 <vQueueWaitForMessageRestricted+0x40>
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80015a8:	f7ff f826 	bl	80005f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d106      	bne.n	80015c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	3324      	adds	r3, #36	; 0x24
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	68b9      	ldr	r1, [r7, #8]
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 fbe1 	bl	8001d84 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80015c2:	6978      	ldr	r0, [r7, #20]
 80015c4:	f7ff ff20 	bl	8001408 <prvUnlockQueue>
	}
 80015c8:	bf00      	nop
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08c      	sub	sp, #48	; 0x30
 80015d4:	af04      	add	r7, sp, #16
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	4613      	mov	r3, r2
 80015de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80015e0:	88fb      	ldrh	r3, [r7, #6]
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff f8f3 	bl	80007d0 <pvPortMalloc>
 80015ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00e      	beq.n	8001610 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80015f2:	2058      	movs	r0, #88	; 0x58
 80015f4:	f7ff f8ec 	bl	80007d0 <pvPortMalloc>
 80015f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	631a      	str	r2, [r3, #48]	; 0x30
 8001606:	e005      	b.n	8001614 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001608:	6978      	ldr	r0, [r7, #20]
 800160a:	f7ff f9a9 	bl	8000960 <vPortFree>
 800160e:	e001      	b.n	8001614 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d013      	beq.n	8001642 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800161a:	88fa      	ldrh	r2, [r7, #6]
 800161c:	2300      	movs	r3, #0
 800161e:	9303      	str	r3, [sp, #12]
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	9302      	str	r3, [sp, #8]
 8001624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001626:	9301      	str	r3, [sp, #4]
 8001628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	68b9      	ldr	r1, [r7, #8]
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	f000 f80e 	bl	8001652 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001636:	69f8      	ldr	r0, [r7, #28]
 8001638:	f000 f89a 	bl	8001770 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800163c:	2301      	movs	r3, #1
 800163e:	61bb      	str	r3, [r7, #24]
 8001640:	e002      	b.n	8001648 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001642:	f04f 33ff 	mov.w	r3, #4294967295
 8001646:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001648:	69bb      	ldr	r3, [r7, #24]
	}
 800164a:	4618      	mov	r0, r3
 800164c:	3720      	adds	r7, #32
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b088      	sub	sp, #32
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001662:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	461a      	mov	r2, r3
 800166a:	21a5      	movs	r1, #165	; 0xa5
 800166c:	f003 fb78 	bl	8004d60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800167a:	3b01      	subs	r3, #1
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	f023 0307 	bic.w	r3, r3, #7
 8001688:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	2b00      	cmp	r3, #0
 8001692:	d009      	beq.n	80016a8 <prvInitialiseNewTask+0x56>
 8001694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001698:	f383 8811 	msr	BASEPRI, r3
 800169c:	f3bf 8f6f 	isb	sy
 80016a0:	f3bf 8f4f 	dsb	sy
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	e7fe      	b.n	80016a6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d01f      	beq.n	80016ee <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
 80016b2:	e012      	b.n	80016da <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	4413      	add	r3, r2
 80016ba:	7819      	ldrb	r1, [r3, #0]
 80016bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	4413      	add	r3, r2
 80016c2:	3334      	adds	r3, #52	; 0x34
 80016c4:	460a      	mov	r2, r1
 80016c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80016c8:	68ba      	ldr	r2, [r7, #8]
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	4413      	add	r3, r2
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d006      	beq.n	80016e2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	3301      	adds	r3, #1
 80016d8:	61fb      	str	r3, [r7, #28]
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	2b09      	cmp	r3, #9
 80016de:	d9e9      	bls.n	80016b4 <prvInitialiseNewTask+0x62>
 80016e0:	e000      	b.n	80016e4 <prvInitialiseNewTask+0x92>
			{
				break;
 80016e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80016e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80016ec:	e003      	b.n	80016f6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80016ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80016f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	d901      	bls.n	8001700 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80016fc:	2304      	movs	r3, #4
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001702:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001704:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800170a:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 800170c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800170e:	2200      	movs	r2, #0
 8001710:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001714:	3304      	adds	r3, #4
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe fd82 	bl	8000220 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800171c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800171e:	3318      	adds	r3, #24
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe fd7d 	bl	8000220 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800172a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800172c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800172e:	f1c3 0205 	rsb	r2, r3, #5
 8001732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001734:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800173a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800173c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800173e:	2200      	movs	r2, #0
 8001740:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	68f9      	ldr	r1, [r7, #12]
 800174e:	69b8      	ldr	r0, [r7, #24]
 8001750:	f7fe fdfa 	bl	8000348 <pxPortInitialiseStack>
 8001754:	4602      	mov	r2, r0
 8001756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001758:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800175a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800175c:	2b00      	cmp	r3, #0
 800175e:	d002      	beq.n	8001766 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001766:	bf00      	nop
 8001768:	3720      	adds	r7, #32
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001770:	b5b0      	push	{r4, r5, r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af02      	add	r7, sp, #8
 8001776:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001778:	f7fe ff10 	bl	800059c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800177c:	4b3b      	ldr	r3, [pc, #236]	; (800186c <prvAddNewTaskToReadyList+0xfc>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	3301      	adds	r3, #1
 8001782:	4a3a      	ldr	r2, [pc, #232]	; (800186c <prvAddNewTaskToReadyList+0xfc>)
 8001784:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001786:	4b3a      	ldr	r3, [pc, #232]	; (8001870 <prvAddNewTaskToReadyList+0x100>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d109      	bne.n	80017a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800178e:	4a38      	ldr	r2, [pc, #224]	; (8001870 <prvAddNewTaskToReadyList+0x100>)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001794:	4b35      	ldr	r3, [pc, #212]	; (800186c <prvAddNewTaskToReadyList+0xfc>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d110      	bne.n	80017be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800179c:	f000 fc20 	bl	8001fe0 <prvInitialiseTaskLists>
 80017a0:	e00d      	b.n	80017be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80017a2:	4b34      	ldr	r3, [pc, #208]	; (8001874 <prvAddNewTaskToReadyList+0x104>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d109      	bne.n	80017be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80017aa:	4b31      	ldr	r3, [pc, #196]	; (8001870 <prvAddNewTaskToReadyList+0x100>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d802      	bhi.n	80017be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80017b8:	4a2d      	ldr	r2, [pc, #180]	; (8001870 <prvAddNewTaskToReadyList+0x100>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80017be:	4b2e      	ldr	r3, [pc, #184]	; (8001878 <prvAddNewTaskToReadyList+0x108>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	3301      	adds	r3, #1
 80017c4:	4a2c      	ldr	r2, [pc, #176]	; (8001878 <prvAddNewTaskToReadyList+0x108>)
 80017c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80017c8:	4b2b      	ldr	r3, [pc, #172]	; (8001878 <prvAddNewTaskToReadyList+0x108>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d016      	beq.n	8001804 <prvAddNewTaskToReadyList+0x94>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4618      	mov	r0, r3
 80017da:	f002 fd1b 	bl	8004214 <SEGGER_SYSVIEW_OnTaskCreate>
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	461d      	mov	r5, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	461c      	mov	r4, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	1ae3      	subs	r3, r4, r3
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	462b      	mov	r3, r5
 8001800:	f001 fb64 	bl	8002ecc <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4618      	mov	r0, r3
 8001808:	f002 fd8c 	bl	8004324 <SEGGER_SYSVIEW_OnTaskStartReady>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001810:	2201      	movs	r2, #1
 8001812:	409a      	lsls	r2, r3
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <prvAddNewTaskToReadyList+0x10c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4313      	orrs	r3, r2
 800181a:	4a18      	ldr	r2, [pc, #96]	; (800187c <prvAddNewTaskToReadyList+0x10c>)
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4a15      	ldr	r2, [pc, #84]	; (8001880 <prvAddNewTaskToReadyList+0x110>)
 800182c:	441a      	add	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3304      	adds	r3, #4
 8001832:	4619      	mov	r1, r3
 8001834:	4610      	mov	r0, r2
 8001836:	f7fe fd00 	bl	800023a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800183a:	f7fe fedd 	bl	80005f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800183e:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <prvAddNewTaskToReadyList+0x104>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00e      	beq.n	8001864 <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <prvAddNewTaskToReadyList+0x100>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001850:	429a      	cmp	r2, r3
 8001852:	d207      	bcs.n	8001864 <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <prvAddNewTaskToReadyList+0x114>)
 8001856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	f3bf 8f4f 	dsb	sy
 8001860:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bdb0      	pop	{r4, r5, r7, pc}
 800186c:	20012d54 	.word	0x20012d54
 8001870:	20012c7c 	.word	0x20012c7c
 8001874:	20012d60 	.word	0x20012d60
 8001878:	20012d70 	.word	0x20012d70
 800187c:	20012d5c 	.word	0x20012d5c
 8001880:	20012c80 	.word	0x20012c80
 8001884:	e000ed04 	.word	0xe000ed04

08001888 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800188e:	4b27      	ldr	r3, [pc, #156]	; (800192c <vTaskStartScheduler+0xa4>)
 8001890:	9301      	str	r3, [sp, #4]
 8001892:	2300      	movs	r3, #0
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	2300      	movs	r3, #0
 8001898:	2282      	movs	r2, #130	; 0x82
 800189a:	4925      	ldr	r1, [pc, #148]	; (8001930 <vTaskStartScheduler+0xa8>)
 800189c:	4825      	ldr	r0, [pc, #148]	; (8001934 <vTaskStartScheduler+0xac>)
 800189e:	f7ff fe97 	bl	80015d0 <xTaskCreate>
 80018a2:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d102      	bne.n	80018b0 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80018aa:	f000 fd45 	bl	8002338 <xTimerCreateTimerTask>
 80018ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d128      	bne.n	8001908 <vTaskStartScheduler+0x80>
 80018b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018ba:	f383 8811 	msr	BASEPRI, r3
 80018be:	f3bf 8f6f 	isb	sy
 80018c2:	f3bf 8f4f 	dsb	sy
 80018c6:	60bb      	str	r3, [r7, #8]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80018c8:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <vTaskStartScheduler+0xb0>)
 80018ca:	f04f 32ff 	mov.w	r2, #4294967295
 80018ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <vTaskStartScheduler+0xb4>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80018d6:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <vTaskStartScheduler+0xb8>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <vTaskStartScheduler+0xbc>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	3334      	adds	r3, #52	; 0x34
 80018e2:	2205      	movs	r2, #5
 80018e4:	4912      	ldr	r1, [pc, #72]	; (8001930 <vTaskStartScheduler+0xa8>)
 80018e6:	4618      	mov	r0, r3
 80018e8:	f003 fa20 	bl	8004d2c <memcmp>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d005      	beq.n	80018fe <vTaskStartScheduler+0x76>
 80018f2:	4b14      	ldr	r3, [pc, #80]	; (8001944 <vTaskStartScheduler+0xbc>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f002 fcd0 	bl	800429c <SEGGER_SYSVIEW_OnTaskStartExec>
 80018fc:	e001      	b.n	8001902 <vTaskStartScheduler+0x7a>
 80018fe:	f002 fc6d 	bl	80041dc <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001902:	f7fe fdad 	bl	8000460 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001906:	e00d      	b.n	8001924 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190e:	d109      	bne.n	8001924 <vTaskStartScheduler+0x9c>
 8001910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001914:	f383 8811 	msr	BASEPRI, r3
 8001918:	f3bf 8f6f 	isb	sy
 800191c:	f3bf 8f4f 	dsb	sy
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	e7fe      	b.n	8001922 <vTaskStartScheduler+0x9a>
}
 8001924:	bf00      	nop
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20012d78 	.word	0x20012d78
 8001930:	08004d88 	.word	0x08004d88
 8001934:	08001fb1 	.word	0x08001fb1
 8001938:	20012d74 	.word	0x20012d74
 800193c:	20012d60 	.word	0x20012d60
 8001940:	20012d58 	.word	0x20012d58
 8001944:	20012c7c 	.word	0x20012c7c

08001948 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <vTaskSuspendAll+0x18>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	3301      	adds	r3, #1
 8001952:	4a03      	ldr	r2, [pc, #12]	; (8001960 <vTaskSuspendAll+0x18>)
 8001954:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	20012d7c 	.word	0x20012d7c

08001964 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001972:	4b43      	ldr	r3, [pc, #268]	; (8001a80 <xTaskResumeAll+0x11c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <xTaskResumeAll+0x2a>
 800197a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800197e:	f383 8811 	msr	BASEPRI, r3
 8001982:	f3bf 8f6f 	isb	sy
 8001986:	f3bf 8f4f 	dsb	sy
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	e7fe      	b.n	800198c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800198e:	f7fe fe05 	bl	800059c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001992:	4b3b      	ldr	r3, [pc, #236]	; (8001a80 <xTaskResumeAll+0x11c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	3b01      	subs	r3, #1
 8001998:	4a39      	ldr	r2, [pc, #228]	; (8001a80 <xTaskResumeAll+0x11c>)
 800199a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800199c:	4b38      	ldr	r3, [pc, #224]	; (8001a80 <xTaskResumeAll+0x11c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d165      	bne.n	8001a70 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80019a4:	4b37      	ldr	r3, [pc, #220]	; (8001a84 <xTaskResumeAll+0x120>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d061      	beq.n	8001a70 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80019ac:	e032      	b.n	8001a14 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019ae:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <xTaskResumeAll+0x124>)
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	3318      	adds	r3, #24
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fc9a 	bl	80002f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	3304      	adds	r3, #4
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fc95 	bl	80002f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f002 fca9 	bl	8004324 <SEGGER_SYSVIEW_OnTaskStartReady>
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d6:	2201      	movs	r2, #1
 80019d8:	409a      	lsls	r2, r3
 80019da:	4b2c      	ldr	r3, [pc, #176]	; (8001a8c <xTaskResumeAll+0x128>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4313      	orrs	r3, r2
 80019e0:	4a2a      	ldr	r2, [pc, #168]	; (8001a8c <xTaskResumeAll+0x128>)
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e8:	4613      	mov	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4a27      	ldr	r2, [pc, #156]	; (8001a90 <xTaskResumeAll+0x12c>)
 80019f2:	441a      	add	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	3304      	adds	r3, #4
 80019f8:	4619      	mov	r1, r3
 80019fa:	4610      	mov	r0, r2
 80019fc:	f7fe fc1d 	bl	800023a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a04:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <xTaskResumeAll+0x130>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d302      	bcc.n	8001a14 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8001a0e:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <xTaskResumeAll+0x134>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a14:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <xTaskResumeAll+0x124>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1c8      	bne.n	80019ae <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001a22:	f000 fb59 	bl	80020d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001a26:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <xTaskResumeAll+0x138>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d010      	beq.n	8001a54 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001a32:	f000 f859 	bl	8001ae8 <xTaskIncrementTick>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d002      	beq.n	8001a42 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8001a3c:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <xTaskResumeAll+0x134>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3b01      	subs	r3, #1
 8001a46:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f1      	bne.n	8001a32 <xTaskResumeAll+0xce>

						xPendedTicks = 0;
 8001a4e:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <xTaskResumeAll+0x138>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001a54:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <xTaskResumeAll+0x134>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d009      	beq.n	8001a70 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <xTaskResumeAll+0x13c>)
 8001a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	f3bf 8f4f 	dsb	sy
 8001a6c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001a70:	f7fe fdc2 	bl	80005f8 <vPortExitCritical>

	return xAlreadyYielded;
 8001a74:	68bb      	ldr	r3, [r7, #8]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20012d7c 	.word	0x20012d7c
 8001a84:	20012d54 	.word	0x20012d54
 8001a88:	20012d14 	.word	0x20012d14
 8001a8c:	20012d5c 	.word	0x20012d5c
 8001a90:	20012c80 	.word	0x20012c80
 8001a94:	20012c7c 	.word	0x20012c7c
 8001a98:	20012d68 	.word	0x20012d68
 8001a9c:	20012d64 	.word	0x20012d64
 8001aa0:	e000ed04 	.word	0xe000ed04

08001aa4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <xTaskGetTickCount+0x1c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001ab0:	687b      	ldr	r3, [r7, #4]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20012d58 	.word	0x20012d58

08001ac4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001aca:	f7fe fe43 	bl	8000754 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8001ad2:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <xTaskGetTickCountFromISR+0x20>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001ad8:	683b      	ldr	r3, [r7, #0]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20012d58 	.word	0x20012d58

08001ae8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001af2:	4b50      	ldr	r3, [pc, #320]	; (8001c34 <xTaskIncrementTick+0x14c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f040 8091 	bne.w	8001c1e <xTaskIncrementTick+0x136>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001afc:	4b4e      	ldr	r3, [pc, #312]	; (8001c38 <xTaskIncrementTick+0x150>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	3301      	adds	r3, #1
 8001b02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001b04:	4a4c      	ldr	r2, [pc, #304]	; (8001c38 <xTaskIncrementTick+0x150>)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d11f      	bne.n	8001b50 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001b10:	4b4a      	ldr	r3, [pc, #296]	; (8001c3c <xTaskIncrementTick+0x154>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d009      	beq.n	8001b2e <xTaskIncrementTick+0x46>
 8001b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b1e:	f383 8811 	msr	BASEPRI, r3
 8001b22:	f3bf 8f6f 	isb	sy
 8001b26:	f3bf 8f4f 	dsb	sy
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	e7fe      	b.n	8001b2c <xTaskIncrementTick+0x44>
 8001b2e:	4b43      	ldr	r3, [pc, #268]	; (8001c3c <xTaskIncrementTick+0x154>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	4b42      	ldr	r3, [pc, #264]	; (8001c40 <xTaskIncrementTick+0x158>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a40      	ldr	r2, [pc, #256]	; (8001c3c <xTaskIncrementTick+0x154>)
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	4a40      	ldr	r2, [pc, #256]	; (8001c40 <xTaskIncrementTick+0x158>)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	4b40      	ldr	r3, [pc, #256]	; (8001c44 <xTaskIncrementTick+0x15c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	3301      	adds	r3, #1
 8001b48:	4a3e      	ldr	r2, [pc, #248]	; (8001c44 <xTaskIncrementTick+0x15c>)
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	f000 fac4 	bl	80020d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001b50:	4b3d      	ldr	r3, [pc, #244]	; (8001c48 <xTaskIncrementTick+0x160>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d34c      	bcc.n	8001bf4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b5a:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <xTaskIncrementTick+0x154>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d104      	bne.n	8001b6e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b64:	4b38      	ldr	r3, [pc, #224]	; (8001c48 <xTaskIncrementTick+0x160>)
 8001b66:	f04f 32ff 	mov.w	r2, #4294967295
 8001b6a:	601a      	str	r2, [r3, #0]
					break;
 8001b6c:	e042      	b.n	8001bf4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b6e:	4b33      	ldr	r3, [pc, #204]	; (8001c3c <xTaskIncrementTick+0x154>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d203      	bcs.n	8001b8e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001b86:	4a30      	ldr	r2, [pc, #192]	; (8001c48 <xTaskIncrementTick+0x160>)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001b8c:	e032      	b.n	8001bf4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	3304      	adds	r3, #4
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fbae 	bl	80002f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d004      	beq.n	8001baa <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	3318      	adds	r3, #24
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fba5 	bl	80002f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f002 fbb9 	bl	8004324 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	409a      	lsls	r2, r3
 8001bba:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <xTaskIncrementTick+0x164>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	4a22      	ldr	r2, [pc, #136]	; (8001c4c <xTaskIncrementTick+0x164>)
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4a1f      	ldr	r2, [pc, #124]	; (8001c50 <xTaskIncrementTick+0x168>)
 8001bd2:	441a      	add	r2, r3
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4610      	mov	r0, r2
 8001bdc:	f7fe fb2d 	bl	800023a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001be4:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <xTaskIncrementTick+0x16c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d3b5      	bcc.n	8001b5a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001bf2:	e7b2      	b.n	8001b5a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001bf4:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <xTaskIncrementTick+0x16c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bfa:	4915      	ldr	r1, [pc, #84]	; (8001c50 <xTaskIncrementTick+0x168>)
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	440b      	add	r3, r1
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d901      	bls.n	8001c10 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <xTaskIncrementTick+0x170>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d007      	beq.n	8001c28 <xTaskIncrementTick+0x140>
			{
				xSwitchRequired = pdTRUE;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	e004      	b.n	8001c28 <xTaskIncrementTick+0x140>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <xTaskIncrementTick+0x174>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	3301      	adds	r3, #1
 8001c24:	4a0d      	ldr	r2, [pc, #52]	; (8001c5c <xTaskIncrementTick+0x174>)
 8001c26:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001c28:	697b      	ldr	r3, [r7, #20]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20012d7c 	.word	0x20012d7c
 8001c38:	20012d58 	.word	0x20012d58
 8001c3c:	20012d0c 	.word	0x20012d0c
 8001c40:	20012d10 	.word	0x20012d10
 8001c44:	20012d6c 	.word	0x20012d6c
 8001c48:	20012d74 	.word	0x20012d74
 8001c4c:	20012d5c 	.word	0x20012d5c
 8001c50:	20012c80 	.word	0x20012c80
 8001c54:	20012c7c 	.word	0x20012c7c
 8001c58:	20012d68 	.word	0x20012d68
 8001c5c:	20012d64 	.word	0x20012d64

08001c60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001c66:	4b2f      	ldr	r3, [pc, #188]	; (8001d24 <vTaskSwitchContext+0xc4>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001c6e:	4b2e      	ldr	r3, [pc, #184]	; (8001d28 <vTaskSwitchContext+0xc8>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001c74:	e051      	b.n	8001d1a <vTaskSwitchContext+0xba>
		xYieldPending = pdFALSE;
 8001c76:	4b2c      	ldr	r3, [pc, #176]	; (8001d28 <vTaskSwitchContext+0xc8>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c7c:	4b2b      	ldr	r3, [pc, #172]	; (8001d2c <vTaskSwitchContext+0xcc>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	fab3 f383 	clz	r3, r3
 8001c88:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001c8a:	7afb      	ldrb	r3, [r7, #11]
 8001c8c:	f1c3 031f 	rsb	r3, r3, #31
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	4927      	ldr	r1, [pc, #156]	; (8001d30 <vTaskSwitchContext+0xd0>)
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	440b      	add	r3, r1
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d109      	bne.n	8001cba <vTaskSwitchContext+0x5a>
	__asm volatile
 8001ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001caa:	f383 8811 	msr	BASEPRI, r3
 8001cae:	f3bf 8f6f 	isb	sy
 8001cb2:	f3bf 8f4f 	dsb	sy
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	e7fe      	b.n	8001cb8 <vTaskSwitchContext+0x58>
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4a1a      	ldr	r2, [pc, #104]	; (8001d30 <vTaskSwitchContext+0xd0>)
 8001cc6:	4413      	add	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	605a      	str	r2, [r3, #4]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	3308      	adds	r3, #8
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d104      	bne.n	8001cea <vTaskSwitchContext+0x8a>
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	4a10      	ldr	r2, [pc, #64]	; (8001d34 <vTaskSwitchContext+0xd4>)
 8001cf2:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <vTaskSwitchContext+0xd4>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	3334      	adds	r3, #52	; 0x34
 8001cfa:	2205      	movs	r2, #5
 8001cfc:	490e      	ldr	r1, [pc, #56]	; (8001d38 <vTaskSwitchContext+0xd8>)
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f003 f814 	bl	8004d2c <memcmp>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d005      	beq.n	8001d16 <vTaskSwitchContext+0xb6>
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <vTaskSwitchContext+0xd4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f002 fac4 	bl	800429c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001d14:	e001      	b.n	8001d1a <vTaskSwitchContext+0xba>
		traceTASK_SWITCHED_IN();
 8001d16:	f002 fa61 	bl	80041dc <SEGGER_SYSVIEW_OnIdle>
}
 8001d1a:	bf00      	nop
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20012d7c 	.word	0x20012d7c
 8001d28:	20012d68 	.word	0x20012d68
 8001d2c:	20012d5c 	.word	0x20012d5c
 8001d30:	20012c80 	.word	0x20012c80
 8001d34:	20012c7c 	.word	0x20012c7c
 8001d38:	08004d88 	.word	0x08004d88

08001d3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d109      	bne.n	8001d60 <vTaskPlaceOnEventList+0x24>
 8001d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d50:	f383 8811 	msr	BASEPRI, r3
 8001d54:	f3bf 8f6f 	isb	sy
 8001d58:	f3bf 8f4f 	dsb	sy
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	e7fe      	b.n	8001d5e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001d60:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <vTaskPlaceOnEventList+0x44>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	3318      	adds	r3, #24
 8001d66:	4619      	mov	r1, r3
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7fe fa8a 	bl	8000282 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001d6e:	2101      	movs	r1, #1
 8001d70:	6838      	ldr	r0, [r7, #0]
 8001d72:	f000 fa7b 	bl	800226c <prvAddCurrentTaskToDelayedList>
}
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20012c7c 	.word	0x20012c7c

08001d84 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d109      	bne.n	8001daa <vTaskPlaceOnEventListRestricted+0x26>
 8001d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d9a:	f383 8811 	msr	BASEPRI, r3
 8001d9e:	f3bf 8f6f 	isb	sy
 8001da2:	f3bf 8f4f 	dsb	sy
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	e7fe      	b.n	8001da8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001daa:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <vTaskPlaceOnEventListRestricted+0x58>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	3318      	adds	r3, #24
 8001db0:	4619      	mov	r1, r3
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f7fe fa41 	bl	800023a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d002      	beq.n	8001dc4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001dc4:	2024      	movs	r0, #36	; 0x24
 8001dc6:	f001 fd87 	bl	80038d8 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	68b8      	ldr	r0, [r7, #8]
 8001dce:	f000 fa4d 	bl	800226c <prvAddCurrentTaskToDelayedList>
	}
 8001dd2:	bf00      	nop
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20012c7c 	.word	0x20012c7c

08001de0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d109      	bne.n	8001e0a <xTaskRemoveFromEventList+0x2a>
 8001df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dfa:	f383 8811 	msr	BASEPRI, r3
 8001dfe:	f3bf 8f6f 	isb	sy
 8001e02:	f3bf 8f4f 	dsb	sy
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	e7fe      	b.n	8001e08 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	3318      	adds	r3, #24
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fa70 	bl	80002f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e14:	4b1f      	ldr	r3, [pc, #124]	; (8001e94 <xTaskRemoveFromEventList+0xb4>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d120      	bne.n	8001e5e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	3304      	adds	r3, #4
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe fa67 	bl	80002f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f002 fa7b 	bl	8004324 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e32:	2201      	movs	r2, #1
 8001e34:	409a      	lsls	r2, r3
 8001e36:	4b18      	ldr	r3, [pc, #96]	; (8001e98 <xTaskRemoveFromEventList+0xb8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	4a16      	ldr	r2, [pc, #88]	; (8001e98 <xTaskRemoveFromEventList+0xb8>)
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4a13      	ldr	r2, [pc, #76]	; (8001e9c <xTaskRemoveFromEventList+0xbc>)
 8001e4e:	441a      	add	r2, r3
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	3304      	adds	r3, #4
 8001e54:	4619      	mov	r1, r3
 8001e56:	4610      	mov	r0, r2
 8001e58:	f7fe f9ef 	bl	800023a <vListInsertEnd>
 8001e5c:	e005      	b.n	8001e6a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	3318      	adds	r3, #24
 8001e62:	4619      	mov	r1, r3
 8001e64:	480e      	ldr	r0, [pc, #56]	; (8001ea0 <xTaskRemoveFromEventList+0xc0>)
 8001e66:	f7fe f9e8 	bl	800023a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <xTaskRemoveFromEventList+0xc4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d905      	bls.n	8001e84 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <xTaskRemoveFromEventList+0xc8>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	e001      	b.n	8001e88 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001e88:	697b      	ldr	r3, [r7, #20]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20012d7c 	.word	0x20012d7c
 8001e98:	20012d5c 	.word	0x20012d5c
 8001e9c:	20012c80 	.word	0x20012c80
 8001ea0:	20012d14 	.word	0x20012d14
 8001ea4:	20012c7c 	.word	0x20012c7c
 8001ea8:	20012d68 	.word	0x20012d68

08001eac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <vTaskInternalSetTimeOutState+0x24>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <vTaskInternalSetTimeOutState+0x28>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	605a      	str	r2, [r3, #4]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	20012d6c 	.word	0x20012d6c
 8001ed4:	20012d58 	.word	0x20012d58

08001ed8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d109      	bne.n	8001efc <xTaskCheckForTimeOut+0x24>
 8001ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eec:	f383 8811 	msr	BASEPRI, r3
 8001ef0:	f3bf 8f6f 	isb	sy
 8001ef4:	f3bf 8f4f 	dsb	sy
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	e7fe      	b.n	8001efa <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d109      	bne.n	8001f16 <xTaskCheckForTimeOut+0x3e>
 8001f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f06:	f383 8811 	msr	BASEPRI, r3
 8001f0a:	f3bf 8f6f 	isb	sy
 8001f0e:	f3bf 8f4f 	dsb	sy
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	e7fe      	b.n	8001f14 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8001f16:	f7fe fb41 	bl	800059c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001f1a:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <xTaskCheckForTimeOut+0xb8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f32:	d102      	bne.n	8001f3a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61fb      	str	r3, [r7, #28]
 8001f38:	e023      	b.n	8001f82 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <xTaskCheckForTimeOut+0xbc>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d007      	beq.n	8001f56 <xTaskCheckForTimeOut+0x7e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d802      	bhi.n	8001f56 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001f50:	2301      	movs	r3, #1
 8001f52:	61fb      	str	r3, [r7, #28]
 8001f54:	e015      	b.n	8001f82 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d90b      	bls.n	8001f78 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	1ad2      	subs	r2, r2, r3
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ff9d 	bl	8001eac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	e004      	b.n	8001f82 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001f82:	f7fe fb39 	bl	80005f8 <vPortExitCritical>

	return xReturn;
 8001f86:	69fb      	ldr	r3, [r7, #28]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3720      	adds	r7, #32
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20012d58 	.word	0x20012d58
 8001f94:	20012d6c 	.word	0x20012d6c

08001f98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001f9c:	4b03      	ldr	r3, [pc, #12]	; (8001fac <vTaskMissedYield+0x14>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	20012d68 	.word	0x20012d68

08001fb0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001fb8:	f000 f852 	bl	8002060 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <prvIdleTask+0x28>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d9f9      	bls.n	8001fb8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <prvIdleTask+0x2c>)
 8001fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	f3bf 8f4f 	dsb	sy
 8001fd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001fd4:	e7f0      	b.n	8001fb8 <prvIdleTask+0x8>
 8001fd6:	bf00      	nop
 8001fd8:	20012c80 	.word	0x20012c80
 8001fdc:	e000ed04 	.word	0xe000ed04

08001fe0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	607b      	str	r3, [r7, #4]
 8001fea:	e00c      	b.n	8002006 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4a12      	ldr	r2, [pc, #72]	; (8002040 <prvInitialiseTaskLists+0x60>)
 8001ff8:	4413      	add	r3, r2
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe f8f0 	bl	80001e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3301      	adds	r3, #1
 8002004:	607b      	str	r3, [r7, #4]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b04      	cmp	r3, #4
 800200a:	d9ef      	bls.n	8001fec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800200c:	480d      	ldr	r0, [pc, #52]	; (8002044 <prvInitialiseTaskLists+0x64>)
 800200e:	f7fe f8e7 	bl	80001e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002012:	480d      	ldr	r0, [pc, #52]	; (8002048 <prvInitialiseTaskLists+0x68>)
 8002014:	f7fe f8e4 	bl	80001e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002018:	480c      	ldr	r0, [pc, #48]	; (800204c <prvInitialiseTaskLists+0x6c>)
 800201a:	f7fe f8e1 	bl	80001e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800201e:	480c      	ldr	r0, [pc, #48]	; (8002050 <prvInitialiseTaskLists+0x70>)
 8002020:	f7fe f8de 	bl	80001e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002024:	480b      	ldr	r0, [pc, #44]	; (8002054 <prvInitialiseTaskLists+0x74>)
 8002026:	f7fe f8db 	bl	80001e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <prvInitialiseTaskLists+0x78>)
 800202c:	4a05      	ldr	r2, [pc, #20]	; (8002044 <prvInitialiseTaskLists+0x64>)
 800202e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002030:	4b0a      	ldr	r3, [pc, #40]	; (800205c <prvInitialiseTaskLists+0x7c>)
 8002032:	4a05      	ldr	r2, [pc, #20]	; (8002048 <prvInitialiseTaskLists+0x68>)
 8002034:	601a      	str	r2, [r3, #0]
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20012c80 	.word	0x20012c80
 8002044:	20012ce4 	.word	0x20012ce4
 8002048:	20012cf8 	.word	0x20012cf8
 800204c:	20012d14 	.word	0x20012d14
 8002050:	20012d28 	.word	0x20012d28
 8002054:	20012d40 	.word	0x20012d40
 8002058:	20012d0c 	.word	0x20012d0c
 800205c:	20012d10 	.word	0x20012d10

08002060 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002066:	e019      	b.n	800209c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002068:	f7fe fa98 	bl	800059c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800206c:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <prvCheckTasksWaitingTermination+0x4c>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3304      	adds	r3, #4
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe f93b 	bl	80002f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800207e:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <prvCheckTasksWaitingTermination+0x50>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	3b01      	subs	r3, #1
 8002084:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <prvCheckTasksWaitingTermination+0x50>)
 8002086:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002088:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <prvCheckTasksWaitingTermination+0x54>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	3b01      	subs	r3, #1
 800208e:	4a09      	ldr	r2, [pc, #36]	; (80020b4 <prvCheckTasksWaitingTermination+0x54>)
 8002090:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002092:	f7fe fab1 	bl	80005f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f80e 	bl	80020b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <prvCheckTasksWaitingTermination+0x54>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1e1      	bne.n	8002068 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	20012d28 	.word	0x20012d28
 80020b0:	20012d54 	.word	0x20012d54
 80020b4:	20012d3c 	.word	0x20012d3c

080020b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe fc4b 	bl	8000960 <vPortFree>
			vPortFree( pxTCB );
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7fe fc48 	bl	8000960 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020de:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <prvResetNextTaskUnblockTime+0x38>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d104      	bne.n	80020f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80020e8:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <prvResetNextTaskUnblockTime+0x3c>)
 80020ea:	f04f 32ff 	mov.w	r2, #4294967295
 80020ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80020f0:	e008      	b.n	8002104 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020f2:	4b07      	ldr	r3, [pc, #28]	; (8002110 <prvResetNextTaskUnblockTime+0x38>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	4a04      	ldr	r2, [pc, #16]	; (8002114 <prvResetNextTaskUnblockTime+0x3c>)
 8002102:	6013      	str	r3, [r2, #0]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	20012d0c 	.word	0x20012d0c
 8002114:	20012d74 	.word	0x20012d74

08002118 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <xTaskGetSchedulerState+0x34>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d102      	bne.n	800212c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002126:	2301      	movs	r3, #1
 8002128:	607b      	str	r3, [r7, #4]
 800212a:	e008      	b.n	800213e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <xTaskGetSchedulerState+0x38>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d102      	bne.n	800213a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002134:	2302      	movs	r3, #2
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	e001      	b.n	800213e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800213a:	2300      	movs	r3, #0
 800213c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800213e:	687b      	ldr	r3, [r7, #4]
	}
 8002140:	4618      	mov	r0, r3
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	20012d60 	.word	0x20012d60
 8002150:	20012d7c 	.word	0x20012d7c

08002154 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d075      	beq.n	8002256 <xTaskPriorityDisinherit+0x102>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800216a:	4b3d      	ldr	r3, [pc, #244]	; (8002260 <xTaskPriorityDisinherit+0x10c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	429a      	cmp	r2, r3
 8002172:	d009      	beq.n	8002188 <xTaskPriorityDisinherit+0x34>
 8002174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002178:	f383 8811 	msr	BASEPRI, r3
 800217c:	f3bf 8f6f 	isb	sy
 8002180:	f3bf 8f4f 	dsb	sy
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	e7fe      	b.n	8002186 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218c:	2b00      	cmp	r3, #0
 800218e:	d109      	bne.n	80021a4 <xTaskPriorityDisinherit+0x50>
 8002190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002194:	f383 8811 	msr	BASEPRI, r3
 8002198:	f3bf 8f6f 	isb	sy
 800219c:	f3bf 8f4f 	dsb	sy
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	e7fe      	b.n	80021a2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a8:	1e5a      	subs	r2, r3, #1
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d04d      	beq.n	8002256 <xTaskPriorityDisinherit+0x102>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d149      	bne.n	8002256 <xTaskPriorityDisinherit+0x102>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	3304      	adds	r3, #4
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe f894 	bl	80002f4 <uxListRemove>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d115      	bne.n	80021fe <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021d6:	4923      	ldr	r1, [pc, #140]	; (8002264 <xTaskPriorityDisinherit+0x110>)
 80021d8:	4613      	mov	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10a      	bne.n	80021fe <xTaskPriorityDisinherit+0xaa>
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	2201      	movs	r2, #1
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43da      	mvns	r2, r3
 80021f4:	4b1c      	ldr	r3, [pc, #112]	; (8002268 <xTaskPriorityDisinherit+0x114>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4013      	ands	r3, r2
 80021fa:	4a1b      	ldr	r2, [pc, #108]	; (8002268 <xTaskPriorityDisinherit+0x114>)
 80021fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4619      	mov	r1, r3
 8002202:	204a      	movs	r0, #74	; 0x4a
 8002204:	f001 fb86 	bl	8003914 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002214:	f1c3 0205 	rsb	r2, r3, #5
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4618      	mov	r0, r3
 8002220:	f002 f880 	bl	8004324 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	2201      	movs	r2, #1
 800222a:	409a      	lsls	r2, r3
 800222c:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <xTaskPriorityDisinherit+0x114>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4313      	orrs	r3, r2
 8002232:	4a0d      	ldr	r2, [pc, #52]	; (8002268 <xTaskPriorityDisinherit+0x114>)
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4a08      	ldr	r2, [pc, #32]	; (8002264 <xTaskPriorityDisinherit+0x110>)
 8002244:	441a      	add	r2, r3
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	3304      	adds	r3, #4
 800224a:	4619      	mov	r1, r3
 800224c:	4610      	mov	r0, r2
 800224e:	f7fd fff4 	bl	800023a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002252:	2301      	movs	r3, #1
 8002254:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002256:	697b      	ldr	r3, [r7, #20]
	}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20012c7c 	.word	0x20012c7c
 8002264:	20012c80 	.word	0x20012c80
 8002268:	20012d5c 	.word	0x20012d5c

0800226c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002276:	4b29      	ldr	r3, [pc, #164]	; (800231c <prvAddCurrentTaskToDelayedList+0xb0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800227c:	4b28      	ldr	r3, [pc, #160]	; (8002320 <prvAddCurrentTaskToDelayedList+0xb4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	3304      	adds	r3, #4
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe f836 	bl	80002f4 <uxListRemove>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10b      	bne.n	80022a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800228e:	4b24      	ldr	r3, [pc, #144]	; (8002320 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002294:	2201      	movs	r2, #1
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43da      	mvns	r2, r3
 800229c:	4b21      	ldr	r3, [pc, #132]	; (8002324 <prvAddCurrentTaskToDelayedList+0xb8>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4013      	ands	r3, r2
 80022a2:	4a20      	ldr	r2, [pc, #128]	; (8002324 <prvAddCurrentTaskToDelayedList+0xb8>)
 80022a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ac:	d10a      	bne.n	80022c4 <prvAddCurrentTaskToDelayedList+0x58>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d007      	beq.n	80022c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022b4:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <prvAddCurrentTaskToDelayedList+0xb4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	3304      	adds	r3, #4
 80022ba:	4619      	mov	r1, r3
 80022bc:	481a      	ldr	r0, [pc, #104]	; (8002328 <prvAddCurrentTaskToDelayedList+0xbc>)
 80022be:	f7fd ffbc 	bl	800023a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80022c2:	e026      	b.n	8002312 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80022cc:	4b14      	ldr	r3, [pc, #80]	; (8002320 <prvAddCurrentTaskToDelayedList+0xb4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d209      	bcs.n	80022f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022dc:	4b13      	ldr	r3, [pc, #76]	; (800232c <prvAddCurrentTaskToDelayedList+0xc0>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <prvAddCurrentTaskToDelayedList+0xb4>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	3304      	adds	r3, #4
 80022e6:	4619      	mov	r1, r3
 80022e8:	4610      	mov	r0, r2
 80022ea:	f7fd ffca 	bl	8000282 <vListInsert>
}
 80022ee:	e010      	b.n	8002312 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022f0:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <prvAddCurrentTaskToDelayedList+0xc4>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <prvAddCurrentTaskToDelayedList+0xb4>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	3304      	adds	r3, #4
 80022fa:	4619      	mov	r1, r3
 80022fc:	4610      	mov	r0, r2
 80022fe:	f7fd ffc0 	bl	8000282 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002302:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	429a      	cmp	r2, r3
 800230a:	d202      	bcs.n	8002312 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800230c:	4a09      	ldr	r2, [pc, #36]	; (8002334 <prvAddCurrentTaskToDelayedList+0xc8>)
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	6013      	str	r3, [r2, #0]
}
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20012d58 	.word	0x20012d58
 8002320:	20012c7c 	.word	0x20012c7c
 8002324:	20012d5c 	.word	0x20012d5c
 8002328:	20012d40 	.word	0x20012d40
 800232c:	20012d10 	.word	0x20012d10
 8002330:	20012d0c 	.word	0x20012d0c
 8002334:	20012d74 	.word	0x20012d74

08002338 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800233e:	2300      	movs	r3, #0
 8002340:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002342:	f000 fad1 	bl	80028e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002346:	4b11      	ldr	r3, [pc, #68]	; (800238c <xTimerCreateTimerTask+0x54>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00b      	beq.n	8002366 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <xTimerCreateTimerTask+0x58>)
 8002350:	9301      	str	r3, [sp, #4]
 8002352:	2302      	movs	r3, #2
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	2300      	movs	r3, #0
 8002358:	f44f 7282 	mov.w	r2, #260	; 0x104
 800235c:	490d      	ldr	r1, [pc, #52]	; (8002394 <xTimerCreateTimerTask+0x5c>)
 800235e:	480e      	ldr	r0, [pc, #56]	; (8002398 <xTimerCreateTimerTask+0x60>)
 8002360:	f7ff f936 	bl	80015d0 <xTaskCreate>
 8002364:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d109      	bne.n	8002380 <xTimerCreateTimerTask+0x48>
 800236c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002370:	f383 8811 	msr	BASEPRI, r3
 8002374:	f3bf 8f6f 	isb	sy
 8002378:	f3bf 8f4f 	dsb	sy
 800237c:	603b      	str	r3, [r7, #0]
 800237e:	e7fe      	b.n	800237e <xTimerCreateTimerTask+0x46>
	return xReturn;
 8002380:	687b      	ldr	r3, [r7, #4]
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20012db0 	.word	0x20012db0
 8002390:	20012db4 	.word	0x20012db4
 8002394:	08004d90 	.word	0x08004d90
 8002398:	080024cd 	.word	0x080024cd

0800239c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08a      	sub	sp, #40	; 0x28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
 80023a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d109      	bne.n	80023c8 <xTimerGenericCommand+0x2c>
 80023b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b8:	f383 8811 	msr	BASEPRI, r3
 80023bc:	f3bf 8f6f 	isb	sy
 80023c0:	f3bf 8f4f 	dsb	sy
 80023c4:	623b      	str	r3, [r7, #32]
 80023c6:	e7fe      	b.n	80023c6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80023c8:	4b19      	ldr	r3, [pc, #100]	; (8002430 <xTimerGenericCommand+0x94>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d02a      	beq.n	8002426 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b05      	cmp	r3, #5
 80023e0:	dc18      	bgt.n	8002414 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80023e2:	f7ff fe99 	bl	8002118 <xTaskGetSchedulerState>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d109      	bne.n	8002400 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80023ec:	4b10      	ldr	r3, [pc, #64]	; (8002430 <xTimerGenericCommand+0x94>)
 80023ee:	6818      	ldr	r0, [r3, #0]
 80023f0:	f107 0114 	add.w	r1, r7, #20
 80023f4:	2300      	movs	r3, #0
 80023f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023f8:	f7fe fc94 	bl	8000d24 <xQueueGenericSend>
 80023fc:	6278      	str	r0, [r7, #36]	; 0x24
 80023fe:	e012      	b.n	8002426 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <xTimerGenericCommand+0x94>)
 8002402:	6818      	ldr	r0, [r3, #0]
 8002404:	f107 0114 	add.w	r1, r7, #20
 8002408:	2300      	movs	r3, #0
 800240a:	2200      	movs	r2, #0
 800240c:	f7fe fc8a 	bl	8000d24 <xQueueGenericSend>
 8002410:	6278      	str	r0, [r7, #36]	; 0x24
 8002412:	e008      	b.n	8002426 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002414:	4b06      	ldr	r3, [pc, #24]	; (8002430 <xTimerGenericCommand+0x94>)
 8002416:	6818      	ldr	r0, [r3, #0]
 8002418:	f107 0114 	add.w	r1, r7, #20
 800241c:	2300      	movs	r3, #0
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	f7fe fda2 	bl	8000f68 <xQueueGenericSendFromISR>
 8002424:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002428:	4618      	mov	r0, r3
 800242a:	3728      	adds	r7, #40	; 0x28
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20012db0 	.word	0x20012db0

08002434 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af02      	add	r7, sp, #8
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800243e:	4b22      	ldr	r3, [pc, #136]	; (80024c8 <prvProcessExpiredTimer+0x94>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	3304      	adds	r3, #4
 800244c:	4618      	mov	r0, r3
 800244e:	f7fd ff51 	bl	80002f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d021      	beq.n	80024a4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	699a      	ldr	r2, [r3, #24]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	18d1      	adds	r1, r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	6978      	ldr	r0, [r7, #20]
 800246e:	f000 f8d1 	bl	8002614 <prvInsertTimerInActiveList>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d01e      	beq.n	80024b6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002478:	2300      	movs	r3, #0
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	2300      	movs	r3, #0
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	2100      	movs	r1, #0
 8002482:	6978      	ldr	r0, [r7, #20]
 8002484:	f7ff ff8a 	bl	800239c <xTimerGenericCommand>
 8002488:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d112      	bne.n	80024b6 <prvProcessExpiredTimer+0x82>
 8002490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002494:	f383 8811 	msr	BASEPRI, r3
 8002498:	f3bf 8f6f 	isb	sy
 800249c:	f3bf 8f4f 	dsb	sy
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	e7fe      	b.n	80024a2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80024aa:	f023 0301 	bic.w	r3, r3, #1
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	6978      	ldr	r0, [r7, #20]
 80024bc:	4798      	blx	r3
}
 80024be:	bf00      	nop
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20012da8 	.word	0x20012da8

080024cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80024d4:	f107 0308 	add.w	r3, r7, #8
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 f857 	bl	800258c <prvGetNextExpireTime>
 80024de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	4619      	mov	r1, r3
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 f803 	bl	80024f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80024ea:	f000 f8d5 	bl	8002698 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80024ee:	e7f1      	b.n	80024d4 <prvTimerTask+0x8>

080024f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80024fa:	f7ff fa25 	bl	8001948 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80024fe:	f107 0308 	add.w	r3, r7, #8
 8002502:	4618      	mov	r0, r3
 8002504:	f000 f866 	bl	80025d4 <prvSampleTimeNow>
 8002508:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d130      	bne.n	8002572 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10a      	bne.n	800252c <prvProcessTimerOrBlockTask+0x3c>
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	429a      	cmp	r2, r3
 800251c:	d806      	bhi.n	800252c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800251e:	f7ff fa21 	bl	8001964 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002522:	68f9      	ldr	r1, [r7, #12]
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ff85 	bl	8002434 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800252a:	e024      	b.n	8002576 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d008      	beq.n	8002544 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002532:	4b13      	ldr	r3, [pc, #76]	; (8002580 <prvProcessTimerOrBlockTask+0x90>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <prvProcessTimerOrBlockTask+0x50>
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <prvProcessTimerOrBlockTask+0x52>
 8002540:	2300      	movs	r3, #0
 8002542:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002544:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <prvProcessTimerOrBlockTask+0x94>)
 8002546:	6818      	ldr	r0, [r3, #0]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	4619      	mov	r1, r3
 8002552:	f7ff f809 	bl	8001568 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002556:	f7ff fa05 	bl	8001964 <xTaskResumeAll>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10a      	bne.n	8002576 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002560:	4b09      	ldr	r3, [pc, #36]	; (8002588 <prvProcessTimerOrBlockTask+0x98>)
 8002562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	f3bf 8f4f 	dsb	sy
 800256c:	f3bf 8f6f 	isb	sy
}
 8002570:	e001      	b.n	8002576 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002572:	f7ff f9f7 	bl	8001964 <xTaskResumeAll>
}
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20012dac 	.word	0x20012dac
 8002584:	20012db0 	.word	0x20012db0
 8002588:	e000ed04 	.word	0xe000ed04

0800258c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002594:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <prvGetNextExpireTime+0x44>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <prvGetNextExpireTime+0x16>
 800259e:	2201      	movs	r2, #1
 80025a0:	e000      	b.n	80025a4 <prvGetNextExpireTime+0x18>
 80025a2:	2200      	movs	r2, #0
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d105      	bne.n	80025bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80025b0:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <prvGetNextExpireTime+0x44>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	e001      	b.n	80025c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80025c0:	68fb      	ldr	r3, [r7, #12]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	20012da8 	.word	0x20012da8

080025d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80025dc:	f7ff fa62 	bl	8001aa4 <xTaskGetTickCount>
 80025e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80025e2:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <prvSampleTimeNow+0x3c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d205      	bcs.n	80025f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80025ec:	f000 f918 	bl	8002820 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	e002      	b.n	80025fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80025fe:	4a04      	ldr	r2, [pc, #16]	; (8002610 <prvSampleTimeNow+0x3c>)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002604:	68fb      	ldr	r3, [r7, #12]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20012db8 	.word	0x20012db8

08002614 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
 8002620:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	429a      	cmp	r2, r3
 8002638:	d812      	bhi.n	8002660 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	1ad2      	subs	r2, r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	429a      	cmp	r2, r3
 8002646:	d302      	bcc.n	800264e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002648:	2301      	movs	r3, #1
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	e01b      	b.n	8002686 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800264e:	4b10      	ldr	r3, [pc, #64]	; (8002690 <prvInsertTimerInActiveList+0x7c>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	3304      	adds	r3, #4
 8002656:	4619      	mov	r1, r3
 8002658:	4610      	mov	r0, r2
 800265a:	f7fd fe12 	bl	8000282 <vListInsert>
 800265e:	e012      	b.n	8002686 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d206      	bcs.n	8002676 <prvInsertTimerInActiveList+0x62>
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d302      	bcc.n	8002676 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002670:	2301      	movs	r3, #1
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	e007      	b.n	8002686 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002676:	4b07      	ldr	r3, [pc, #28]	; (8002694 <prvInsertTimerInActiveList+0x80>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	3304      	adds	r3, #4
 800267e:	4619      	mov	r1, r3
 8002680:	4610      	mov	r0, r2
 8002682:	f7fd fdfe 	bl	8000282 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002686:	697b      	ldr	r3, [r7, #20]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20012dac 	.word	0x20012dac
 8002694:	20012da8 	.word	0x20012da8

08002698 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08c      	sub	sp, #48	; 0x30
 800269c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800269e:	e0ac      	b.n	80027fa <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f2c0 80a9 	blt.w	80027fa <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d004      	beq.n	80026be <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	3304      	adds	r3, #4
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fd fe1b 	bl	80002f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80026be:	1d3b      	adds	r3, r7, #4
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ff87 	bl	80025d4 <prvSampleTimeNow>
 80026c6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2b09      	cmp	r3, #9
 80026cc:	f200 8094 	bhi.w	80027f8 <prvProcessReceivedCommands+0x160>
 80026d0:	a201      	add	r2, pc, #4	; (adr r2, 80026d8 <prvProcessReceivedCommands+0x40>)
 80026d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d6:	bf00      	nop
 80026d8:	08002701 	.word	0x08002701
 80026dc:	08002701 	.word	0x08002701
 80026e0:	08002701 	.word	0x08002701
 80026e4:	08002773 	.word	0x08002773
 80026e8:	08002787 	.word	0x08002787
 80026ec:	080027cf 	.word	0x080027cf
 80026f0:	08002701 	.word	0x08002701
 80026f4:	08002701 	.word	0x08002701
 80026f8:	08002773 	.word	0x08002773
 80026fc:	08002787 	.word	0x08002787
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	b2da      	uxtb	r2, r3
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	18d1      	adds	r1, r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6a3a      	ldr	r2, [r7, #32]
 800271e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002720:	f7ff ff78 	bl	8002614 <prvInsertTimerInActiveList>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d067      	beq.n	80027fa <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002730:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	d05c      	beq.n	80027fa <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	441a      	add	r2, r3
 8002748:	2300      	movs	r3, #0
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	2300      	movs	r3, #0
 800274e:	2100      	movs	r1, #0
 8002750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002752:	f7ff fe23 	bl	800239c <xTimerGenericCommand>
 8002756:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d14d      	bne.n	80027fa <prvProcessReceivedCommands+0x162>
 800275e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002762:	f383 8811 	msr	BASEPRI, r3
 8002766:	f3bf 8f6f 	isb	sy
 800276a:	f3bf 8f4f 	dsb	sy
 800276e:	61bb      	str	r3, [r7, #24]
 8002770:	e7fe      	b.n	8002770 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	b2da      	uxtb	r2, r3
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8002784:	e039      	b.n	80027fa <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	b2da      	uxtb	r2, r3
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d109      	bne.n	80027ba <prvProcessReceivedCommands+0x122>
 80027a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027aa:	f383 8811 	msr	BASEPRI, r3
 80027ae:	f3bf 8f6f 	isb	sy
 80027b2:	f3bf 8f4f 	dsb	sy
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	e7fe      	b.n	80027b8 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	699a      	ldr	r2, [r3, #24]
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	18d1      	adds	r1, r2, r3
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	6a3a      	ldr	r2, [r7, #32]
 80027c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027c8:	f7ff ff24 	bl	8002614 <prvInsertTimerInActiveList>
					break;
 80027cc:	e015      	b.n	80027fa <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d103      	bne.n	80027e4 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 80027dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027de:	f7fe f8bf 	bl	8000960 <vPortFree>
 80027e2:	e00a      	b.n	80027fa <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027ea:	f023 0301 	bic.w	r3, r3, #1
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80027f6:	e000      	b.n	80027fa <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 80027f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80027fa:	4b08      	ldr	r3, [pc, #32]	; (800281c <prvProcessReceivedCommands+0x184>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f107 0108 	add.w	r1, r7, #8
 8002802:	2200      	movs	r2, #0
 8002804:	4618      	mov	r0, r3
 8002806:	f7fe fc5b 	bl	80010c0 <xQueueReceive>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	f47f af47 	bne.w	80026a0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8002812:	bf00      	nop
 8002814:	3728      	adds	r7, #40	; 0x28
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20012db0 	.word	0x20012db0

08002820 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002826:	e047      	b.n	80028b8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002828:	4b2d      	ldr	r3, [pc, #180]	; (80028e0 <prvSwitchTimerLists+0xc0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002832:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <prvSwitchTimerLists+0xc0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	3304      	adds	r3, #4
 8002840:	4618      	mov	r0, r3
 8002842:	f7fd fd57 	bl	80002f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	6938      	ldr	r0, [r7, #16]
 800284c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d02d      	beq.n	80028b8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	699a      	ldr	r2, [r3, #24]
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	4413      	add	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	429a      	cmp	r2, r3
 800286c:	d90e      	bls.n	800288c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800287a:	4b19      	ldr	r3, [pc, #100]	; (80028e0 <prvSwitchTimerLists+0xc0>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	3304      	adds	r3, #4
 8002882:	4619      	mov	r1, r3
 8002884:	4610      	mov	r0, r2
 8002886:	f7fd fcfc 	bl	8000282 <vListInsert>
 800288a:	e015      	b.n	80028b8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800288c:	2300      	movs	r3, #0
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	2300      	movs	r3, #0
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	2100      	movs	r1, #0
 8002896:	6938      	ldr	r0, [r7, #16]
 8002898:	f7ff fd80 	bl	800239c <xTimerGenericCommand>
 800289c:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d109      	bne.n	80028b8 <prvSwitchTimerLists+0x98>
 80028a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a8:	f383 8811 	msr	BASEPRI, r3
 80028ac:	f3bf 8f6f 	isb	sy
 80028b0:	f3bf 8f4f 	dsb	sy
 80028b4:	603b      	str	r3, [r7, #0]
 80028b6:	e7fe      	b.n	80028b6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80028b8:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <prvSwitchTimerLists+0xc0>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1b2      	bne.n	8002828 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80028c2:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <prvSwitchTimerLists+0xc0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 80028c8:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <prvSwitchTimerLists+0xc4>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a04      	ldr	r2, [pc, #16]	; (80028e0 <prvSwitchTimerLists+0xc0>)
 80028ce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80028d0:	4a04      	ldr	r2, [pc, #16]	; (80028e4 <prvSwitchTimerLists+0xc4>)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6013      	str	r3, [r2, #0]
}
 80028d6:	bf00      	nop
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20012da8 	.word	0x20012da8
 80028e4:	20012dac 	.word	0x20012dac

080028e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80028ec:	f7fd fe56 	bl	800059c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80028f0:	4b12      	ldr	r3, [pc, #72]	; (800293c <prvCheckForValidListAndQueue+0x54>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d11d      	bne.n	8002934 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 80028f8:	4811      	ldr	r0, [pc, #68]	; (8002940 <prvCheckForValidListAndQueue+0x58>)
 80028fa:	f7fd fc71 	bl	80001e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80028fe:	4811      	ldr	r0, [pc, #68]	; (8002944 <prvCheckForValidListAndQueue+0x5c>)
 8002900:	f7fd fc6e 	bl	80001e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002904:	4b10      	ldr	r3, [pc, #64]	; (8002948 <prvCheckForValidListAndQueue+0x60>)
 8002906:	4a0e      	ldr	r2, [pc, #56]	; (8002940 <prvCheckForValidListAndQueue+0x58>)
 8002908:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800290a:	4b10      	ldr	r3, [pc, #64]	; (800294c <prvCheckForValidListAndQueue+0x64>)
 800290c:	4a0d      	ldr	r2, [pc, #52]	; (8002944 <prvCheckForValidListAndQueue+0x5c>)
 800290e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002910:	2200      	movs	r2, #0
 8002912:	210c      	movs	r1, #12
 8002914:	200a      	movs	r0, #10
 8002916:	f7fe f9a7 	bl	8000c68 <xQueueGenericCreate>
 800291a:	4602      	mov	r2, r0
 800291c:	4b07      	ldr	r3, [pc, #28]	; (800293c <prvCheckForValidListAndQueue+0x54>)
 800291e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <prvCheckForValidListAndQueue+0x54>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002928:	4b04      	ldr	r3, [pc, #16]	; (800293c <prvCheckForValidListAndQueue+0x54>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4908      	ldr	r1, [pc, #32]	; (8002950 <prvCheckForValidListAndQueue+0x68>)
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe fdea 	bl	8001508 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002934:	f7fd fe60 	bl	80005f8 <vPortExitCritical>
}
 8002938:	bf00      	nop
 800293a:	bd80      	pop	{r7, pc}
 800293c:	20012db0 	.word	0x20012db0
 8002940:	20012d80 	.word	0x20012d80
 8002944:	20012d94 	.word	0x20012d94
 8002948:	20012da8 	.word	0x20012da8
 800294c:	20012dac 	.word	0x20012dac
 8002950:	08004d98 	.word	0x08004d98

08002954 <DAC_SetChannel1Data>:
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	807b      	strh	r3, [r7, #2]
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	4b08      	ldr	r3, [pc, #32]	; (8002988 <DAC_SetChannel1Data+0x34>)
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4413      	add	r3, r2
 800296e:	3308      	adds	r3, #8
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	461a      	mov	r2, r3
 8002976:	887b      	ldrh	r3, [r7, #2]
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	bf00      	nop
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40007400 	.word	0x40007400

0800298c <DMA_Init>:
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4b25      	ldr	r3, [pc, #148]	; (8002a38 <DMA_Init+0xac>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	431a      	orrs	r2, r3
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	431a      	orrs	r2, r3
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	431a      	orrs	r2, r3
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	431a      	orrs	r2, r3
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	431a      	orrs	r2, r3
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	431a      	orrs	r2, r3
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d4:	431a      	orrs	r2, r3
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029da:	431a      	orrs	r2, r3
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e0:	4313      	orrs	r3, r2
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f023 0307 	bic.w	r3, r3, #7
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a04:	4313      	orrs	r3, r2
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	615a      	str	r2, [r3, #20]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	609a      	str	r2, [r3, #8]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	bf00      	nop
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	f01c803f 	.word	0xf01c803f

08002a3c <DMA_Cmd>:
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	70fb      	strb	r3, [r7, #3]
 8002a48:	78fb      	ldrb	r3, [r7, #3]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d006      	beq.n	8002a5c <DMA_Cmd+0x20>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f043 0201 	orr.w	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	e005      	b.n	8002a68 <DMA_Cmd+0x2c>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f023 0201 	bic.w	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <DMA_GetCmdStatus>:
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	73fb      	strb	r3, [r7, #15]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <DMA_GetCmdStatus+0x1e>
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
 8002a90:	e001      	b.n	8002a96 <DMA_GetCmdStatus+0x22>
 8002a92:	2300      	movs	r3, #0
 8002a94:	73fb      	strb	r3, [r7, #15]
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <DMA_GetFlagStatus>:
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	75fb      	strb	r3, [r7, #23]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a15      	ldr	r2, [pc, #84]	; (8002b10 <DMA_GetFlagStatus+0x6c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d802      	bhi.n	8002ac4 <DMA_GetFlagStatus+0x20>
 8002abe:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <DMA_GetFlagStatus+0x70>)
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	e001      	b.n	8002ac8 <DMA_GetFlagStatus+0x24>
 8002ac4:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <DMA_GetFlagStatus+0x74>)
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <DMA_GetFlagStatus+0x36>
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	e002      	b.n	8002ae0 <DMA_GetFlagStatus+0x3c>
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002ae6:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	4013      	ands	r3, r2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <DMA_GetFlagStatus+0x58>
 8002af6:	2301      	movs	r3, #1
 8002af8:	75fb      	strb	r3, [r7, #23]
 8002afa:	e001      	b.n	8002b00 <DMA_GetFlagStatus+0x5c>
 8002afc:	2300      	movs	r3, #0
 8002afe:	75fb      	strb	r3, [r7, #23]
 8002b00:	7dfb      	ldrb	r3, [r7, #23]
 8002b02:	4618      	mov	r0, r3
 8002b04:	371c      	adds	r7, #28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	4002640f 	.word	0x4002640f
 8002b14:	40026000 	.word	0x40026000
 8002b18:	40026400 	.word	0x40026400

08002b1c <DMA_ClearFlag>:
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a10      	ldr	r2, [pc, #64]	; (8002b6c <DMA_ClearFlag+0x50>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d802      	bhi.n	8002b34 <DMA_ClearFlag+0x18>
 8002b2e:	4b10      	ldr	r3, [pc, #64]	; (8002b70 <DMA_ClearFlag+0x54>)
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	e001      	b.n	8002b38 <DMA_ClearFlag+0x1c>
 8002b34:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <DMA_ClearFlag+0x58>)
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d007      	beq.n	8002b52 <DMA_ClearFlag+0x36>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002b48:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	60d3      	str	r3, [r2, #12]
 8002b50:	e006      	b.n	8002b60 <DMA_ClearFlag+0x44>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002b58:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	6093      	str	r3, [r2, #8]
 8002b60:	bf00      	nop
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	4002640f 	.word	0x4002640f
 8002b70:	40026000 	.word	0x40026000
 8002b74:	40026400 	.word	0x40026400

08002b78 <GPIO_Init>:
 8002b78:	b480      	push	{r7}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	e076      	b.n	8002c82 <GPIO_Init+0x10a>
 8002b94:	2201      	movs	r2, #1
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d165      	bne.n	8002c7c <GPIO_Init+0x104>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	2103      	movs	r1, #3
 8002bba:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	401a      	ands	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	791b      	ldrb	r3, [r3, #4]
 8002bce:	4619      	mov	r1, r3
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	791b      	ldrb	r3, [r3, #4]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d003      	beq.n	8002bee <GPIO_Init+0x76>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	791b      	ldrb	r3, [r3, #4]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d12e      	bne.n	8002c4c <GPIO_Init+0xd4>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	2103      	movs	r1, #3
 8002bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	401a      	ands	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	609a      	str	r2, [r3, #8]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	795b      	ldrb	r3, [r3, #5]
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	fa01 f303 	lsl.w	r3, r1, r3
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	4619      	mov	r1, r3
 8002c26:	2301      	movs	r3, #1
 8002c28:	408b      	lsls	r3, r1
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	401a      	ands	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	7992      	ldrb	r2, [r2, #6]
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	b292      	uxth	r2, r2
 8002c40:	fa01 f202 	lsl.w	r2, r1, r2
 8002c44:	b292      	uxth	r2, r2
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	605a      	str	r2, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	2103      	movs	r1, #3
 8002c58:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	401a      	ands	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	60da      	str	r2, [r3, #12]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68da      	ldr	r2, [r3, #12]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	79db      	ldrb	r3, [r3, #7]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	60da      	str	r2, [r3, #12]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2b0f      	cmp	r3, #15
 8002c86:	d985      	bls.n	8002b94 <GPIO_Init+0x1c>
 8002c88:	bf00      	nop
 8002c8a:	371c      	adds	r7, #28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <RCC_DeInit>:
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	4a12      	ldr	r2, [pc, #72]	; (8002ce4 <RCC_DeInit+0x50>)
 8002c9a:	4b12      	ldr	r3, [pc, #72]	; (8002ce4 <RCC_DeInit+0x50>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	4b0f      	ldr	r3, [pc, #60]	; (8002ce4 <RCC_DeInit+0x50>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	609a      	str	r2, [r3, #8]
 8002caa:	4a0e      	ldr	r2, [pc, #56]	; (8002ce4 <RCC_DeInit+0x50>)
 8002cac:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <RCC_DeInit+0x50>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 8002cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <RCC_DeInit+0x50>)
 8002cbc:	4a0a      	ldr	r2, [pc, #40]	; (8002ce8 <RCC_DeInit+0x54>)
 8002cbe:	605a      	str	r2, [r3, #4]
 8002cc0:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <RCC_DeInit+0x50>)
 8002cc2:	4a0a      	ldr	r2, [pc, #40]	; (8002cec <RCC_DeInit+0x58>)
 8002cc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002cc8:	4a06      	ldr	r2, [pc, #24]	; (8002ce4 <RCC_DeInit+0x50>)
 8002cca:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <RCC_DeInit+0x50>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cd2:	6013      	str	r3, [r2, #0]
 8002cd4:	4b03      	ldr	r3, [pc, #12]	; (8002ce4 <RCC_DeInit+0x50>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	bf00      	nop
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	24003010 	.word	0x24003010
 8002cec:	20003000 	.word	0x20003000

08002cf0 <RCC_AHB1PeriphClockCmd>:
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	70fb      	strb	r3, [r7, #3]
 8002cfc:	78fb      	ldrb	r3, [r7, #3]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d006      	beq.n	8002d10 <RCC_AHB1PeriphClockCmd+0x20>
 8002d02:	490a      	ldr	r1, [pc, #40]	; (8002d2c <RCC_AHB1PeriphClockCmd+0x3c>)
 8002d04:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <RCC_AHB1PeriphClockCmd+0x3c>)
 8002d06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	630b      	str	r3, [r1, #48]	; 0x30
 8002d0e:	e006      	b.n	8002d1e <RCC_AHB1PeriphClockCmd+0x2e>
 8002d10:	4906      	ldr	r1, [pc, #24]	; (8002d2c <RCC_AHB1PeriphClockCmd+0x3c>)
 8002d12:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <RCC_AHB1PeriphClockCmd+0x3c>)
 8002d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	630b      	str	r3, [r1, #48]	; 0x30
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40023800 	.word	0x40023800

08002d30 <SPI_I2S_SendData>:
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	807b      	strh	r3, [r7, #2]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	887a      	ldrh	r2, [r7, #2]
 8002d40:	819a      	strh	r2, [r3, #12]
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <SPI_I2S_GetFlagStatus>:
 8002d4e:	b480      	push	{r7}
 8002d50:	b085      	sub	sp, #20
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	460b      	mov	r3, r1
 8002d58:	807b      	strh	r3, [r7, #2]
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	73fb      	strb	r3, [r7, #15]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	891b      	ldrh	r3, [r3, #8]
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	887b      	ldrh	r3, [r7, #2]
 8002d66:	4013      	ands	r3, r2
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <SPI_I2S_GetFlagStatus+0x26>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	73fb      	strb	r3, [r7, #15]
 8002d72:	e001      	b.n	8002d78 <SPI_I2S_GetFlagStatus+0x2a>
 8002d74:	2300      	movs	r3, #0
 8002d76:	73fb      	strb	r3, [r7, #15]
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8002d8c:	4803      	ldr	r0, [pc, #12]	; (8002d9c <_cbSendSystemDesc+0x14>)
 8002d8e:	f001 f9d5 	bl	800413c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8002d92:	4803      	ldr	r0, [pc, #12]	; (8002da0 <_cbSendSystemDesc+0x18>)
 8002d94:	f001 f9d2 	bl	800413c <SEGGER_SYSVIEW_SendSysDesc>
}
 8002d98:	bf00      	nop
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	08004da0 	.word	0x08004da0
 8002da0:	08004dd4 	.word	0x08004dd4

08002da4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <SEGGER_SYSVIEW_Conf+0x20>)
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <SEGGER_SYSVIEW_Conf+0x20>)
 8002dae:	6819      	ldr	r1, [r3, #0]
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <SEGGER_SYSVIEW_Conf+0x24>)
 8002db2:	4a06      	ldr	r2, [pc, #24]	; (8002dcc <SEGGER_SYSVIEW_Conf+0x28>)
 8002db4:	f000 fd42 	bl	800383c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8002db8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8002dbc:	f000 fd7c 	bl	80038b8 <SEGGER_SYSVIEW_SetRAMBase>
}
 8002dc0:	bf00      	nop
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20000024 	.word	0x20000024
 8002dc8:	08002d89 	.word	0x08002d89
 8002dcc:	08004e80 	.word	0x08004e80

08002dd0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8002dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	607b      	str	r3, [r7, #4]
 8002dda:	e034      	b.n	8002e46 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002ddc:	491e      	ldr	r1, [pc, #120]	; (8002e58 <_cbSendTaskList+0x88>)
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	6818      	ldr	r0, [r3, #0]
 8002dec:	491a      	ldr	r1, [pc, #104]	; (8002e58 <_cbSendTaskList+0x88>)
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	681c      	ldr	r4, [r3, #0]
 8002dfe:	4916      	ldr	r1, [pc, #88]	; (8002e58 <_cbSendTaskList+0x88>)
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	3308      	adds	r3, #8
 8002e0e:	681d      	ldr	r5, [r3, #0]
 8002e10:	4911      	ldr	r1, [pc, #68]	; (8002e58 <_cbSendTaskList+0x88>)
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	330c      	adds	r3, #12
 8002e20:	681e      	ldr	r6, [r3, #0]
 8002e22:	490d      	ldr	r1, [pc, #52]	; (8002e58 <_cbSendTaskList+0x88>)
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	3310      	adds	r3, #16
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	4633      	mov	r3, r6
 8002e38:	462a      	mov	r2, r5
 8002e3a:	4621      	mov	r1, r4
 8002e3c:	f000 f8ae 	bl	8002f9c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3301      	adds	r3, #1
 8002e44:	607b      	str	r3, [r7, #4]
 8002e46:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <_cbSendTaskList+0x8c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d3c5      	bcc.n	8002ddc <_cbSendTaskList+0xc>
  }
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e58:	20012dbc 	.word	0x20012dbc
 8002e5c:	20012e5c 	.word	0x20012e5c

08002e60 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002e68:	f7fe fe2c 	bl	8001ac4 <xTaskGetTickCountFromISR>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f04f 0400 	mov.w	r4, #0
 8002e72:	e887 0018 	stmia.w	r7, {r3, r4}
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8002e76:	e897 0006 	ldmia.w	r7, {r1, r2}
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4614      	mov	r4, r2
 8002e7e:	ea4f 1b44 	mov.w	fp, r4, lsl #5
 8002e82:	ea4b 6bd3 	orr.w	fp, fp, r3, lsr #27
 8002e86:	ea4f 1a43 	mov.w	sl, r3, lsl #5
 8002e8a:	4653      	mov	r3, sl
 8002e8c:	465c      	mov	r4, fp
 8002e8e:	1a5b      	subs	r3, r3, r1
 8002e90:	eb64 0402 	sbc.w	r4, r4, r2
 8002e94:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8002e98:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
 8002e9c:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8002ea0:	4643      	mov	r3, r8
 8002ea2:	464c      	mov	r4, r9
 8002ea4:	185b      	adds	r3, r3, r1
 8002ea6:	eb44 0402 	adc.w	r4, r4, r2
 8002eaa:	00e6      	lsls	r6, r4, #3
 8002eac:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 8002eb0:	00dd      	lsls	r5, r3, #3
 8002eb2:	462b      	mov	r3, r5
 8002eb4:	4634      	mov	r4, r6
 8002eb6:	e887 0018 	stmia.w	r7, {r3, r4}
  return Time;
 8002eba:	e897 0018 	ldmia.w	r7, {r3, r4}
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	4621      	mov	r1, r4
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002ecc <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af02      	add	r7, sp, #8
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002eda:	2205      	movs	r2, #5
 8002edc:	492b      	ldr	r1, [pc, #172]	; (8002f8c <SYSVIEW_AddTask+0xc0>)
 8002ede:	68b8      	ldr	r0, [r7, #8]
 8002ee0:	f001 ff24 	bl	8004d2c <memcmp>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d04b      	beq.n	8002f82 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002eea:	4b29      	ldr	r3, [pc, #164]	; (8002f90 <SYSVIEW_AddTask+0xc4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b07      	cmp	r3, #7
 8002ef0:	d903      	bls.n	8002efa <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002ef2:	4828      	ldr	r0, [pc, #160]	; (8002f94 <SYSVIEW_AddTask+0xc8>)
 8002ef4:	f001 fb48 	bl	8004588 <SEGGER_SYSVIEW_Warn>
    return;
 8002ef8:	e044      	b.n	8002f84 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002efa:	4b25      	ldr	r3, [pc, #148]	; (8002f90 <SYSVIEW_AddTask+0xc4>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	4926      	ldr	r1, [pc, #152]	; (8002f98 <SYSVIEW_AddTask+0xcc>)
 8002f00:	4613      	mov	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002f0e:	4b20      	ldr	r3, [pc, #128]	; (8002f90 <SYSVIEW_AddTask+0xc4>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	4921      	ldr	r1, [pc, #132]	; (8002f98 <SYSVIEW_AddTask+0xcc>)
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	3304      	adds	r3, #4
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002f24:	4b1a      	ldr	r3, [pc, #104]	; (8002f90 <SYSVIEW_AddTask+0xc4>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	491b      	ldr	r1, [pc, #108]	; (8002f98 <SYSVIEW_AddTask+0xcc>)
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	3308      	adds	r3, #8
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002f3a:	4b15      	ldr	r3, [pc, #84]	; (8002f90 <SYSVIEW_AddTask+0xc4>)
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	4916      	ldr	r1, [pc, #88]	; (8002f98 <SYSVIEW_AddTask+0xcc>)
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	330c      	adds	r3, #12
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002f50:	4b0f      	ldr	r3, [pc, #60]	; (8002f90 <SYSVIEW_AddTask+0xc4>)
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	4910      	ldr	r1, [pc, #64]	; (8002f98 <SYSVIEW_AddTask+0xcc>)
 8002f56:	4613      	mov	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	3310      	adds	r3, #16
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002f66:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <SYSVIEW_AddTask+0xc4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	4a08      	ldr	r2, [pc, #32]	; (8002f90 <SYSVIEW_AddTask+0xc4>)
 8002f6e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	68b9      	ldr	r1, [r7, #8]
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 f80e 	bl	8002f9c <SYSVIEW_SendTaskInfo>
 8002f80:	e000      	b.n	8002f84 <SYSVIEW_AddTask+0xb8>
    return;
 8002f82:	bf00      	nop

}
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	08004de4 	.word	0x08004de4
 8002f90:	20012e5c 	.word	0x20012e5c
 8002f94:	08004dec 	.word	0x08004dec
 8002f98:	20012dbc 	.word	0x20012dbc

08002f9c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08a      	sub	sp, #40	; 0x28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
 8002fa8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002faa:	f107 0314 	add.w	r3, r7, #20
 8002fae:	2214      	movs	r2, #20
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f001 fed4 	bl	8004d60 <memset>
  TaskInfo.TaskID     = TaskID;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002fcc:	f107 0314 	add.w	r3, r7, #20
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 ffb9 	bl	8003f48 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002fd6:	bf00      	nop
 8002fd8:	3728      	adds	r7, #40	; 0x28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
	...

08002fe0 <_DoInit>:
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4b21      	ldr	r3, [pc, #132]	; (800306c <_DoInit+0x8c>)
 8002fe8:	607b      	str	r3, [r7, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2203      	movs	r2, #3
 8002fee:	611a      	str	r2, [r3, #16]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	615a      	str	r2, [r3, #20]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a1d      	ldr	r2, [pc, #116]	; (8003070 <_DoInit+0x90>)
 8002ffa:	619a      	str	r2, [r3, #24]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a1d      	ldr	r2, [pc, #116]	; (8003074 <_DoInit+0x94>)
 8003000:	61da      	str	r2, [r3, #28]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003008:	621a      	str	r2, [r3, #32]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	629a      	str	r2, [r3, #40]	; 0x28
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	625a      	str	r2, [r3, #36]	; 0x24
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	62da      	str	r2, [r3, #44]	; 0x2c
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a14      	ldr	r2, [pc, #80]	; (8003070 <_DoInit+0x90>)
 8003020:	661a      	str	r2, [r3, #96]	; 0x60
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a14      	ldr	r2, [pc, #80]	; (8003078 <_DoInit+0x98>)
 8003026:	665a      	str	r2, [r3, #100]	; 0x64
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2210      	movs	r2, #16
 800302c:	669a      	str	r2, [r3, #104]	; 0x68
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	671a      	str	r2, [r3, #112]	; 0x70
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	66da      	str	r2, [r3, #108]	; 0x6c
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	675a      	str	r2, [r3, #116]	; 0x74
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3307      	adds	r3, #7
 8003044:	4a0d      	ldr	r2, [pc, #52]	; (800307c <_DoInit+0x9c>)
 8003046:	6810      	ldr	r0, [r2, #0]
 8003048:	6018      	str	r0, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a0c      	ldr	r2, [pc, #48]	; (8003080 <_DoInit+0xa0>)
 800304e:	6810      	ldr	r0, [r2, #0]
 8003050:	6018      	str	r0, [r3, #0]
 8003052:	8891      	ldrh	r1, [r2, #4]
 8003054:	7992      	ldrb	r2, [r2, #6]
 8003056:	8099      	strh	r1, [r3, #4]
 8003058:	719a      	strb	r2, [r3, #6]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2220      	movs	r2, #32
 800305e:	719a      	strb	r2, [r3, #6]
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	200153d4 	.word	0x200153d4
 8003070:	08004e3c 	.word	0x08004e3c
 8003074:	20012e60 	.word	0x20012e60
 8003078:	20013260 	.word	0x20013260
 800307c:	08004e48 	.word	0x08004e48
 8003080:	08004e4c 	.word	0x08004e4c

08003084 <SEGGER_RTT_ReadNoLock>:
 8003084:	b580      	push	{r7, lr}
 8003086:	b08a      	sub	sp, #40	; 0x28
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	4b3c      	ldr	r3, [pc, #240]	; (8003184 <SEGGER_RTT_ReadNoLock+0x100>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <SEGGER_RTT_ReadNoLock+0x18>
 8003098:	f7ff ffa2 	bl	8002fe0 <_DoInit>
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	4613      	mov	r3, r2
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	4413      	add	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	3360      	adds	r3, #96	; 0x60
 80030a8:	4a36      	ldr	r2, [pc, #216]	; (8003184 <SEGGER_RTT_ReadNoLock+0x100>)
 80030aa:	4413      	add	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	61fb      	str	r3, [r7, #28]
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	623b      	str	r3, [r7, #32]
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	2300      	movs	r3, #0
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
 80030c2:	6a3a      	ldr	r2, [r7, #32]
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d92a      	bls.n	8003120 <SEGGER_RTT_ReadNoLock+0x9c>
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	613b      	str	r3, [r7, #16]
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4293      	cmp	r3, r2
 80030da:	bf28      	it	cs
 80030dc:	4613      	movcs	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	4413      	add	r3, r2
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4619      	mov	r1, r3
 80030ec:	69f8      	ldr	r0, [r7, #28]
 80030ee:	f001 fe2c 	bl	8004d4a <memcpy>
 80030f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4413      	add	r3, r2
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
 80030fa:	69fa      	ldr	r2, [r7, #28]
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	4413      	add	r3, r2
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	607b      	str	r3, [r7, #4]
 800310a:	6a3a      	ldr	r2, [r7, #32]
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	4413      	add	r3, r2
 8003110:	623b      	str	r3, [r7, #32]
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	429a      	cmp	r2, r3
 800311a:	d101      	bne.n	8003120 <SEGGER_RTT_ReadNoLock+0x9c>
 800311c:	2300      	movs	r3, #0
 800311e:	623b      	str	r3, [r7, #32]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	613b      	str	r3, [r7, #16]
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4293      	cmp	r3, r2
 800312e:	bf28      	it	cs
 8003130:	4613      	movcs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d018      	beq.n	800316c <SEGGER_RTT_ReadNoLock+0xe8>
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	4413      	add	r3, r2
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	4619      	mov	r1, r3
 8003146:	69f8      	ldr	r0, [r7, #28]
 8003148:	f001 fdff 	bl	8004d4a <memcpy>
 800314c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4413      	add	r3, r2
 8003152:	627b      	str	r3, [r7, #36]	; 0x24
 8003154:	69fa      	ldr	r2, [r7, #28]
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	4413      	add	r3, r2
 800315a:	61fb      	str	r3, [r7, #28]
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	607b      	str	r3, [r7, #4]
 8003164:	6a3a      	ldr	r2, [r7, #32]
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4413      	add	r3, r2
 800316a:	623b      	str	r3, [r7, #32]
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <SEGGER_RTT_ReadNoLock+0xf4>
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	6a3a      	ldr	r2, [r7, #32]
 8003176:	611a      	str	r2, [r3, #16]
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	4618      	mov	r0, r3
 800317c:	3728      	adds	r7, #40	; 0x28
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	200153d4 	.word	0x200153d4

08003188 <SEGGER_RTT_WriteSkipNoLock>:
 8003188:	b580      	push	{r7, lr}
 800318a:	b08a      	sub	sp, #40	; 0x28
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	4613      	mov	r3, r2
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	4413      	add	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	4a3f      	ldr	r2, [pc, #252]	; (80032a4 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 80031a6:	4413      	add	r3, r2
 80031a8:	623b      	str	r3, [r7, #32]
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	61fb      	str	r3, [r7, #28]
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	61bb      	str	r3, [r7, #24]
 80031b6:	69fa      	ldr	r2, [r7, #28]
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d854      	bhi.n	8003268 <SEGGER_RTT_WriteSkipNoLock+0xe0>
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	3b01      	subs	r3, #1
 80031c8:	617b      	str	r3, [r7, #20]
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d30f      	bcc.n	80031f2 <SEGGER_RTT_WriteSkipNoLock+0x6a>
 80031d2:	6a3b      	ldr	r3, [r7, #32]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	4413      	add	r3, r2
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031de:	4618      	mov	r0, r3
 80031e0:	f001 fdb3 	bl	8004d4a <memcpy>
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	441a      	add	r2, r3
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	60da      	str	r2, [r3, #12]
 80031ee:	2301      	movs	r3, #1
 80031f0:	e054      	b.n	800329c <SEGGER_RTT_WriteSkipNoLock+0x114>
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	4413      	add	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d34b      	bcc.n	800329a <SEGGER_RTT_WriteSkipNoLock+0x112>
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	429a      	cmp	r2, r3
 8003212:	d90e      	bls.n	8003232 <SEGGER_RTT_WriteSkipNoLock+0xaa>
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	4413      	add	r3, r2
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003220:	4618      	mov	r0, r3
 8003222:	f001 fd92 	bl	8004d4a <memcpy>
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	441a      	add	r2, r3
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	60da      	str	r2, [r3, #12]
 8003230:	e018      	b.n	8003264 <SEGGER_RTT_WriteSkipNoLock+0xdc>
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	4413      	add	r3, r2
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800323e:	4618      	mov	r0, r3
 8003240:	f001 fd83 	bl	8004d4a <memcpy>
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	6858      	ldr	r0, [r3, #4]
 8003248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	18d1      	adds	r1, r2, r3
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	461a      	mov	r2, r3
 8003256:	f001 fd78 	bl	8004d4a <memcpy>
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad2      	subs	r2, r2, r3
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	60da      	str	r2, [r3, #12]
 8003264:	2301      	movs	r3, #1
 8003266:	e019      	b.n	800329c <SEGGER_RTT_WriteSkipNoLock+0x114>
 8003268:	69fa      	ldr	r2, [r7, #28]
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	3b01      	subs	r3, #1
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	429a      	cmp	r2, r3
 8003278:	d30f      	bcc.n	800329a <SEGGER_RTT_WriteSkipNoLock+0x112>
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	4413      	add	r3, r2
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003286:	4618      	mov	r0, r3
 8003288:	f001 fd5f 	bl	8004d4a <memcpy>
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	441a      	add	r2, r3
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	60da      	str	r2, [r3, #12]
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <SEGGER_RTT_WriteSkipNoLock+0x114>
 800329a:	2300      	movs	r3, #0
 800329c:	4618      	mov	r0, r3
 800329e:	3728      	adds	r7, #40	; 0x28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	200153d4 	.word	0x200153d4

080032a8 <SEGGER_RTT_ConfigUpBuffer>:
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	603b      	str	r3, [r7, #0]
 80032b6:	4b30      	ldr	r3, [pc, #192]	; (8003378 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 80032be:	f7ff fe8f 	bl	8002fe0 <_DoInit>
 80032c2:	4b2d      	ldr	r3, [pc, #180]	; (8003378 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	461a      	mov	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d94c      	bls.n	8003368 <SEGGER_RTT_ConfigUpBuffer+0xc0>
 80032ce:	f3ef 8311 	mrs	r3, BASEPRI
 80032d2:	f04f 0120 	mov.w	r1, #32
 80032d6:	f381 8811 	msr	BASEPRI, r1
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d032      	beq.n	8003348 <SEGGER_RTT_ConfigUpBuffer+0xa0>
 80032e2:	4925      	ldr	r1, [pc, #148]	; (8003378 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	1c5a      	adds	r2, r3, #1
 80032e8:	4613      	mov	r3, r2
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	4413      	add	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	440b      	add	r3, r1
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	4920      	ldr	r1, [pc, #128]	; (8003378 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	1c5a      	adds	r2, r3, #1
 80032fc:	4613      	mov	r3, r2
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	4413      	add	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	440b      	add	r3, r1
 8003306:	3304      	adds	r3, #4
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	491a      	ldr	r1, [pc, #104]	; (8003378 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4613      	mov	r3, r2
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	4413      	add	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	440b      	add	r3, r1
 800331a:	3320      	adds	r3, #32
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	4915      	ldr	r1, [pc, #84]	; (8003378 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4613      	mov	r3, r2
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	4413      	add	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	440b      	add	r3, r1
 800332e:	3328      	adds	r3, #40	; 0x28
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	4910      	ldr	r1, [pc, #64]	; (8003378 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4613      	mov	r3, r2
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	4413      	add	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	440b      	add	r3, r1
 8003342:	3324      	adds	r3, #36	; 0x24
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	490b      	ldr	r1, [pc, #44]	; (8003378 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	4613      	mov	r3, r2
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	4413      	add	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	440b      	add	r3, r1
 8003356:	332c      	adds	r3, #44	; 0x2c
 8003358:	6a3a      	ldr	r2, [r7, #32]
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f383 8811 	msr	BASEPRI, r3
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]
 8003366:	e002      	b.n	800336e <SEGGER_RTT_ConfigUpBuffer+0xc6>
 8003368:	f04f 33ff 	mov.w	r3, #4294967295
 800336c:	617b      	str	r3, [r7, #20]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	200153d4 	.word	0x200153d4

0800337c <SEGGER_RTT_ConfigDownBuffer>:
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
 8003388:	603b      	str	r3, [r7, #0]
 800338a:	4b30      	ldr	r3, [pc, #192]	; (800344c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8003392:	f7ff fe25 	bl	8002fe0 <_DoInit>
 8003396:	4b2d      	ldr	r3, [pc, #180]	; (800344c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	461a      	mov	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d94b      	bls.n	800343a <SEGGER_RTT_ConfigDownBuffer+0xbe>
 80033a2:	f3ef 8311 	mrs	r3, BASEPRI
 80033a6:	f04f 0120 	mov.w	r1, #32
 80033aa:	f381 8811 	msr	BASEPRI, r1
 80033ae:	613b      	str	r3, [r7, #16]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d031      	beq.n	800341a <SEGGER_RTT_ConfigDownBuffer+0x9e>
 80033b6:	4925      	ldr	r1, [pc, #148]	; (800344c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	4613      	mov	r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	4413      	add	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	440b      	add	r3, r1
 80033c4:	3360      	adds	r3, #96	; 0x60
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	4920      	ldr	r1, [pc, #128]	; (800344c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4613      	mov	r3, r2
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	4413      	add	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	440b      	add	r3, r1
 80033d8:	3364      	adds	r3, #100	; 0x64
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	491b      	ldr	r1, [pc, #108]	; (800344c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	4613      	mov	r3, r2
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	4413      	add	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	440b      	add	r3, r1
 80033ec:	3368      	adds	r3, #104	; 0x68
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	4916      	ldr	r1, [pc, #88]	; (800344c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4613      	mov	r3, r2
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	4413      	add	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	440b      	add	r3, r1
 8003400:	3370      	adds	r3, #112	; 0x70
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	4911      	ldr	r1, [pc, #68]	; (800344c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4613      	mov	r3, r2
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	4413      	add	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	440b      	add	r3, r1
 8003414:	336c      	adds	r3, #108	; 0x6c
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	490c      	ldr	r1, [pc, #48]	; (800344c <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	4613      	mov	r3, r2
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	4413      	add	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	440b      	add	r3, r1
 8003428:	3374      	adds	r3, #116	; 0x74
 800342a:	6a3a      	ldr	r2, [r7, #32]
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f383 8811 	msr	BASEPRI, r3
 8003434:	2300      	movs	r3, #0
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	e002      	b.n	8003440 <SEGGER_RTT_ConfigDownBuffer+0xc4>
 800343a:	f04f 33ff 	mov.w	r3, #4294967295
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	4618      	mov	r0, r3
 8003444:	3718      	adds	r7, #24
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	200153d4 	.word	0x200153d4

08003450 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800345c:	2300      	movs	r3, #0
 800345e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003460:	e002      	b.n	8003468 <_EncodeStr+0x18>
    Len++;
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	3301      	adds	r3, #1
 8003466:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	4413      	add	r3, r2
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1f6      	bne.n	8003462 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	429a      	cmp	r2, r3
 800347a:	d901      	bls.n	8003480 <_EncodeStr+0x30>
    Len = Limit;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	2bfe      	cmp	r3, #254	; 0xfe
 8003484:	d806      	bhi.n	8003494 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	60fa      	str	r2, [r7, #12]
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	701a      	strb	r2, [r3, #0]
 8003492:	e011      	b.n	80034b8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	60fa      	str	r2, [r7, #12]
 800349a:	22ff      	movs	r2, #255	; 0xff
 800349c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	60fa      	str	r2, [r7, #12]
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	60fa      	str	r2, [r7, #12]
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	0a12      	lsrs	r2, r2, #8
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80034bc:	e00a      	b.n	80034d4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	60fa      	str	r2, [r7, #12]
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	1c51      	adds	r1, r2, #1
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	7812      	ldrb	r2, [r2, #0]
 80034cc:	701a      	strb	r2, [r3, #0]
    n++;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	3301      	adds	r3, #1
 80034d2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d3f0      	bcc.n	80034be <_EncodeStr+0x6e>
  }
  return pPayload;
 80034dc:	68fb      	ldr	r3, [r7, #12]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	371c      	adds	r7, #28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3304      	adds	r3, #4
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003508:	1cfb      	adds	r3, r7, #3
 800350a:	2201      	movs	r2, #1
 800350c:	4619      	mov	r1, r3
 800350e:	2001      	movs	r0, #1
 8003510:	f7ff fdb8 	bl	8003084 <SEGGER_RTT_ReadNoLock>
 8003514:	4603      	mov	r3, r0
 8003516:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	dd47      	ble.n	80035ae <_HandleIncomingPacket+0xac>
    switch (Cmd) {
 800351e:	78fb      	ldrb	r3, [r7, #3]
 8003520:	2b04      	cmp	r3, #4
 8003522:	d01a      	beq.n	800355a <_HandleIncomingPacket+0x58>
 8003524:	2b04      	cmp	r3, #4
 8003526:	dc06      	bgt.n	8003536 <_HandleIncomingPacket+0x34>
 8003528:	2b02      	cmp	r3, #2
 800352a:	d010      	beq.n	800354e <_HandleIncomingPacket+0x4c>
 800352c:	2b02      	cmp	r3, #2
 800352e:	dc11      	bgt.n	8003554 <_HandleIncomingPacket+0x52>
 8003530:	2b01      	cmp	r3, #1
 8003532:	d009      	beq.n	8003548 <_HandleIncomingPacket+0x46>
 8003534:	e02d      	b.n	8003592 <_HandleIncomingPacket+0x90>
 8003536:	2b06      	cmp	r3, #6
 8003538:	d015      	beq.n	8003566 <_HandleIncomingPacket+0x64>
 800353a:	2b06      	cmp	r3, #6
 800353c:	db10      	blt.n	8003560 <_HandleIncomingPacket+0x5e>
 800353e:	2b07      	cmp	r3, #7
 8003540:	d014      	beq.n	800356c <_HandleIncomingPacket+0x6a>
 8003542:	2b80      	cmp	r3, #128	; 0x80
 8003544:	d015      	beq.n	8003572 <_HandleIncomingPacket+0x70>
 8003546:	e024      	b.n	8003592 <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003548:	f000 fb82 	bl	8003c50 <SEGGER_SYSVIEW_Start>
      break;
 800354c:	e02f      	b.n	80035ae <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800354e:	f000 fc3b 	bl	8003dc8 <SEGGER_SYSVIEW_Stop>
      break;
 8003552:	e02c      	b.n	80035ae <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003554:	f000 fe16 	bl	8004184 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003558:	e029      	b.n	80035ae <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800355a:	f000 fddb 	bl	8004114 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800355e:	e026      	b.n	80035ae <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003560:	f000 fc58 	bl	8003e14 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003564:	e023      	b.n	80035ae <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003566:	f000 ffd1 	bl	800450c <SEGGER_SYSVIEW_SendNumModules>
      break;
 800356a:	e020      	b.n	80035ae <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800356c:	f000 ffb0 	bl	80044d0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003570:	e01d      	b.n	80035ae <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003572:	1cfb      	adds	r3, r7, #3
 8003574:	2201      	movs	r2, #1
 8003576:	4619      	mov	r1, r3
 8003578:	2001      	movs	r0, #1
 800357a:	f7ff fd83 	bl	8003084 <SEGGER_RTT_ReadNoLock>
 800357e:	4603      	mov	r3, r0
 8003580:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	dd0f      	ble.n	80035a8 <_HandleIncomingPacket+0xa6>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003588:	78fb      	ldrb	r3, [r7, #3]
 800358a:	4618      	mov	r0, r3
 800358c:	f000 ff20 	bl	80043d0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003590:	e00a      	b.n	80035a8 <_HandleIncomingPacket+0xa6>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003592:	78fb      	ldrb	r3, [r7, #3]
 8003594:	b25b      	sxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	da08      	bge.n	80035ac <_HandleIncomingPacket+0xaa>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800359a:	1cfb      	adds	r3, r7, #3
 800359c:	2201      	movs	r2, #1
 800359e:	4619      	mov	r1, r3
 80035a0:	2001      	movs	r0, #1
 80035a2:	f7ff fd6f 	bl	8003084 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80035a6:	e001      	b.n	80035ac <_HandleIncomingPacket+0xaa>
      break;
 80035a8:	bf00      	nop
 80035aa:	e000      	b.n	80035ae <_HandleIncomingPacket+0xac>
      break;
 80035ac:	bf00      	nop
    }
  }
}
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08c      	sub	sp, #48	; 0x30
 80035bc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80035be:	2301      	movs	r3, #1
 80035c0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80035c2:	1d3b      	adds	r3, r7, #4
 80035c4:	3301      	adds	r3, #1
 80035c6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035cc:	4b30      	ldr	r3, [pc, #192]	; (8003690 <_TrySendOverflowPacket+0xd8>)
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80035d2:	e00b      	b.n	80035ec <_TrySendOverflowPacket+0x34>
 80035d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	701a      	strb	r2, [r3, #0]
 80035e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e8:	09db      	lsrs	r3, r3, #7
 80035ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ee:	2b7f      	cmp	r3, #127	; 0x7f
 80035f0:	d8f0      	bhi.n	80035d4 <_TrySendOverflowPacket+0x1c>
 80035f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	701a      	strb	r2, [r3, #0]
 80035fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003600:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003602:	4b24      	ldr	r3, [pc, #144]	; (8003694 <_TrySendOverflowPacket+0xdc>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003608:	4b21      	ldr	r3, [pc, #132]	; (8003690 <_TrySendOverflowPacket+0xd8>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	623b      	str	r3, [r7, #32]
 800361a:	e00b      	b.n	8003634 <_TrySendOverflowPacket+0x7c>
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	627a      	str	r2, [r7, #36]	; 0x24
 8003622:	6a3a      	ldr	r2, [r7, #32]
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	701a      	strb	r2, [r3, #0]
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	09db      	lsrs	r3, r3, #7
 8003632:	623b      	str	r3, [r7, #32]
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	2b7f      	cmp	r3, #127	; 0x7f
 8003638:	d8f0      	bhi.n	800361c <_TrySendOverflowPacket+0x64>
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	1c5a      	adds	r2, r3, #1
 800363e:	627a      	str	r2, [r7, #36]	; 0x24
 8003640:	6a3a      	ldr	r2, [r7, #32]
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	701a      	strb	r2, [r3, #0]
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	1d3b      	adds	r3, r7, #4
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	461a      	mov	r2, r3
 8003652:	1d3b      	adds	r3, r7, #4
 8003654:	4619      	mov	r1, r3
 8003656:	2001      	movs	r0, #1
 8003658:	f7ff fd96 	bl	8003188 <SEGGER_RTT_WriteSkipNoLock>
 800365c:	4603      	mov	r3, r0
 800365e:	613b      	str	r3, [r7, #16]
  if (Status) {
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d009      	beq.n	800367a <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003666:	4a0a      	ldr	r2, [pc, #40]	; (8003690 <_TrySendOverflowPacket+0xd8>)
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800366c:	4b08      	ldr	r3, [pc, #32]	; (8003690 <_TrySendOverflowPacket+0xd8>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	3b01      	subs	r3, #1
 8003672:	b2da      	uxtb	r2, r3
 8003674:	4b06      	ldr	r3, [pc, #24]	; (8003690 <_TrySendOverflowPacket+0xd8>)
 8003676:	701a      	strb	r2, [r3, #0]
 8003678:	e004      	b.n	8003684 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800367a:	4b05      	ldr	r3, [pc, #20]	; (8003690 <_TrySendOverflowPacket+0xd8>)
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	3301      	adds	r3, #1
 8003680:	4a03      	ldr	r2, [pc, #12]	; (8003690 <_TrySendOverflowPacket+0xd8>)
 8003682:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003684:	693b      	ldr	r3, [r7, #16]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3730      	adds	r7, #48	; 0x30
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20015278 	.word	0x20015278
 8003694:	e0001004 	.word	0xe0001004

08003698 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003698:	b580      	push	{r7, lr}
 800369a:	b08a      	sub	sp, #40	; 0x28
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80036a4:	4b62      	ldr	r3, [pc, #392]	; (8003830 <_SendPacket+0x198>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d010      	beq.n	80036ce <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80036ac:	4b60      	ldr	r3, [pc, #384]	; (8003830 <_SendPacket+0x198>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 809f 	beq.w	80037f4 <_SendPacket+0x15c>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80036b6:	4b5e      	ldr	r3, [pc, #376]	; (8003830 <_SendPacket+0x198>)
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d108      	bne.n	80036d0 <_SendPacket+0x38>
    _TrySendOverflowPacket();
 80036be:	f7ff ff7b 	bl	80035b8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80036c2:	4b5b      	ldr	r3, [pc, #364]	; (8003830 <_SendPacket+0x198>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	f040 8096 	bne.w	80037f8 <_SendPacket+0x160>
 80036cc:	e000      	b.n	80036d0 <_SendPacket+0x38>
    goto Send;
 80036ce:	bf00      	nop
Send:
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b1f      	cmp	r3, #31
 80036d4:	d809      	bhi.n	80036ea <_SendPacket+0x52>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80036d6:	4b56      	ldr	r3, [pc, #344]	; (8003830 <_SendPacket+0x198>)
 80036d8:	69da      	ldr	r2, [r3, #28]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	fa22 f303 	lsr.w	r3, r2, r3
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f040 8089 	bne.w	80037fc <_SendPacket+0x164>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b17      	cmp	r3, #23
 80036ee:	d807      	bhi.n	8003700 <_SendPacket+0x68>
    *--pStartPacket = EventId;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	701a      	strb	r2, [r3, #0]
 80036fe:	e03d      	b.n	800377c <_SendPacket+0xe4>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	2b7f      	cmp	r3, #127	; 0x7f
 800370c:	d912      	bls.n	8003734 <_SendPacket+0x9c>
      *--pStartPacket = (NumBytes >> 7);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	3b01      	subs	r3, #1
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	09db      	lsrs	r3, r3, #7
 8003718:	b2da      	uxtb	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	3b01      	subs	r3, #1
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800372c:	b2da      	uxtb	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	701a      	strb	r2, [r3, #0]
 8003732:	e006      	b.n	8003742 <_SendPacket+0xaa>
    } else {
      *--pStartPacket = NumBytes;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	3b01      	subs	r3, #1
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	b2da      	uxtb	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b7f      	cmp	r3, #127	; 0x7f
 8003746:	d912      	bls.n	800376e <_SendPacket+0xd6>
      *--pStartPacket = (EventId >> 7);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	3b01      	subs	r3, #1
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	09db      	lsrs	r3, r3, #7
 8003752:	b2da      	uxtb	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	3b01      	subs	r3, #1
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	b2db      	uxtb	r3, r3
 8003762:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003766:	b2da      	uxtb	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	701a      	strb	r2, [r3, #0]
 800376c:	e006      	b.n	800377c <_SendPacket+0xe4>
    } else {
      *--pStartPacket = EventId;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	3b01      	subs	r3, #1
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	b2da      	uxtb	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800377c:	4b2d      	ldr	r3, [pc, #180]	; (8003834 <_SendPacket+0x19c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003782:	4b2b      	ldr	r3, [pc, #172]	; (8003830 <_SendPacket+0x198>)
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	623b      	str	r3, [r7, #32]
 8003794:	e00b      	b.n	80037ae <_SendPacket+0x116>
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	627a      	str	r2, [r7, #36]	; 0x24
 800379c:	6a3a      	ldr	r2, [r7, #32]
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037a4:	b2d2      	uxtb	r2, r2
 80037a6:	701a      	strb	r2, [r3, #0]
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	09db      	lsrs	r3, r3, #7
 80037ac:	623b      	str	r3, [r7, #32]
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	2b7f      	cmp	r3, #127	; 0x7f
 80037b2:	d8f0      	bhi.n	8003796 <_SendPacket+0xfe>
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	1c5a      	adds	r2, r3, #1
 80037b8:	627a      	str	r2, [r7, #36]	; 0x24
 80037ba:	6a3a      	ldr	r2, [r7, #32]
 80037bc:	b2d2      	uxtb	r2, r2
 80037be:	701a      	strb	r2, [r3, #0]
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	461a      	mov	r2, r3
 80037cc:	68f9      	ldr	r1, [r7, #12]
 80037ce:	2001      	movs	r0, #1
 80037d0:	f7ff fcda 	bl	8003188 <SEGGER_RTT_WriteSkipNoLock>
 80037d4:	4603      	mov	r3, r0
 80037d6:	613b      	str	r3, [r7, #16]
  if (Status) {
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <_SendPacket+0x14e>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80037de:	4a14      	ldr	r2, [pc, #80]	; (8003830 <_SendPacket+0x198>)
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	60d3      	str	r3, [r2, #12]
 80037e4:	e00b      	b.n	80037fe <_SendPacket+0x166>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80037e6:	4b12      	ldr	r3, [pc, #72]	; (8003830 <_SendPacket+0x198>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	3301      	adds	r3, #1
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	4b10      	ldr	r3, [pc, #64]	; (8003830 <_SendPacket+0x198>)
 80037f0:	701a      	strb	r2, [r3, #0]
 80037f2:	e004      	b.n	80037fe <_SendPacket+0x166>
    goto SendDone;
 80037f4:	bf00      	nop
 80037f6:	e002      	b.n	80037fe <_SendPacket+0x166>
      goto SendDone;
 80037f8:	bf00      	nop
 80037fa:	e000      	b.n	80037fe <_SendPacket+0x166>
      goto SendDone;
 80037fc:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80037fe:	4b0e      	ldr	r3, [pc, #56]	; (8003838 <_SendPacket+0x1a0>)
 8003800:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003804:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <_SendPacket+0x1a0>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380a:	429a      	cmp	r2, r3
 800380c:	d00b      	beq.n	8003826 <_SendPacket+0x18e>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800380e:	4b08      	ldr	r3, [pc, #32]	; (8003830 <_SendPacket+0x198>)
 8003810:	789b      	ldrb	r3, [r3, #2]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d107      	bne.n	8003826 <_SendPacket+0x18e>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003816:	4b06      	ldr	r3, [pc, #24]	; (8003830 <_SendPacket+0x198>)
 8003818:	2201      	movs	r2, #1
 800381a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800381c:	f7ff fe71 	bl	8003502 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003820:	4b03      	ldr	r3, [pc, #12]	; (8003830 <_SendPacket+0x198>)
 8003822:	2200      	movs	r2, #0
 8003824:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003826:	bf00      	nop
 8003828:	3728      	adds	r7, #40	; 0x28
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20015278 	.word	0x20015278
 8003834:	e0001004 	.word	0xe0001004
 8003838:	200153d4 	.word	0x200153d4

0800383c <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af02      	add	r7, sp, #8
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800384a:	2300      	movs	r3, #0
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003852:	4a14      	ldr	r2, [pc, #80]	; (80038a4 <SEGGER_SYSVIEW_Init+0x68>)
 8003854:	4914      	ldr	r1, [pc, #80]	; (80038a8 <SEGGER_SYSVIEW_Init+0x6c>)
 8003856:	2001      	movs	r0, #1
 8003858:	f7ff fd26 	bl	80032a8 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800385c:	2300      	movs	r3, #0
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	2308      	movs	r3, #8
 8003862:	4a12      	ldr	r2, [pc, #72]	; (80038ac <SEGGER_SYSVIEW_Init+0x70>)
 8003864:	4910      	ldr	r1, [pc, #64]	; (80038a8 <SEGGER_SYSVIEW_Init+0x6c>)
 8003866:	2001      	movs	r0, #1
 8003868:	f7ff fd88 	bl	800337c <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800386c:	4b10      	ldr	r3, [pc, #64]	; (80038b0 <SEGGER_SYSVIEW_Init+0x74>)
 800386e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003872:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003874:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <SEGGER_SYSVIEW_Init+0x78>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a0d      	ldr	r2, [pc, #52]	; (80038b0 <SEGGER_SYSVIEW_Init+0x74>)
 800387a:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800387c:	4a0c      	ldr	r2, [pc, #48]	; (80038b0 <SEGGER_SYSVIEW_Init+0x74>)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003882:	4a0b      	ldr	r2, [pc, #44]	; (80038b0 <SEGGER_SYSVIEW_Init+0x74>)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003888:	4a09      	ldr	r2, [pc, #36]	; (80038b0 <SEGGER_SYSVIEW_Init+0x74>)
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800388e:	4a08      	ldr	r2, [pc, #32]	; (80038b0 <SEGGER_SYSVIEW_Init+0x74>)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003894:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <SEGGER_SYSVIEW_Init+0x74>)
 8003896:	2200      	movs	r2, #0
 8003898:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800389a:	bf00      	nop
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20013270 	.word	0x20013270
 80038a8:	08004e54 	.word	0x08004e54
 80038ac:	20015270 	.word	0x20015270
 80038b0:	20015278 	.word	0x20015278
 80038b4:	e0001004 	.word	0xe0001004

080038b8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80038c0:	4a04      	ldr	r2, [pc, #16]	; (80038d4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6113      	str	r3, [r2, #16]
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	20015278 	.word	0x20015278

080038d8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80038e0:	f3ef 8311 	mrs	r3, BASEPRI
 80038e4:	f04f 0120 	mov.w	r1, #32
 80038e8:	f381 8811 	msr	BASEPRI, r1
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	4808      	ldr	r0, [pc, #32]	; (8003910 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80038f0:	f7ff fdfb 	bl	80034ea <_PreparePacket>
 80038f4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	68b9      	ldr	r1, [r7, #8]
 80038fa:	68b8      	ldr	r0, [r7, #8]
 80038fc:	f7ff fecc 	bl	8003698 <_SendPacket>
  RECORD_END();
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f383 8811 	msr	BASEPRI, r3
}
 8003906:	bf00      	nop
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	200152a8 	.word	0x200152a8

08003914 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003914:	b580      	push	{r7, lr}
 8003916:	b088      	sub	sp, #32
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800391e:	f3ef 8311 	mrs	r3, BASEPRI
 8003922:	f04f 0120 	mov.w	r1, #32
 8003926:	f381 8811 	msr	BASEPRI, r1
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	4816      	ldr	r0, [pc, #88]	; (8003988 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800392e:	f7ff fddc 	bl	80034ea <_PreparePacket>
 8003932:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	61fb      	str	r3, [r7, #28]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	61bb      	str	r3, [r7, #24]
 8003940:	e00b      	b.n	800395a <SEGGER_SYSVIEW_RecordU32+0x46>
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	61fa      	str	r2, [r7, #28]
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	701a      	strb	r2, [r3, #0]
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	09db      	lsrs	r3, r3, #7
 8003958:	61bb      	str	r3, [r7, #24]
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	2b7f      	cmp	r3, #127	; 0x7f
 800395e:	d8f0      	bhi.n	8003942 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	61fa      	str	r2, [r7, #28]
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	701a      	strb	r2, [r3, #0]
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	68f9      	ldr	r1, [r7, #12]
 8003974:	6938      	ldr	r0, [r7, #16]
 8003976:	f7ff fe8f 	bl	8003698 <_SendPacket>
  RECORD_END();
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f383 8811 	msr	BASEPRI, r3
}
 8003980:	bf00      	nop
 8003982:	3720      	adds	r7, #32
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	200152a8 	.word	0x200152a8

0800398c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800398c:	b580      	push	{r7, lr}
 800398e:	b08c      	sub	sp, #48	; 0x30
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003998:	f3ef 8311 	mrs	r3, BASEPRI
 800399c:	f04f 0120 	mov.w	r1, #32
 80039a0:	f381 8811 	msr	BASEPRI, r1
 80039a4:	61fb      	str	r3, [r7, #28]
 80039a6:	4825      	ldr	r0, [pc, #148]	; (8003a3c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80039a8:	f7ff fd9f 	bl	80034ea <_PreparePacket>
 80039ac:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80039ba:	e00b      	b.n	80039d4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80039bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	701a      	strb	r2, [r3, #0]
 80039ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d0:	09db      	lsrs	r3, r3, #7
 80039d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80039d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d6:	2b7f      	cmp	r3, #127	; 0x7f
 80039d8:	d8f0      	bhi.n	80039bc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80039da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039dc:	1c5a      	adds	r2, r3, #1
 80039de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	701a      	strb	r2, [r3, #0]
 80039e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	623b      	str	r3, [r7, #32]
 80039f2:	e00b      	b.n	8003a0c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	627a      	str	r2, [r7, #36]	; 0x24
 80039fa:	6a3a      	ldr	r2, [r7, #32]
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	701a      	strb	r2, [r3, #0]
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	09db      	lsrs	r3, r3, #7
 8003a0a:	623b      	str	r3, [r7, #32]
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8003a10:	d8f0      	bhi.n	80039f4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	627a      	str	r2, [r7, #36]	; 0x24
 8003a18:	6a3a      	ldr	r2, [r7, #32]
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	701a      	strb	r2, [r3, #0]
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	6979      	ldr	r1, [r7, #20]
 8003a26:	69b8      	ldr	r0, [r7, #24]
 8003a28:	f7ff fe36 	bl	8003698 <_SendPacket>
  RECORD_END();
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f383 8811 	msr	BASEPRI, r3
}
 8003a32:	bf00      	nop
 8003a34:	3730      	adds	r7, #48	; 0x30
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	200152a8 	.word	0x200152a8

08003a40 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08e      	sub	sp, #56	; 0x38
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
 8003a4c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8003a4e:	f3ef 8311 	mrs	r3, BASEPRI
 8003a52:	f04f 0120 	mov.w	r1, #32
 8003a56:	f381 8811 	msr	BASEPRI, r1
 8003a5a:	61fb      	str	r3, [r7, #28]
 8003a5c:	4832      	ldr	r0, [pc, #200]	; (8003b28 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8003a5e:	f7ff fd44 	bl	80034ea <_PreparePacket>
 8003a62:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	633b      	str	r3, [r7, #48]	; 0x30
 8003a70:	e00b      	b.n	8003a8a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8003a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	637a      	str	r2, [r7, #52]	; 0x34
 8003a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	701a      	strb	r2, [r3, #0]
 8003a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a86:	09db      	lsrs	r3, r3, #7
 8003a88:	633b      	str	r3, [r7, #48]	; 0x30
 8003a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8c:	2b7f      	cmp	r3, #127	; 0x7f
 8003a8e:	d8f0      	bhi.n	8003a72 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8003a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	637a      	str	r2, [r7, #52]	; 0x34
 8003a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	701a      	strb	r2, [r3, #0]
 8003a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a9e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aa8:	e00b      	b.n	8003ac2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8003aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ab2:	b2d2      	uxtb	r2, r2
 8003ab4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	701a      	strb	r2, [r3, #0]
 8003abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abe:	09db      	lsrs	r3, r3, #7
 8003ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac4:	2b7f      	cmp	r3, #127	; 0x7f
 8003ac6:	d8f0      	bhi.n	8003aaa <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8003ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	701a      	strb	r2, [r3, #0]
 8003ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	623b      	str	r3, [r7, #32]
 8003ae0:	e00b      	b.n	8003afa <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	627a      	str	r2, [r7, #36]	; 0x24
 8003ae8:	6a3a      	ldr	r2, [r7, #32]
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	701a      	strb	r2, [r3, #0]
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	09db      	lsrs	r3, r3, #7
 8003af8:	623b      	str	r3, [r7, #32]
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	2b7f      	cmp	r3, #127	; 0x7f
 8003afe:	d8f0      	bhi.n	8003ae2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	627a      	str	r2, [r7, #36]	; 0x24
 8003b06:	6a3a      	ldr	r2, [r7, #32]
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	701a      	strb	r2, [r3, #0]
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	6979      	ldr	r1, [r7, #20]
 8003b14:	69b8      	ldr	r0, [r7, #24]
 8003b16:	f7ff fdbf 	bl	8003698 <_SendPacket>
  RECORD_END();
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	f383 8811 	msr	BASEPRI, r3
}
 8003b20:	bf00      	nop
 8003b22:	3738      	adds	r7, #56	; 0x38
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	200152a8 	.word	0x200152a8

08003b2c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b090      	sub	sp, #64	; 0x40
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
 8003b38:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003b3a:	f3ef 8311 	mrs	r3, BASEPRI
 8003b3e:	f04f 0120 	mov.w	r1, #32
 8003b42:	f381 8811 	msr	BASEPRI, r1
 8003b46:	61fb      	str	r3, [r7, #28]
 8003b48:	4840      	ldr	r0, [pc, #256]	; (8003c4c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8003b4a:	f7ff fcce 	bl	80034ea <_PreparePacket>
 8003b4e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b5c:	e00b      	b.n	8003b76 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8003b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b60:	1c5a      	adds	r2, r3, #1
 8003b62:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	701a      	strb	r2, [r3, #0]
 8003b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b72:	09db      	lsrs	r3, r3, #7
 8003b74:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b78:	2b7f      	cmp	r3, #127	; 0x7f
 8003b7a:	d8f0      	bhi.n	8003b5e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8003b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b7e:	1c5a      	adds	r2, r3, #1
 8003b80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b84:	b2d2      	uxtb	r2, r2
 8003b86:	701a      	strb	r2, [r3, #0]
 8003b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b8a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	633b      	str	r3, [r7, #48]	; 0x30
 8003b94:	e00b      	b.n	8003bae <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8003b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	637a      	str	r2, [r7, #52]	; 0x34
 8003b9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	701a      	strb	r2, [r3, #0]
 8003ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003baa:	09db      	lsrs	r3, r3, #7
 8003bac:	633b      	str	r3, [r7, #48]	; 0x30
 8003bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb0:	2b7f      	cmp	r3, #127	; 0x7f
 8003bb2:	d8f0      	bhi.n	8003b96 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8003bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	637a      	str	r2, [r7, #52]	; 0x34
 8003bba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bbc:	b2d2      	uxtb	r2, r2
 8003bbe:	701a      	strb	r2, [r3, #0]
 8003bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bcc:	e00b      	b.n	8003be6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8003bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	701a      	strb	r2, [r3, #0]
 8003be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be2:	09db      	lsrs	r3, r3, #7
 8003be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be8:	2b7f      	cmp	r3, #127	; 0x7f
 8003bea:	d8f0      	bhi.n	8003bce <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	701a      	strb	r2, [r3, #0]
 8003bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8003c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c02:	623b      	str	r3, [r7, #32]
 8003c04:	e00b      	b.n	8003c1e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	627a      	str	r2, [r7, #36]	; 0x24
 8003c0c:	6a3a      	ldr	r2, [r7, #32]
 8003c0e:	b2d2      	uxtb	r2, r2
 8003c10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c14:	b2d2      	uxtb	r2, r2
 8003c16:	701a      	strb	r2, [r3, #0]
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	09db      	lsrs	r3, r3, #7
 8003c1c:	623b      	str	r3, [r7, #32]
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	2b7f      	cmp	r3, #127	; 0x7f
 8003c22:	d8f0      	bhi.n	8003c06 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	627a      	str	r2, [r7, #36]	; 0x24
 8003c2a:	6a3a      	ldr	r2, [r7, #32]
 8003c2c:	b2d2      	uxtb	r2, r2
 8003c2e:	701a      	strb	r2, [r3, #0]
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	6979      	ldr	r1, [r7, #20]
 8003c38:	69b8      	ldr	r0, [r7, #24]
 8003c3a:	f7ff fd2d 	bl	8003698 <_SendPacket>
  RECORD_END();
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	f383 8811 	msr	BASEPRI, r3
}
 8003c44:	bf00      	nop
 8003c46:	3740      	adds	r7, #64	; 0x40
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	200152a8 	.word	0x200152a8

08003c50 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b08c      	sub	sp, #48	; 0x30
 8003c54:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003c56:	4b59      	ldr	r3, [pc, #356]	; (8003dbc <SEGGER_SYSVIEW_Start+0x16c>)
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f040 80aa 	bne.w	8003db4 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8003c60:	4b56      	ldr	r3, [pc, #344]	; (8003dbc <SEGGER_SYSVIEW_Start+0x16c>)
 8003c62:	2201      	movs	r2, #1
 8003c64:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003c66:	f3ef 8311 	mrs	r3, BASEPRI
 8003c6a:	f04f 0120 	mov.w	r1, #32
 8003c6e:	f381 8811 	msr	BASEPRI, r1
 8003c72:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003c74:	220a      	movs	r2, #10
 8003c76:	4952      	ldr	r1, [pc, #328]	; (8003dc0 <SEGGER_SYSVIEW_Start+0x170>)
 8003c78:	2001      	movs	r0, #1
 8003c7a:	f7ff fa85 	bl	8003188 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003c84:	200a      	movs	r0, #10
 8003c86:	f7ff fe27 	bl	80038d8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003c8a:	f3ef 8311 	mrs	r3, BASEPRI
 8003c8e:	f04f 0120 	mov.w	r1, #32
 8003c92:	f381 8811 	msr	BASEPRI, r1
 8003c96:	60bb      	str	r3, [r7, #8]
 8003c98:	484a      	ldr	r0, [pc, #296]	; (8003dc4 <SEGGER_SYSVIEW_Start+0x174>)
 8003c9a:	f7ff fc26 	bl	80034ea <_PreparePacket>
 8003c9e:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ca8:	4b44      	ldr	r3, [pc, #272]	; (8003dbc <SEGGER_SYSVIEW_Start+0x16c>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cae:	e00b      	b.n	8003cc8 <SEGGER_SYSVIEW_Start+0x78>
 8003cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb2:	1c5a      	adds	r2, r3, #1
 8003cb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	701a      	strb	r2, [r3, #0]
 8003cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc4:	09db      	lsrs	r3, r3, #7
 8003cc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cca:	2b7f      	cmp	r3, #127	; 0x7f
 8003ccc:	d8f0      	bhi.n	8003cb0 <SEGGER_SYSVIEW_Start+0x60>
 8003cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd0:	1c5a      	adds	r2, r3, #1
 8003cd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	701a      	strb	r2, [r3, #0]
 8003cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cdc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce2:	4b36      	ldr	r3, [pc, #216]	; (8003dbc <SEGGER_SYSVIEW_Start+0x16c>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	623b      	str	r3, [r7, #32]
 8003ce8:	e00b      	b.n	8003d02 <SEGGER_SYSVIEW_Start+0xb2>
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	1c5a      	adds	r2, r3, #1
 8003cee:	627a      	str	r2, [r7, #36]	; 0x24
 8003cf0:	6a3a      	ldr	r2, [r7, #32]
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cf8:	b2d2      	uxtb	r2, r2
 8003cfa:	701a      	strb	r2, [r3, #0]
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	09db      	lsrs	r3, r3, #7
 8003d00:	623b      	str	r3, [r7, #32]
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	2b7f      	cmp	r3, #127	; 0x7f
 8003d06:	d8f0      	bhi.n	8003cea <SEGGER_SYSVIEW_Start+0x9a>
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	627a      	str	r2, [r7, #36]	; 0x24
 8003d0e:	6a3a      	ldr	r2, [r7, #32]
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	701a      	strb	r2, [r3, #0]
 8003d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d16:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	61fb      	str	r3, [r7, #28]
 8003d1c:	4b27      	ldr	r3, [pc, #156]	; (8003dbc <SEGGER_SYSVIEW_Start+0x16c>)
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	61bb      	str	r3, [r7, #24]
 8003d22:	e00b      	b.n	8003d3c <SEGGER_SYSVIEW_Start+0xec>
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	61fa      	str	r2, [r7, #28]
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	701a      	strb	r2, [r3, #0]
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	09db      	lsrs	r3, r3, #7
 8003d3a:	61bb      	str	r3, [r7, #24]
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	2b7f      	cmp	r3, #127	; 0x7f
 8003d40:	d8f0      	bhi.n	8003d24 <SEGGER_SYSVIEW_Start+0xd4>
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	61fa      	str	r2, [r7, #28]
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	701a      	strb	r2, [r3, #0]
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	2302      	movs	r3, #2
 8003d58:	613b      	str	r3, [r7, #16]
 8003d5a:	e00b      	b.n	8003d74 <SEGGER_SYSVIEW_Start+0x124>
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	617a      	str	r2, [r7, #20]
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	b2d2      	uxtb	r2, r2
 8003d66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	701a      	strb	r2, [r3, #0]
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	09db      	lsrs	r3, r3, #7
 8003d72:	613b      	str	r3, [r7, #16]
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	2b7f      	cmp	r3, #127	; 0x7f
 8003d78:	d8f0      	bhi.n	8003d5c <SEGGER_SYSVIEW_Start+0x10c>
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	617a      	str	r2, [r7, #20]
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	701a      	strb	r2, [r3, #0]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003d8a:	2218      	movs	r2, #24
 8003d8c:	6839      	ldr	r1, [r7, #0]
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7ff fc82 	bl	8003698 <_SendPacket>
      RECORD_END();
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003d9a:	4b08      	ldr	r3, [pc, #32]	; (8003dbc <SEGGER_SYSVIEW_Start+0x16c>)
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003da2:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <SEGGER_SYSVIEW_Start+0x16c>)
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003da8:	f000 f9ec 	bl	8004184 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003dac:	f000 f9b2 	bl	8004114 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003db0:	f000 fbac 	bl	800450c <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8003db4:	bf00      	nop
 8003db6:	3730      	adds	r7, #48	; 0x30
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	20015278 	.word	0x20015278
 8003dc0:	08004e88 	.word	0x08004e88
 8003dc4:	200152a8 	.word	0x200152a8

08003dc8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003dce:	f3ef 8311 	mrs	r3, BASEPRI
 8003dd2:	f04f 0120 	mov.w	r1, #32
 8003dd6:	f381 8811 	msr	BASEPRI, r1
 8003dda:	607b      	str	r3, [r7, #4]
 8003ddc:	480b      	ldr	r0, [pc, #44]	; (8003e0c <SEGGER_SYSVIEW_Stop+0x44>)
 8003dde:	f7ff fb84 	bl	80034ea <_PreparePacket>
 8003de2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003de4:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <SEGGER_SYSVIEW_Stop+0x48>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d007      	beq.n	8003dfc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003dec:	220b      	movs	r2, #11
 8003dee:	6839      	ldr	r1, [r7, #0]
 8003df0:	6838      	ldr	r0, [r7, #0]
 8003df2:	f7ff fc51 	bl	8003698 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003df6:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <SEGGER_SYSVIEW_Stop+0x48>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f383 8811 	msr	BASEPRI, r3
}
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	200152a8 	.word	0x200152a8
 8003e10:	20015278 	.word	0x20015278

08003e14 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08c      	sub	sp, #48	; 0x30
 8003e18:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003e1a:	f3ef 8311 	mrs	r3, BASEPRI
 8003e1e:	f04f 0120 	mov.w	r1, #32
 8003e22:	f381 8811 	msr	BASEPRI, r1
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	4845      	ldr	r0, [pc, #276]	; (8003f40 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003e2a:	f7ff fb5e 	bl	80034ea <_PreparePacket>
 8003e2e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e38:	4b42      	ldr	r3, [pc, #264]	; (8003f44 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e3e:	e00b      	b.n	8003e58 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	701a      	strb	r2, [r3, #0]
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	09db      	lsrs	r3, r3, #7
 8003e56:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5a:	2b7f      	cmp	r3, #127	; 0x7f
 8003e5c:	d8f0      	bhi.n	8003e40 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	701a      	strb	r2, [r3, #0]
 8003e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	627b      	str	r3, [r7, #36]	; 0x24
 8003e72:	4b34      	ldr	r3, [pc, #208]	; (8003f44 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	623b      	str	r3, [r7, #32]
 8003e78:	e00b      	b.n	8003e92 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	627a      	str	r2, [r7, #36]	; 0x24
 8003e80:	6a3a      	ldr	r2, [r7, #32]
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	701a      	strb	r2, [r3, #0]
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	09db      	lsrs	r3, r3, #7
 8003e90:	623b      	str	r3, [r7, #32]
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	2b7f      	cmp	r3, #127	; 0x7f
 8003e96:	d8f0      	bhi.n	8003e7a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	627a      	str	r2, [r7, #36]	; 0x24
 8003e9e:	6a3a      	ldr	r2, [r7, #32]
 8003ea0:	b2d2      	uxtb	r2, r2
 8003ea2:	701a      	strb	r2, [r3, #0]
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	61fb      	str	r3, [r7, #28]
 8003eac:	4b25      	ldr	r3, [pc, #148]	; (8003f44 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	61bb      	str	r3, [r7, #24]
 8003eb2:	e00b      	b.n	8003ecc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	61fa      	str	r2, [r7, #28]
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	b2d2      	uxtb	r2, r2
 8003ebe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	701a      	strb	r2, [r3, #0]
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	09db      	lsrs	r3, r3, #7
 8003eca:	61bb      	str	r3, [r7, #24]
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	2b7f      	cmp	r3, #127	; 0x7f
 8003ed0:	d8f0      	bhi.n	8003eb4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	1c5a      	adds	r2, r3, #1
 8003ed6:	61fa      	str	r2, [r7, #28]
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	701a      	strb	r2, [r3, #0]
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	613b      	str	r3, [r7, #16]
 8003eea:	e00b      	b.n	8003f04 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	617a      	str	r2, [r7, #20]
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	b2d2      	uxtb	r2, r2
 8003ef6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	701a      	strb	r2, [r3, #0]
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	09db      	lsrs	r3, r3, #7
 8003f02:	613b      	str	r3, [r7, #16]
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	2b7f      	cmp	r3, #127	; 0x7f
 8003f08:	d8f0      	bhi.n	8003eec <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	617a      	str	r2, [r7, #20]
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	701a      	strb	r2, [r3, #0]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003f1a:	2218      	movs	r2, #24
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	68b8      	ldr	r0, [r7, #8]
 8003f20:	f7ff fbba 	bl	8003698 <_SendPacket>
  RECORD_END();
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003f2a:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003f32:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	4798      	blx	r3
  }
}
 8003f38:	bf00      	nop
 8003f3a:	3730      	adds	r7, #48	; 0x30
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	200152a8 	.word	0x200152a8
 8003f44:	20015278 	.word	0x20015278

08003f48 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b092      	sub	sp, #72	; 0x48
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003f50:	f3ef 8311 	mrs	r3, BASEPRI
 8003f54:	f04f 0120 	mov.w	r1, #32
 8003f58:	f381 8811 	msr	BASEPRI, r1
 8003f5c:	617b      	str	r3, [r7, #20]
 8003f5e:	486b      	ldr	r0, [pc, #428]	; (800410c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003f60:	f7ff fac3 	bl	80034ea <_PreparePacket>
 8003f64:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	4b67      	ldr	r3, [pc, #412]	; (8004110 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	089b      	lsrs	r3, r3, #2
 8003f7a:	643b      	str	r3, [r7, #64]	; 0x40
 8003f7c:	e00b      	b.n	8003f96 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8003f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	647a      	str	r2, [r7, #68]	; 0x44
 8003f84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f8c:	b2d2      	uxtb	r2, r2
 8003f8e:	701a      	strb	r2, [r3, #0]
 8003f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f92:	09db      	lsrs	r3, r3, #7
 8003f94:	643b      	str	r3, [r7, #64]	; 0x40
 8003f96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f98:	2b7f      	cmp	r3, #127	; 0x7f
 8003f9a:	d8f0      	bhi.n	8003f7e <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8003f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f9e:	1c5a      	adds	r2, r3, #1
 8003fa0:	647a      	str	r2, [r7, #68]	; 0x44
 8003fa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fa4:	b2d2      	uxtb	r2, r2
 8003fa6:	701a      	strb	r2, [r3, #0]
 8003fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003faa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fb6:	e00b      	b.n	8003fd0 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8003fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003fbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fc0:	b2d2      	uxtb	r2, r2
 8003fc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	701a      	strb	r2, [r3, #0]
 8003fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fcc:	09db      	lsrs	r3, r3, #7
 8003fce:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd2:	2b7f      	cmp	r3, #127	; 0x7f
 8003fd4:	d8f0      	bhi.n	8003fb8 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8003fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fd8:	1c5a      	adds	r2, r3, #1
 8003fda:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003fdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	701a      	strb	r2, [r3, #0]
 8003fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe4:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2220      	movs	r2, #32
 8003fec:	4619      	mov	r1, r3
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f7ff fa2e 	bl	8003450 <_EncodeStr>
 8003ff4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003ff6:	2209      	movs	r2, #9
 8003ff8:	68f9      	ldr	r1, [r7, #12]
 8003ffa:	6938      	ldr	r0, [r7, #16]
 8003ffc:	f7ff fb4c 	bl	8003698 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	637b      	str	r3, [r7, #52]	; 0x34
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	4b40      	ldr	r3, [pc, #256]	; (8004110 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	089b      	lsrs	r3, r3, #2
 8004014:	633b      	str	r3, [r7, #48]	; 0x30
 8004016:	e00b      	b.n	8004030 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8004018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	637a      	str	r2, [r7, #52]	; 0x34
 800401e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	701a      	strb	r2, [r3, #0]
 800402a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402c:	09db      	lsrs	r3, r3, #7
 800402e:	633b      	str	r3, [r7, #48]	; 0x30
 8004030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004032:	2b7f      	cmp	r3, #127	; 0x7f
 8004034:	d8f0      	bhi.n	8004018 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8004036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	637a      	str	r2, [r7, #52]	; 0x34
 800403c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	701a      	strb	r2, [r3, #0]
 8004042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004044:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	62fb      	str	r3, [r7, #44]	; 0x2c
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004050:	e00b      	b.n	800406a <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8004052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004058:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	701a      	strb	r2, [r3, #0]
 8004064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004066:	09db      	lsrs	r3, r3, #7
 8004068:	62bb      	str	r3, [r7, #40]	; 0x28
 800406a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406c:	2b7f      	cmp	r3, #127	; 0x7f
 800406e:	d8f0      	bhi.n	8004052 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8004070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004072:	1c5a      	adds	r2, r3, #1
 8004074:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004076:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	701a      	strb	r2, [r3, #0]
 800407c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	623b      	str	r3, [r7, #32]
 800408a:	e00b      	b.n	80040a4 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	627a      	str	r2, [r7, #36]	; 0x24
 8004092:	6a3a      	ldr	r2, [r7, #32]
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	701a      	strb	r2, [r3, #0]
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	09db      	lsrs	r3, r3, #7
 80040a2:	623b      	str	r3, [r7, #32]
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	2b7f      	cmp	r3, #127	; 0x7f
 80040a8:	d8f0      	bhi.n	800408c <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	627a      	str	r2, [r7, #36]	; 0x24
 80040b0:	6a3a      	ldr	r2, [r7, #32]
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	701a      	strb	r2, [r3, #0]
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	61fb      	str	r3, [r7, #28]
 80040be:	2300      	movs	r3, #0
 80040c0:	61bb      	str	r3, [r7, #24]
 80040c2:	e00b      	b.n	80040dc <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	61fa      	str	r2, [r7, #28]
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	b2d2      	uxtb	r2, r2
 80040ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	701a      	strb	r2, [r3, #0]
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	09db      	lsrs	r3, r3, #7
 80040da:	61bb      	str	r3, [r7, #24]
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	2b7f      	cmp	r3, #127	; 0x7f
 80040e0:	d8f0      	bhi.n	80040c4 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	61fa      	str	r2, [r7, #28]
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	701a      	strb	r2, [r3, #0]
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80040f2:	2215      	movs	r2, #21
 80040f4:	68f9      	ldr	r1, [r7, #12]
 80040f6:	6938      	ldr	r0, [r7, #16]
 80040f8:	f7ff face 	bl	8003698 <_SendPacket>
  RECORD_END();
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f383 8811 	msr	BASEPRI, r3
}
 8004102:	bf00      	nop
 8004104:	3748      	adds	r7, #72	; 0x48
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	200152a8 	.word	0x200152a8
 8004110:	20015278 	.word	0x20015278

08004114 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004118:	4b07      	ldr	r3, [pc, #28]	; (8004138 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d008      	beq.n	8004132 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004120:	4b05      	ldr	r3, [pc, #20]	; (8004138 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800412a:	4b03      	ldr	r3, [pc, #12]	; (8004138 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	4798      	blx	r3
  }
}
 8004132:	bf00      	nop
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	20015278 	.word	0x20015278

0800413c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004144:	f3ef 8311 	mrs	r3, BASEPRI
 8004148:	f04f 0120 	mov.w	r1, #32
 800414c:	f381 8811 	msr	BASEPRI, r1
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	480b      	ldr	r0, [pc, #44]	; (8004180 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004154:	f7ff f9c9 	bl	80034ea <_PreparePacket>
 8004158:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800415a:	2280      	movs	r2, #128	; 0x80
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	6938      	ldr	r0, [r7, #16]
 8004160:	f7ff f976 	bl	8003450 <_EncodeStr>
 8004164:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004166:	220e      	movs	r2, #14
 8004168:	68f9      	ldr	r1, [r7, #12]
 800416a:	6938      	ldr	r0, [r7, #16]
 800416c:	f7ff fa94 	bl	8003698 <_SendPacket>
  RECORD_END();
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f383 8811 	msr	BASEPRI, r3
}
 8004176:	bf00      	nop
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	200152a8 	.word	0x200152a8

08004184 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800418a:	4b12      	ldr	r3, [pc, #72]	; (80041d4 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d015      	beq.n	80041be <SEGGER_SYSVIEW_RecordSystime+0x3a>
 8004192:	4b10      	ldr	r3, [pc, #64]	; (80041d4 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d010      	beq.n	80041be <SEGGER_SYSVIEW_RecordSystime+0x3a>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800419c:	4b0d      	ldr	r3, [pc, #52]	; (80041d4 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4798      	blx	r3
 80041a4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80041a8:	6839      	ldr	r1, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80041aa:	e897 0018 	ldmia.w	r7, {r3, r4}
 80041ae:	0025      	movs	r5, r4
 80041b0:	2600      	movs	r6, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80041b2:	462b      	mov	r3, r5
 80041b4:	461a      	mov	r2, r3
 80041b6:	200d      	movs	r0, #13
 80041b8:	f7ff fbe8 	bl	800398c <SEGGER_SYSVIEW_RecordU32x2>
 80041bc:	e005      	b.n	80041ca <SEGGER_SYSVIEW_RecordSystime+0x46>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80041be:	4b06      	ldr	r3, [pc, #24]	; (80041d8 <SEGGER_SYSVIEW_RecordSystime+0x54>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4619      	mov	r1, r3
 80041c4:	200c      	movs	r0, #12
 80041c6:	f7ff fba5 	bl	8003914 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20015278 	.word	0x20015278
 80041d8:	e0001004 	.word	0xe0001004

080041dc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80041e2:	f3ef 8311 	mrs	r3, BASEPRI
 80041e6:	f04f 0120 	mov.w	r1, #32
 80041ea:	f381 8811 	msr	BASEPRI, r1
 80041ee:	607b      	str	r3, [r7, #4]
 80041f0:	4807      	ldr	r0, [pc, #28]	; (8004210 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80041f2:	f7ff f97a 	bl	80034ea <_PreparePacket>
 80041f6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80041f8:	2211      	movs	r2, #17
 80041fa:	6839      	ldr	r1, [r7, #0]
 80041fc:	6838      	ldr	r0, [r7, #0]
 80041fe:	f7ff fa4b 	bl	8003698 <_SendPacket>
  RECORD_END();
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f383 8811 	msr	BASEPRI, r3
}
 8004208:	bf00      	nop
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	200152a8 	.word	0x200152a8

08004214 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004214:	b580      	push	{r7, lr}
 8004216:	b088      	sub	sp, #32
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800421c:	f3ef 8311 	mrs	r3, BASEPRI
 8004220:	f04f 0120 	mov.w	r1, #32
 8004224:	f381 8811 	msr	BASEPRI, r1
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	481a      	ldr	r0, [pc, #104]	; (8004294 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800422c:	f7ff f95d 	bl	80034ea <_PreparePacket>
 8004230:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004236:	4b18      	ldr	r3, [pc, #96]	; (8004298 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	089b      	lsrs	r3, r3, #2
 8004240:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	61fb      	str	r3, [r7, #28]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	61bb      	str	r3, [r7, #24]
 800424a:	e00b      	b.n	8004264 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	1c5a      	adds	r2, r3, #1
 8004250:	61fa      	str	r2, [r7, #28]
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	b2d2      	uxtb	r2, r2
 8004256:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	701a      	strb	r2, [r3, #0]
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	09db      	lsrs	r3, r3, #7
 8004262:	61bb      	str	r3, [r7, #24]
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	2b7f      	cmp	r3, #127	; 0x7f
 8004268:	d8f0      	bhi.n	800424c <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	61fa      	str	r2, [r7, #28]
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800427a:	2208      	movs	r2, #8
 800427c:	68f9      	ldr	r1, [r7, #12]
 800427e:	6938      	ldr	r0, [r7, #16]
 8004280:	f7ff fa0a 	bl	8003698 <_SendPacket>
  RECORD_END();
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f383 8811 	msr	BASEPRI, r3
}
 800428a:	bf00      	nop
 800428c:	3720      	adds	r7, #32
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	200152a8 	.word	0x200152a8
 8004298:	20015278 	.word	0x20015278

0800429c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800429c:	b580      	push	{r7, lr}
 800429e:	b088      	sub	sp, #32
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80042a4:	f3ef 8311 	mrs	r3, BASEPRI
 80042a8:	f04f 0120 	mov.w	r1, #32
 80042ac:	f381 8811 	msr	BASEPRI, r1
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	481a      	ldr	r0, [pc, #104]	; (800431c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80042b4:	f7ff f919 	bl	80034ea <_PreparePacket>
 80042b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80042be:	4b18      	ldr	r3, [pc, #96]	; (8004320 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	089b      	lsrs	r3, r3, #2
 80042c8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	61fb      	str	r3, [r7, #28]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	61bb      	str	r3, [r7, #24]
 80042d2:	e00b      	b.n	80042ec <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	61fa      	str	r2, [r7, #28]
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	701a      	strb	r2, [r3, #0]
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	09db      	lsrs	r3, r3, #7
 80042ea:	61bb      	str	r3, [r7, #24]
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	2b7f      	cmp	r3, #127	; 0x7f
 80042f0:	d8f0      	bhi.n	80042d4 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	61fa      	str	r2, [r7, #28]
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	701a      	strb	r2, [r3, #0]
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004302:	2204      	movs	r2, #4
 8004304:	68f9      	ldr	r1, [r7, #12]
 8004306:	6938      	ldr	r0, [r7, #16]
 8004308:	f7ff f9c6 	bl	8003698 <_SendPacket>
  RECORD_END();
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	f383 8811 	msr	BASEPRI, r3
}
 8004312:	bf00      	nop
 8004314:	3720      	adds	r7, #32
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	200152a8 	.word	0x200152a8
 8004320:	20015278 	.word	0x20015278

08004324 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800432c:	f3ef 8311 	mrs	r3, BASEPRI
 8004330:	f04f 0120 	mov.w	r1, #32
 8004334:	f381 8811 	msr	BASEPRI, r1
 8004338:	617b      	str	r3, [r7, #20]
 800433a:	481a      	ldr	r0, [pc, #104]	; (80043a4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800433c:	f7ff f8d5 	bl	80034ea <_PreparePacket>
 8004340:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004346:	4b18      	ldr	r3, [pc, #96]	; (80043a8 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	089b      	lsrs	r3, r3, #2
 8004350:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	61bb      	str	r3, [r7, #24]
 800435a:	e00b      	b.n	8004374 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	61fa      	str	r2, [r7, #28]
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	b2d2      	uxtb	r2, r2
 8004366:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	701a      	strb	r2, [r3, #0]
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	09db      	lsrs	r3, r3, #7
 8004372:	61bb      	str	r3, [r7, #24]
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	2b7f      	cmp	r3, #127	; 0x7f
 8004378:	d8f0      	bhi.n	800435c <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	61fa      	str	r2, [r7, #28]
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	701a      	strb	r2, [r3, #0]
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800438a:	2206      	movs	r2, #6
 800438c:	68f9      	ldr	r1, [r7, #12]
 800438e:	6938      	ldr	r0, [r7, #16]
 8004390:	f7ff f982 	bl	8003698 <_SendPacket>
  RECORD_END();
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f383 8811 	msr	BASEPRI, r3
}
 800439a:	bf00      	nop
 800439c:	3720      	adds	r7, #32
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	200152a8 	.word	0x200152a8
 80043a8:	20015278 	.word	0x20015278

080043ac <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80043b4:	4b05      	ldr	r3, [pc, #20]	; (80043cc <SEGGER_SYSVIEW_ShrinkId+0x20>)
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	089b      	lsrs	r3, r3, #2
}
 80043be:	4618      	mov	r0, r3
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	20015278 	.word	0x20015278

080043d0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08c      	sub	sp, #48	; 0x30
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4603      	mov	r3, r0
 80043d8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80043da:	4b3b      	ldr	r3, [pc, #236]	; (80044c8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d06d      	beq.n	80044be <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80043e2:	4b39      	ldr	r3, [pc, #228]	; (80044c8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80043e8:	2300      	movs	r3, #0
 80043ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ec:	e008      	b.n	8004400 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80043ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80043f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d007      	beq.n	800440a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80043fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fc:	3301      	adds	r3, #1
 80043fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004400:	79fa      	ldrb	r2, [r7, #7]
 8004402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004404:	429a      	cmp	r2, r3
 8004406:	d8f2      	bhi.n	80043ee <SEGGER_SYSVIEW_SendModule+0x1e>
 8004408:	e000      	b.n	800440c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800440a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800440c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800440e:	2b00      	cmp	r3, #0
 8004410:	d055      	beq.n	80044be <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004412:	f3ef 8311 	mrs	r3, BASEPRI
 8004416:	f04f 0120 	mov.w	r1, #32
 800441a:	f381 8811 	msr	BASEPRI, r1
 800441e:	617b      	str	r3, [r7, #20]
 8004420:	482a      	ldr	r0, [pc, #168]	; (80044cc <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004422:	f7ff f862 	bl	80034ea <_PreparePacket>
 8004426:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	627b      	str	r3, [r7, #36]	; 0x24
 8004430:	79fb      	ldrb	r3, [r7, #7]
 8004432:	623b      	str	r3, [r7, #32]
 8004434:	e00b      	b.n	800444e <SEGGER_SYSVIEW_SendModule+0x7e>
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	1c5a      	adds	r2, r3, #1
 800443a:	627a      	str	r2, [r7, #36]	; 0x24
 800443c:	6a3a      	ldr	r2, [r7, #32]
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004444:	b2d2      	uxtb	r2, r2
 8004446:	701a      	strb	r2, [r3, #0]
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	09db      	lsrs	r3, r3, #7
 800444c:	623b      	str	r3, [r7, #32]
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	2b7f      	cmp	r3, #127	; 0x7f
 8004452:	d8f0      	bhi.n	8004436 <SEGGER_SYSVIEW_SendModule+0x66>
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	1c5a      	adds	r2, r3, #1
 8004458:	627a      	str	r2, [r7, #36]	; 0x24
 800445a:	6a3a      	ldr	r2, [r7, #32]
 800445c:	b2d2      	uxtb	r2, r2
 800445e:	701a      	strb	r2, [r3, #0]
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	61fb      	str	r3, [r7, #28]
 8004468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	61bb      	str	r3, [r7, #24]
 800446e:	e00b      	b.n	8004488 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	61fa      	str	r2, [r7, #28]
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	b2d2      	uxtb	r2, r2
 800447a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	701a      	strb	r2, [r3, #0]
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	09db      	lsrs	r3, r3, #7
 8004486:	61bb      	str	r3, [r7, #24]
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	2b7f      	cmp	r3, #127	; 0x7f
 800448c:	d8f0      	bhi.n	8004470 <SEGGER_SYSVIEW_SendModule+0xa0>
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	1c5a      	adds	r2, r3, #1
 8004492:	61fa      	str	r2, [r7, #28]
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	701a      	strb	r2, [r3, #0]
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800449e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2280      	movs	r2, #128	; 0x80
 80044a4:	4619      	mov	r1, r3
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f7fe ffd2 	bl	8003450 <_EncodeStr>
 80044ac:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80044ae:	2216      	movs	r2, #22
 80044b0:	68f9      	ldr	r1, [r7, #12]
 80044b2:	6938      	ldr	r0, [r7, #16]
 80044b4:	f7ff f8f0 	bl	8003698 <_SendPacket>
      RECORD_END();
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80044be:	bf00      	nop
 80044c0:	3730      	adds	r7, #48	; 0x30
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	200152a0 	.word	0x200152a0
 80044cc:	200152a8 	.word	0x200152a8

080044d0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80044d6:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00f      	beq.n	80044fe <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80044de:	4b0a      	ldr	r3, [pc, #40]	; (8004508 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d002      	beq.n	80044f2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f2      	bne.n	80044e4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80044fe:	bf00      	nop
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	200152a0 	.word	0x200152a0

0800450c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004512:	f3ef 8311 	mrs	r3, BASEPRI
 8004516:	f04f 0120 	mov.w	r1, #32
 800451a:	f381 8811 	msr	BASEPRI, r1
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	4817      	ldr	r0, [pc, #92]	; (8004580 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004522:	f7fe ffe2 	bl	80034ea <_PreparePacket>
 8004526:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	4b14      	ldr	r3, [pc, #80]	; (8004584 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	613b      	str	r3, [r7, #16]
 8004536:	e00b      	b.n	8004550 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	617a      	str	r2, [r7, #20]
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	b2d2      	uxtb	r2, r2
 8004542:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	09db      	lsrs	r3, r3, #7
 800454e:	613b      	str	r3, [r7, #16]
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	2b7f      	cmp	r3, #127	; 0x7f
 8004554:	d8f0      	bhi.n	8004538 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	617a      	str	r2, [r7, #20]
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	701a      	strb	r2, [r3, #0]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004566:	221b      	movs	r2, #27
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	68b8      	ldr	r0, [r7, #8]
 800456c:	f7ff f894 	bl	8003698 <_SendPacket>
  RECORD_END();
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f383 8811 	msr	BASEPRI, r3
}
 8004576:	bf00      	nop
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	200152a8 	.word	0x200152a8
 8004584:	200152a4 	.word	0x200152a4

08004588 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004588:	b580      	push	{r7, lr}
 800458a:	b08a      	sub	sp, #40	; 0x28
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004590:	f3ef 8311 	mrs	r3, BASEPRI
 8004594:	f04f 0120 	mov.w	r1, #32
 8004598:	f381 8811 	msr	BASEPRI, r1
 800459c:	617b      	str	r3, [r7, #20]
 800459e:	4827      	ldr	r0, [pc, #156]	; (800463c <SEGGER_SYSVIEW_Warn+0xb4>)
 80045a0:	f7fe ffa3 	bl	80034ea <_PreparePacket>
 80045a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80045a6:	2280      	movs	r2, #128	; 0x80
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	6938      	ldr	r0, [r7, #16]
 80045ac:	f7fe ff50 	bl	8003450 <_EncodeStr>
 80045b0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	627b      	str	r3, [r7, #36]	; 0x24
 80045b6:	2301      	movs	r3, #1
 80045b8:	623b      	str	r3, [r7, #32]
 80045ba:	e00b      	b.n	80045d4 <SEGGER_SYSVIEW_Warn+0x4c>
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	1c5a      	adds	r2, r3, #1
 80045c0:	627a      	str	r2, [r7, #36]	; 0x24
 80045c2:	6a3a      	ldr	r2, [r7, #32]
 80045c4:	b2d2      	uxtb	r2, r2
 80045c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	701a      	strb	r2, [r3, #0]
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	09db      	lsrs	r3, r3, #7
 80045d2:	623b      	str	r3, [r7, #32]
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	2b7f      	cmp	r3, #127	; 0x7f
 80045d8:	d8f0      	bhi.n	80045bc <SEGGER_SYSVIEW_Warn+0x34>
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	627a      	str	r2, [r7, #36]	; 0x24
 80045e0:	6a3a      	ldr	r2, [r7, #32]
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	61fb      	str	r3, [r7, #28]
 80045ee:	2300      	movs	r3, #0
 80045f0:	61bb      	str	r3, [r7, #24]
 80045f2:	e00b      	b.n	800460c <SEGGER_SYSVIEW_Warn+0x84>
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	61fa      	str	r2, [r7, #28]
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004602:	b2d2      	uxtb	r2, r2
 8004604:	701a      	strb	r2, [r3, #0]
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	09db      	lsrs	r3, r3, #7
 800460a:	61bb      	str	r3, [r7, #24]
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	2b7f      	cmp	r3, #127	; 0x7f
 8004610:	d8f0      	bhi.n	80045f4 <SEGGER_SYSVIEW_Warn+0x6c>
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	61fa      	str	r2, [r7, #28]
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	701a      	strb	r2, [r3, #0]
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004622:	221a      	movs	r2, #26
 8004624:	68f9      	ldr	r1, [r7, #12]
 8004626:	6938      	ldr	r0, [r7, #16]
 8004628:	f7ff f836 	bl	8003698 <_SendPacket>
  RECORD_END();
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f383 8811 	msr	BASEPRI, r3
}
 8004632:	bf00      	nop
 8004634:	3728      	adds	r7, #40	; 0x28
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	200152a8 	.word	0x200152a8

08004640 <STM_EVAL_LEDInit>:
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	71fb      	strb	r3, [r7, #7]
 800464a:	79fb      	ldrb	r3, [r7, #7]
 800464c:	4a10      	ldr	r2, [pc, #64]	; (8004690 <STM_EVAL_LEDInit+0x50>)
 800464e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004652:	2101      	movs	r1, #1
 8004654:	4618      	mov	r0, r3
 8004656:	f7fe fb4b 	bl	8002cf0 <RCC_AHB1PeriphClockCmd>
 800465a:	79fb      	ldrb	r3, [r7, #7]
 800465c:	4a0d      	ldr	r2, [pc, #52]	; (8004694 <STM_EVAL_LEDInit+0x54>)
 800465e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004662:	60bb      	str	r3, [r7, #8]
 8004664:	2301      	movs	r3, #1
 8004666:	733b      	strb	r3, [r7, #12]
 8004668:	2300      	movs	r3, #0
 800466a:	73bb      	strb	r3, [r7, #14]
 800466c:	2301      	movs	r3, #1
 800466e:	73fb      	strb	r3, [r7, #15]
 8004670:	2302      	movs	r3, #2
 8004672:	737b      	strb	r3, [r7, #13]
 8004674:	79fb      	ldrb	r3, [r7, #7]
 8004676:	4a08      	ldr	r2, [pc, #32]	; (8004698 <STM_EVAL_LEDInit+0x58>)
 8004678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800467c:	f107 0208 	add.w	r2, r7, #8
 8004680:	4611      	mov	r1, r2
 8004682:	4618      	mov	r0, r3
 8004684:	f7fe fa78 	bl	8002b78 <GPIO_Init>
 8004688:	bf00      	nop
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	08004e9c 	.word	0x08004e9c
 8004694:	08004e94 	.word	0x08004e94
 8004698:	20000004 	.word	0x20000004

0800469c <STM_EVAL_LEDOn>:
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	4603      	mov	r3, r0
 80046a4:	71fb      	strb	r3, [r7, #7]
 80046a6:	79fb      	ldrb	r3, [r7, #7]
 80046a8:	4a06      	ldr	r2, [pc, #24]	; (80046c4 <STM_EVAL_LEDOn+0x28>)
 80046aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ae:	79fa      	ldrb	r2, [r7, #7]
 80046b0:	4905      	ldr	r1, [pc, #20]	; (80046c8 <STM_EVAL_LEDOn+0x2c>)
 80046b2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80046b6:	831a      	strh	r2, [r3, #24]
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	20000004 	.word	0x20000004
 80046c8:	08004e94 	.word	0x08004e94

080046cc <Audio_MAL_IRQHandler>:
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	4b38      	ldr	r3, [pc, #224]	; (80047b4 <Audio_MAL_IRQHandler+0xe8>)
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	4b38      	ldr	r3, [pc, #224]	; (80047b8 <Audio_MAL_IRQHandler+0xec>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4619      	mov	r1, r3
 80046da:	4610      	mov	r0, r2
 80046dc:	f7fe f9e2 	bl	8002aa4 <DMA_GetFlagStatus>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d064      	beq.n	80047b0 <Audio_MAL_IRQHandler+0xe4>
 80046e6:	4b35      	ldr	r3, [pc, #212]	; (80047bc <Audio_MAL_IRQHandler+0xf0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d04c      	beq.n	8004788 <Audio_MAL_IRQHandler+0xbc>
 80046ee:	bf00      	nop
 80046f0:	4b30      	ldr	r3, [pc, #192]	; (80047b4 <Audio_MAL_IRQHandler+0xe8>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7fe f9bd 	bl	8002a74 <DMA_GetCmdStatus>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1f7      	bne.n	80046f0 <Audio_MAL_IRQHandler+0x24>
 8004700:	4b2c      	ldr	r3, [pc, #176]	; (80047b4 <Audio_MAL_IRQHandler+0xe8>)
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	4b2c      	ldr	r3, [pc, #176]	; (80047b8 <Audio_MAL_IRQHandler+0xec>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4619      	mov	r1, r3
 800470a:	4610      	mov	r0, r2
 800470c:	f7fe fa06 	bl	8002b1c <DMA_ClearFlag>
 8004710:	4b2b      	ldr	r3, [pc, #172]	; (80047c0 <Audio_MAL_IRQHandler+0xf4>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	461a      	mov	r2, r3
 8004716:	4b2b      	ldr	r3, [pc, #172]	; (80047c4 <Audio_MAL_IRQHandler+0xf8>)
 8004718:	609a      	str	r2, [r3, #8]
 800471a:	4b28      	ldr	r3, [pc, #160]	; (80047bc <Audio_MAL_IRQHandler+0xf0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004722:	4293      	cmp	r3, r2
 8004724:	bf28      	it	cs
 8004726:	4613      	movcs	r3, r2
 8004728:	4a26      	ldr	r2, [pc, #152]	; (80047c4 <Audio_MAL_IRQHandler+0xf8>)
 800472a:	6113      	str	r3, [r2, #16]
 800472c:	4b21      	ldr	r3, [pc, #132]	; (80047b4 <Audio_MAL_IRQHandler+0xe8>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4924      	ldr	r1, [pc, #144]	; (80047c4 <Audio_MAL_IRQHandler+0xf8>)
 8004732:	4618      	mov	r0, r3
 8004734:	f7fe f92a 	bl	800298c <DMA_Init>
 8004738:	4b1e      	ldr	r3, [pc, #120]	; (80047b4 <Audio_MAL_IRQHandler+0xe8>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2101      	movs	r1, #1
 800473e:	4618      	mov	r0, r3
 8004740:	f7fe f97c 	bl	8002a3c <DMA_Cmd>
 8004744:	4b1e      	ldr	r3, [pc, #120]	; (80047c0 <Audio_MAL_IRQHandler+0xf4>)
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	4b1c      	ldr	r3, [pc, #112]	; (80047bc <Audio_MAL_IRQHandler+0xf0>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004750:	d203      	bcs.n	800475a <Audio_MAL_IRQHandler+0x8e>
 8004752:	4b1a      	ldr	r3, [pc, #104]	; (80047bc <Audio_MAL_IRQHandler+0xf0>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	e000      	b.n	800475c <Audio_MAL_IRQHandler+0x90>
 800475a:	4b1b      	ldr	r3, [pc, #108]	; (80047c8 <Audio_MAL_IRQHandler+0xfc>)
 800475c:	4413      	add	r3, r2
 800475e:	4a18      	ldr	r2, [pc, #96]	; (80047c0 <Audio_MAL_IRQHandler+0xf4>)
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	4b16      	ldr	r3, [pc, #88]	; (80047bc <Audio_MAL_IRQHandler+0xf0>)
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	4b15      	ldr	r3, [pc, #84]	; (80047bc <Audio_MAL_IRQHandler+0xf0>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800476e:	428b      	cmp	r3, r1
 8004770:	bf28      	it	cs
 8004772:	460b      	movcs	r3, r1
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	4a11      	ldr	r2, [pc, #68]	; (80047bc <Audio_MAL_IRQHandler+0xf0>)
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	4b0e      	ldr	r3, [pc, #56]	; (80047b4 <Audio_MAL_IRQHandler+0xe8>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2101      	movs	r1, #1
 8004780:	4618      	mov	r0, r3
 8004782:	f7fe f95b 	bl	8002a3c <DMA_Cmd>
 8004786:	e013      	b.n	80047b0 <Audio_MAL_IRQHandler+0xe4>
 8004788:	4b0a      	ldr	r3, [pc, #40]	; (80047b4 <Audio_MAL_IRQHandler+0xe8>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2100      	movs	r1, #0
 800478e:	4618      	mov	r0, r3
 8004790:	f7fe f954 	bl	8002a3c <DMA_Cmd>
 8004794:	4b07      	ldr	r3, [pc, #28]	; (80047b4 <Audio_MAL_IRQHandler+0xe8>)
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	4b07      	ldr	r3, [pc, #28]	; (80047b8 <Audio_MAL_IRQHandler+0xec>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4619      	mov	r1, r3
 800479e:	4610      	mov	r0, r2
 80047a0:	f7fe f9bc 	bl	8002b1c <DMA_ClearFlag>
 80047a4:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <Audio_MAL_IRQHandler+0xf4>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2100      	movs	r1, #0
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 f8f0 	bl	8004990 <EVAL_AUDIO_TransferComplete_CallBack>
 80047b0:	bf00      	nop
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	2000001c 	.word	0x2000001c
 80047b8:	20000020 	.word	0x20000020
 80047bc:	20000014 	.word	0x20000014
 80047c0:	2001547c 	.word	0x2001547c
 80047c4:	200154bc 	.word	0x200154bc
 80047c8:	0001fffe 	.word	0x0001fffe

080047cc <DMA1_Stream7_IRQHandler>:
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	f7ff ff7c 	bl	80046cc <Audio_MAL_IRQHandler>
 80047d4:	bf00      	nop
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <DMA1_Stream0_IRQHandler>:
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
 80047dc:	f7ff ff76 	bl	80046cc <Audio_MAL_IRQHandler>
 80047e0:	bf00      	nop
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <SPI3_IRQHandler>:
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	2102      	movs	r1, #2
 80047ea:	480d      	ldr	r0, [pc, #52]	; (8004820 <SPI3_IRQHandler+0x3c>)
 80047ec:	f7fe faaf 	bl	8002d4e <SPI_I2S_GetFlagStatus>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d011      	beq.n	800481a <SPI3_IRQHandler+0x36>
 80047f6:	4b0b      	ldr	r3, [pc, #44]	; (8004824 <SPI3_IRQHandler+0x40>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d106      	bne.n	800480c <SPI3_IRQHandler+0x28>
 80047fe:	f000 f8d2 	bl	80049a6 <EVAL_AUDIO_GetSampleCallBack>
 8004802:	4603      	mov	r3, r0
 8004804:	4619      	mov	r1, r3
 8004806:	2004      	movs	r0, #4
 8004808:	f7fe f8a4 	bl	8002954 <DAC_SetChannel1Data>
 800480c:	f000 f8cb 	bl	80049a6 <EVAL_AUDIO_GetSampleCallBack>
 8004810:	4603      	mov	r3, r0
 8004812:	4619      	mov	r1, r3
 8004814:	4802      	ldr	r0, [pc, #8]	; (8004820 <SPI3_IRQHandler+0x3c>)
 8004816:	f7fe fa8b 	bl	8002d30 <SPI_I2S_SendData>
 800481a:	bf00      	nop
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	40003c00 	.word	0x40003c00
 8004824:	20000018 	.word	0x20000018

08004828 <ITM_SendChar>:
    \param [in]     ch  Character to transmit.

    \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8004830:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004834:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b00      	cmp	r3, #0
 800483e:	d012      	beq.n	8004866 <ITM_SendChar+0x3e>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 8004840:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004844:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004848:	f003 0301 	and.w	r3, r3, #1
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00a      	beq.n	8004866 <ITM_SendChar+0x3e>
  {
    while (ITM->PORT[0].u32 == 0);
 8004850:	bf00      	nop
 8004852:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0fa      	beq.n	8004852 <ITM_SendChar+0x2a>
    ITM->PORT[0].u8 = (uint8_t) ch;
 800485c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004866:	687b      	ldr	r3, [r7, #4]
}
 8004868:	4618      	mov	r0, r3
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <_write>:

/* Private functions */

// Printf
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */

	for(int i = 0; i < len; i++)
 8004880:	2300      	movs	r3, #0
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	e009      	b.n	800489a <_write+0x26>
	{
		ITM_SendChar(ptr[i]);
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	4413      	add	r3, r2
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff ffca 	bl	8004828 <ITM_SendChar>
	for(int i = 0; i < len; i++)
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	3301      	adds	r3, #1
 8004898:	617b      	str	r3, [r7, #20]
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	429a      	cmp	r2, r3
 80048a0:	dbf1      	blt.n	8004886 <_write+0x12>
	}

	return len;
 80048a2:	687b      	ldr	r3, [r7, #4]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3718      	adds	r7, #24
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af02      	add	r7, sp, #8


  // INIT
  DWT->CTRL |= (1 << 0);            // TODO: Bu kisim incelenecek, register icerisine bakilacak
 80048b2:	4a1e      	ldr	r2, [pc, #120]	; (800492c <main+0x80>)
 80048b4:	4b1d      	ldr	r3, [pc, #116]	; (800492c <main+0x80>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f043 0301 	orr.w	r3, r3, #1
 80048bc:	6013      	str	r3, [r2, #0]

  RCC_DeInit();						// System clock 16MHz olarak ayarlandi
 80048be:	f7fe f9e9 	bl	8002c94 <RCC_DeInit>
  SystemCoreClockUpdate();			// System clock update edildi
 80048c2:	f000 f8eb 	bl	8004a9c <SystemCoreClockUpdate>

  SEGGER_SYSVIEW_Conf();
 80048c6:	f7fe fa6d 	bl	8002da4 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80048ca:	f7ff f9c1 	bl	8003c50 <SEGGER_SYSVIEW_Start>



  /* Initialize LEDs */
  STM_EVAL_LEDInit(LED3);
 80048ce:	2001      	movs	r0, #1
 80048d0:	f7ff feb6 	bl	8004640 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED4);
 80048d4:	2000      	movs	r0, #0
 80048d6:	f7ff feb3 	bl	8004640 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED5);
 80048da:	2002      	movs	r0, #2
 80048dc:	f7ff feb0 	bl	8004640 <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED6);
 80048e0:	2003      	movs	r0, #3
 80048e2:	f7ff fead 	bl	8004640 <STM_EVAL_LEDInit>

  /* Turn on LEDs */
  STM_EVAL_LEDOn(LED3);
 80048e6:	2001      	movs	r0, #1
 80048e8:	f7ff fed8 	bl	800469c <STM_EVAL_LEDOn>
  STM_EVAL_LEDOn(LED4);
 80048ec:	2000      	movs	r0, #0
 80048ee:	f7ff fed5 	bl	800469c <STM_EVAL_LEDOn>
  STM_EVAL_LEDOn(LED5);
 80048f2:	2002      	movs	r0, #2
 80048f4:	f7ff fed2 	bl	800469c <STM_EVAL_LEDOn>
  STM_EVAL_LEDOn(LED6);
 80048f8:	2003      	movs	r0, #3
 80048fa:	f7ff fecf 	bl	800469c <STM_EVAL_LEDOn>


  //FreeRTOS INIT

  // 1. TASK YARATILIR
  xTaskCreate( task_1_handle_fp,                // Function Pointer
 80048fe:	4b0c      	ldr	r3, [pc, #48]	; (8004930 <main+0x84>)
 8004900:	9301      	str	r3, [sp, #4]
 8004902:	2301      	movs	r3, #1
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	2300      	movs	r3, #0
 8004908:	2282      	movs	r2, #130	; 0x82
 800490a:	490a      	ldr	r1, [pc, #40]	; (8004934 <main+0x88>)
 800490c:	480a      	ldr	r0, [pc, #40]	; (8004938 <main+0x8c>)
 800490e:	f7fc fe5f 	bl	80015d0 <xTaskCreate>
               NULL                    ,        // Function Parameter
               1                       ,		// PRIORTY
			   &p_my_task_handle_1_st   );      // Task object


  xTaskCreate( task_2_handle_fp,                // Function Pointer
 8004912:	4b0a      	ldr	r3, [pc, #40]	; (800493c <main+0x90>)
 8004914:	9301      	str	r3, [sp, #4]
 8004916:	2301      	movs	r3, #1
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	2300      	movs	r3, #0
 800491c:	2282      	movs	r2, #130	; 0x82
 800491e:	4908      	ldr	r1, [pc, #32]	; (8004940 <main+0x94>)
 8004920:	4808      	ldr	r0, [pc, #32]	; (8004944 <main+0x98>)
 8004922:	f7fc fe55 	bl	80015d0 <xTaskCreate>
			   &p_my_task_handle_2_st   );      // Task object



  // 2. TASKLAR ZAMANLANIR
  vTaskStartScheduler();
 8004926:	f7fc ffaf 	bl	8001888 <vTaskStartScheduler>




  /* Infinite loop */
  while (1)
 800492a:	e7fe      	b.n	800492a <main+0x7e>
 800492c:	e0001000 	.word	0xe0001000
 8004930:	2001538c 	.word	0x2001538c
 8004934:	08004e5c 	.word	0x08004e5c
 8004938:	08004949 	.word	0x08004949
 800493c:	20015390 	.word	0x20015390
 8004940:	08004e64 	.word	0x08004e64
 8004944:	0800496d 	.word	0x0800496d

08004948 <task_1_handle_fp>:
//!< CREATED TASK BEGIN   <<



void task_1_handle_fp(void *params_vp)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]

	while(1)
	{
		syc_task_1_u8++;
 8004950:	4b04      	ldr	r3, [pc, #16]	; (8004964 <task_1_handle_fp+0x1c>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	3301      	adds	r3, #1
 8004956:	b2da      	uxtb	r2, r3
 8004958:	4b02      	ldr	r3, [pc, #8]	; (8004964 <task_1_handle_fp+0x1c>)
 800495a:	701a      	strb	r2, [r3, #0]

		printf("TASK-1 \n");
 800495c:	4802      	ldr	r0, [pc, #8]	; (8004968 <task_1_handle_fp+0x20>)
 800495e:	f000 f995 	bl	8004c8c <puts>
		syc_task_1_u8++;
 8004962:	e7f5      	b.n	8004950 <task_1_handle_fp+0x8>
 8004964:	200154f9 	.word	0x200154f9
 8004968:	08004e6c 	.word	0x08004e6c

0800496c <task_2_handle_fp>:
	}
}


void task_2_handle_fp(void *params_vp)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]

	while(1)
	{
		syc_task_2_u8++;
 8004974:	4b04      	ldr	r3, [pc, #16]	; (8004988 <task_2_handle_fp+0x1c>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	3301      	adds	r3, #1
 800497a:	b2da      	uxtb	r2, r3
 800497c:	4b02      	ldr	r3, [pc, #8]	; (8004988 <task_2_handle_fp+0x1c>)
 800497e:	701a      	strb	r2, [r3, #0]

		printf("TASK-2 \n");
 8004980:	4802      	ldr	r0, [pc, #8]	; (800498c <task_2_handle_fp+0x20>)
 8004982:	f000 f983 	bl	8004c8c <puts>
		syc_task_2_u8++;
 8004986:	e7f5      	b.n	8004974 <task_2_handle_fp+0x8>
 8004988:	200154f8 	.word	0x200154f8
 800498c:	08004e74 	.word	0x08004e74

08004990 <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 800499a:	bf00      	nop
}
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 80049a6:	b480      	push	{r7}
 80049a8:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 80049aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <Reset_Handler>:
 80049b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049f0 <LoopFillZerobss+0x14>
 80049bc:	2100      	movs	r1, #0
 80049be:	e003      	b.n	80049c8 <LoopCopyDataInit>

080049c0 <CopyDataInit>:
 80049c0:	4b0c      	ldr	r3, [pc, #48]	; (80049f4 <LoopFillZerobss+0x18>)
 80049c2:	585b      	ldr	r3, [r3, r1]
 80049c4:	5043      	str	r3, [r0, r1]
 80049c6:	3104      	adds	r1, #4

080049c8 <LoopCopyDataInit>:
 80049c8:	480b      	ldr	r0, [pc, #44]	; (80049f8 <LoopFillZerobss+0x1c>)
 80049ca:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <LoopFillZerobss+0x20>)
 80049cc:	1842      	adds	r2, r0, r1
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d3f6      	bcc.n	80049c0 <CopyDataInit>
 80049d2:	4a0b      	ldr	r2, [pc, #44]	; (8004a00 <LoopFillZerobss+0x24>)
 80049d4:	e002      	b.n	80049dc <LoopFillZerobss>

080049d6 <FillZerobss>:
 80049d6:	2300      	movs	r3, #0
 80049d8:	f842 3b04 	str.w	r3, [r2], #4

080049dc <LoopFillZerobss>:
 80049dc:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <LoopFillZerobss+0x28>)
 80049de:	429a      	cmp	r2, r3
 80049e0:	d3f9      	bcc.n	80049d6 <FillZerobss>
 80049e2:	f000 f825 	bl	8004a30 <SystemInit>
 80049e6:	f000 f97d 	bl	8004ce4 <__libc_init_array>
 80049ea:	f7ff ff5f 	bl	80048ac <main>
 80049ee:	4770      	bx	lr
 80049f0:	20020000 	.word	0x20020000
 80049f4:	08004eb4 	.word	0x08004eb4
 80049f8:	20000000 	.word	0x20000000
 80049fc:	20000038 	.word	0x20000038
 8004a00:	20000038 	.word	0x20000038
 8004a04:	200154fc 	.word	0x200154fc

08004a08 <ADC_IRQHandler>:
 8004a08:	e7fe      	b.n	8004a08 <ADC_IRQHandler>

08004a0a <HardFault_Handler>:
 8004a0a:	b480      	push	{r7}
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	e7fe      	b.n	8004a0e <HardFault_Handler+0x4>

08004a10 <MemManage_Handler>:
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	e7fe      	b.n	8004a14 <MemManage_Handler+0x4>

08004a16 <BusFault_Handler>:
 8004a16:	b480      	push	{r7}
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	e7fe      	b.n	8004a1a <BusFault_Handler+0x4>

08004a1c <UsageFault_Handler>:
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	e7fe      	b.n	8004a20 <UsageFault_Handler+0x4>

08004a22 <DebugMon_Handler>:
 8004a22:	b480      	push	{r7}
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	bf00      	nop
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <SystemInit>:
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	4a16      	ldr	r2, [pc, #88]	; (8004a90 <SystemInit+0x60>)
 8004a36:	4b16      	ldr	r3, [pc, #88]	; (8004a90 <SystemInit+0x60>)
 8004a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004a44:	4a13      	ldr	r2, [pc, #76]	; (8004a94 <SystemInit+0x64>)
 8004a46:	4b13      	ldr	r3, [pc, #76]	; (8004a94 <SystemInit+0x64>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f043 0301 	orr.w	r3, r3, #1
 8004a4e:	6013      	str	r3, [r2, #0]
 8004a50:	4b10      	ldr	r3, [pc, #64]	; (8004a94 <SystemInit+0x64>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	609a      	str	r2, [r3, #8]
 8004a56:	4a0f      	ldr	r2, [pc, #60]	; (8004a94 <SystemInit+0x64>)
 8004a58:	4b0e      	ldr	r3, [pc, #56]	; (8004a94 <SystemInit+0x64>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a64:	6013      	str	r3, [r2, #0]
 8004a66:	4b0b      	ldr	r3, [pc, #44]	; (8004a94 <SystemInit+0x64>)
 8004a68:	4a0b      	ldr	r2, [pc, #44]	; (8004a98 <SystemInit+0x68>)
 8004a6a:	605a      	str	r2, [r3, #4]
 8004a6c:	4a09      	ldr	r2, [pc, #36]	; (8004a94 <SystemInit+0x64>)
 8004a6e:	4b09      	ldr	r3, [pc, #36]	; (8004a94 <SystemInit+0x64>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <SystemInit+0x64>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	60da      	str	r2, [r3, #12]
 8004a7e:	f000 f889 	bl	8004b94 <SetSysClock>
 8004a82:	4b03      	ldr	r3, [pc, #12]	; (8004a90 <SystemInit+0x60>)
 8004a84:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a88:	609a      	str	r2, [r3, #8]
 8004a8a:	bf00      	nop
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	e000ed00 	.word	0xe000ed00
 8004a94:	40023800 	.word	0x40023800
 8004a98:	24003010 	.word	0x24003010

08004a9c <SystemCoreClockUpdate>:
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	613b      	str	r3, [r7, #16]
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	617b      	str	r3, [r7, #20]
 8004aaa:	2302      	movs	r3, #2
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60bb      	str	r3, [r7, #8]
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	607b      	str	r3, [r7, #4]
 8004ab6:	4b32      	ldr	r3, [pc, #200]	; (8004b80 <SystemCoreClockUpdate+0xe4>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 030c 	and.w	r3, r3, #12
 8004abe:	613b      	str	r3, [r7, #16]
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	d007      	beq.n	8004ad6 <SystemCoreClockUpdate+0x3a>
 8004ac6:	2b08      	cmp	r3, #8
 8004ac8:	d009      	beq.n	8004ade <SystemCoreClockUpdate+0x42>
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d13d      	bne.n	8004b4a <SystemCoreClockUpdate+0xae>
 8004ace:	4b2d      	ldr	r3, [pc, #180]	; (8004b84 <SystemCoreClockUpdate+0xe8>)
 8004ad0:	4a2d      	ldr	r2, [pc, #180]	; (8004b88 <SystemCoreClockUpdate+0xec>)
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	e03d      	b.n	8004b52 <SystemCoreClockUpdate+0xb6>
 8004ad6:	4b2b      	ldr	r3, [pc, #172]	; (8004b84 <SystemCoreClockUpdate+0xe8>)
 8004ad8:	4a2c      	ldr	r2, [pc, #176]	; (8004b8c <SystemCoreClockUpdate+0xf0>)
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	e039      	b.n	8004b52 <SystemCoreClockUpdate+0xb6>
 8004ade:	4b28      	ldr	r3, [pc, #160]	; (8004b80 <SystemCoreClockUpdate+0xe4>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	0d9b      	lsrs	r3, r3, #22
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	60bb      	str	r3, [r7, #8]
 8004aea:	4b25      	ldr	r3, [pc, #148]	; (8004b80 <SystemCoreClockUpdate+0xe4>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004af2:	607b      	str	r3, [r7, #4]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00c      	beq.n	8004b14 <SystemCoreClockUpdate+0x78>
 8004afa:	4a24      	ldr	r2, [pc, #144]	; (8004b8c <SystemCoreClockUpdate+0xf0>)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b02:	4a1f      	ldr	r2, [pc, #124]	; (8004b80 <SystemCoreClockUpdate+0xe4>)
 8004b04:	6852      	ldr	r2, [r2, #4]
 8004b06:	0992      	lsrs	r2, r2, #6
 8004b08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b0c:	fb02 f303 	mul.w	r3, r2, r3
 8004b10:	617b      	str	r3, [r7, #20]
 8004b12:	e00b      	b.n	8004b2c <SystemCoreClockUpdate+0x90>
 8004b14:	4a1c      	ldr	r2, [pc, #112]	; (8004b88 <SystemCoreClockUpdate+0xec>)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1c:	4a18      	ldr	r2, [pc, #96]	; (8004b80 <SystemCoreClockUpdate+0xe4>)
 8004b1e:	6852      	ldr	r2, [r2, #4]
 8004b20:	0992      	lsrs	r2, r2, #6
 8004b22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b26:	fb02 f303 	mul.w	r3, r2, r3
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	4b14      	ldr	r3, [pc, #80]	; (8004b80 <SystemCoreClockUpdate+0xe4>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	0c1b      	lsrs	r3, r3, #16
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	3301      	adds	r3, #1
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b44:	4a0f      	ldr	r2, [pc, #60]	; (8004b84 <SystemCoreClockUpdate+0xe8>)
 8004b46:	6013      	str	r3, [r2, #0]
 8004b48:	e003      	b.n	8004b52 <SystemCoreClockUpdate+0xb6>
 8004b4a:	4b0e      	ldr	r3, [pc, #56]	; (8004b84 <SystemCoreClockUpdate+0xe8>)
 8004b4c:	4a0e      	ldr	r2, [pc, #56]	; (8004b88 <SystemCoreClockUpdate+0xec>)
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	bf00      	nop
 8004b52:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <SystemCoreClockUpdate+0xe4>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	091b      	lsrs	r3, r3, #4
 8004b58:	f003 030f 	and.w	r3, r3, #15
 8004b5c:	4a0c      	ldr	r2, [pc, #48]	; (8004b90 <SystemCoreClockUpdate+0xf4>)
 8004b5e:	5cd3      	ldrb	r3, [r2, r3]
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	613b      	str	r3, [r7, #16]
 8004b64:	4b07      	ldr	r3, [pc, #28]	; (8004b84 <SystemCoreClockUpdate+0xe8>)
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b6e:	4a05      	ldr	r2, [pc, #20]	; (8004b84 <SystemCoreClockUpdate+0xe8>)
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	bf00      	nop
 8004b74:	371c      	adds	r7, #28
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	40023800 	.word	0x40023800
 8004b84:	20000024 	.word	0x20000024
 8004b88:	00f42400 	.word	0x00f42400
 8004b8c:	007a1200 	.word	0x007a1200
 8004b90:	20000028 	.word	0x20000028

08004b94 <SetSysClock>:
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	607b      	str	r3, [r7, #4]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	603b      	str	r3, [r7, #0]
 8004ba2:	4a36      	ldr	r2, [pc, #216]	; (8004c7c <SetSysClock+0xe8>)
 8004ba4:	4b35      	ldr	r3, [pc, #212]	; (8004c7c <SetSysClock+0xe8>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	4b33      	ldr	r3, [pc, #204]	; (8004c7c <SetSysClock+0xe8>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb6:	603b      	str	r3, [r7, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	607b      	str	r3, [r7, #4]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d103      	bne.n	8004bcc <SetSysClock+0x38>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004bca:	d1f0      	bne.n	8004bae <SetSysClock+0x1a>
 8004bcc:	4b2b      	ldr	r3, [pc, #172]	; (8004c7c <SetSysClock+0xe8>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <SetSysClock+0x4a>
 8004bd8:	2301      	movs	r3, #1
 8004bda:	603b      	str	r3, [r7, #0]
 8004bdc:	e001      	b.n	8004be2 <SetSysClock+0x4e>
 8004bde:	2300      	movs	r3, #0
 8004be0:	603b      	str	r3, [r7, #0]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d142      	bne.n	8004c6e <SetSysClock+0xda>
 8004be8:	4a24      	ldr	r2, [pc, #144]	; (8004c7c <SetSysClock+0xe8>)
 8004bea:	4b24      	ldr	r3, [pc, #144]	; (8004c7c <SetSysClock+0xe8>)
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8004bf4:	4a22      	ldr	r2, [pc, #136]	; (8004c80 <SetSysClock+0xec>)
 8004bf6:	4b22      	ldr	r3, [pc, #136]	; (8004c80 <SetSysClock+0xec>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bfe:	6013      	str	r3, [r2, #0]
 8004c00:	4a1e      	ldr	r2, [pc, #120]	; (8004c7c <SetSysClock+0xe8>)
 8004c02:	4b1e      	ldr	r3, [pc, #120]	; (8004c7c <SetSysClock+0xe8>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	6093      	str	r3, [r2, #8]
 8004c08:	4a1c      	ldr	r2, [pc, #112]	; (8004c7c <SetSysClock+0xe8>)
 8004c0a:	4b1c      	ldr	r3, [pc, #112]	; (8004c7c <SetSysClock+0xe8>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c12:	6093      	str	r3, [r2, #8]
 8004c14:	4a19      	ldr	r2, [pc, #100]	; (8004c7c <SetSysClock+0xe8>)
 8004c16:	4b19      	ldr	r3, [pc, #100]	; (8004c7c <SetSysClock+0xe8>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8004c1e:	6093      	str	r3, [r2, #8]
 8004c20:	4b16      	ldr	r3, [pc, #88]	; (8004c7c <SetSysClock+0xe8>)
 8004c22:	4a18      	ldr	r2, [pc, #96]	; (8004c84 <SetSysClock+0xf0>)
 8004c24:	605a      	str	r2, [r3, #4]
 8004c26:	4a15      	ldr	r2, [pc, #84]	; (8004c7c <SetSysClock+0xe8>)
 8004c28:	4b14      	ldr	r3, [pc, #80]	; (8004c7c <SetSysClock+0xe8>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	bf00      	nop
 8004c34:	4b11      	ldr	r3, [pc, #68]	; (8004c7c <SetSysClock+0xe8>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0f9      	beq.n	8004c34 <SetSysClock+0xa0>
 8004c40:	4b11      	ldr	r3, [pc, #68]	; (8004c88 <SetSysClock+0xf4>)
 8004c42:	f240 6205 	movw	r2, #1541	; 0x605
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	4a0c      	ldr	r2, [pc, #48]	; (8004c7c <SetSysClock+0xe8>)
 8004c4a:	4b0c      	ldr	r3, [pc, #48]	; (8004c7c <SetSysClock+0xe8>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f023 0303 	bic.w	r3, r3, #3
 8004c52:	6093      	str	r3, [r2, #8]
 8004c54:	4a09      	ldr	r2, [pc, #36]	; (8004c7c <SetSysClock+0xe8>)
 8004c56:	4b09      	ldr	r3, [pc, #36]	; (8004c7c <SetSysClock+0xe8>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f043 0302 	orr.w	r3, r3, #2
 8004c5e:	6093      	str	r3, [r2, #8]
 8004c60:	bf00      	nop
 8004c62:	4b06      	ldr	r3, [pc, #24]	; (8004c7c <SetSysClock+0xe8>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f003 030c 	and.w	r3, r3, #12
 8004c6a:	2b08      	cmp	r3, #8
 8004c6c:	d1f9      	bne.n	8004c62 <SetSysClock+0xce>
 8004c6e:	bf00      	nop
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	40007000 	.word	0x40007000
 8004c84:	07405408 	.word	0x07405408
 8004c88:	40023c00 	.word	0x40023c00

08004c8c <puts>:
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7fb fa9b 	bl	80001d0 <strlen>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	613b      	str	r3, [r7, #16]
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	6879      	ldr	r1, [r7, #4]
 8004ca6:	2001      	movs	r0, #1
 8004ca8:	f7ff fde4 	bl	8004874 <_write>
 8004cac:	60f8      	str	r0, [r7, #12]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	490b      	ldr	r1, [pc, #44]	; (8004ce0 <puts+0x54>)
 8004cb2:	2001      	movs	r0, #1
 8004cb4:	f7ff fdde 	bl	8004874 <_write>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	1c5a      	adds	r2, r3, #1
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d102      	bne.n	8004cd0 <puts+0x44>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	617b      	str	r3, [r7, #20]
 8004cce:	e002      	b.n	8004cd6 <puts+0x4a>
 8004cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd4:	617b      	str	r3, [r7, #20]
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	08004e7c 	.word	0x08004e7c

08004ce4 <__libc_init_array>:
 8004ce4:	b570      	push	{r4, r5, r6, lr}
 8004ce6:	4e0d      	ldr	r6, [pc, #52]	; (8004d1c <__libc_init_array+0x38>)
 8004ce8:	4c0d      	ldr	r4, [pc, #52]	; (8004d20 <__libc_init_array+0x3c>)
 8004cea:	1ba4      	subs	r4, r4, r6
 8004cec:	10a4      	asrs	r4, r4, #2
 8004cee:	2500      	movs	r5, #0
 8004cf0:	42a5      	cmp	r5, r4
 8004cf2:	d109      	bne.n	8004d08 <__libc_init_array+0x24>
 8004cf4:	4e0b      	ldr	r6, [pc, #44]	; (8004d24 <__libc_init_array+0x40>)
 8004cf6:	4c0c      	ldr	r4, [pc, #48]	; (8004d28 <__libc_init_array+0x44>)
 8004cf8:	f000 f83a 	bl	8004d70 <_init>
 8004cfc:	1ba4      	subs	r4, r4, r6
 8004cfe:	10a4      	asrs	r4, r4, #2
 8004d00:	2500      	movs	r5, #0
 8004d02:	42a5      	cmp	r5, r4
 8004d04:	d105      	bne.n	8004d12 <__libc_init_array+0x2e>
 8004d06:	bd70      	pop	{r4, r5, r6, pc}
 8004d08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d0c:	4798      	blx	r3
 8004d0e:	3501      	adds	r5, #1
 8004d10:	e7ee      	b.n	8004cf0 <__libc_init_array+0xc>
 8004d12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d16:	4798      	blx	r3
 8004d18:	3501      	adds	r5, #1
 8004d1a:	e7f2      	b.n	8004d02 <__libc_init_array+0x1e>
 8004d1c:	08004eac 	.word	0x08004eac
 8004d20:	08004eac 	.word	0x08004eac
 8004d24:	08004eac 	.word	0x08004eac
 8004d28:	08004eb0 	.word	0x08004eb0

08004d2c <memcmp>:
 8004d2c:	b510      	push	{r4, lr}
 8004d2e:	3901      	subs	r1, #1
 8004d30:	4402      	add	r2, r0
 8004d32:	4290      	cmp	r0, r2
 8004d34:	d101      	bne.n	8004d3a <memcmp+0xe>
 8004d36:	2000      	movs	r0, #0
 8004d38:	bd10      	pop	{r4, pc}
 8004d3a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004d3e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004d42:	42a3      	cmp	r3, r4
 8004d44:	d0f5      	beq.n	8004d32 <memcmp+0x6>
 8004d46:	1b18      	subs	r0, r3, r4
 8004d48:	bd10      	pop	{r4, pc}

08004d4a <memcpy>:
 8004d4a:	b510      	push	{r4, lr}
 8004d4c:	1e43      	subs	r3, r0, #1
 8004d4e:	440a      	add	r2, r1
 8004d50:	4291      	cmp	r1, r2
 8004d52:	d100      	bne.n	8004d56 <memcpy+0xc>
 8004d54:	bd10      	pop	{r4, pc}
 8004d56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d5e:	e7f7      	b.n	8004d50 <memcpy+0x6>

08004d60 <memset>:
 8004d60:	4402      	add	r2, r0
 8004d62:	4603      	mov	r3, r0
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d100      	bne.n	8004d6a <memset+0xa>
 8004d68:	4770      	bx	lr
 8004d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d6e:	e7f9      	b.n	8004d64 <memset+0x4>

08004d70 <_init>:
 8004d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d72:	bf00      	nop
 8004d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d76:	bc08      	pop	{r3}
 8004d78:	469e      	mov	lr, r3
 8004d7a:	4770      	bx	lr

08004d7c <_fini>:
 8004d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7e:	bf00      	nop
 8004d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d82:	bc08      	pop	{r3}
 8004d84:	469e      	mov	lr, r3
 8004d86:	4770      	bx	lr
