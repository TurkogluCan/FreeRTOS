
FreeRTOS_SEGGER_SysView.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800497c  0800497c  0001497c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004a4c  08004a4c  00014a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004a50  08004a50  00014a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000038  20000000  08004a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020038  2**0
                  CONTENTS
  7 .bss          000134bc  20000038  20000038  00020038  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200134f4  200134f4  00020038  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013b5a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002a73  00000000  00000000  00033bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000fd0  00000000  00000000  00036638  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e88  00000000  00000000  00037608  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007a58  00000000  00000000  00038490  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005959  00000000  00000000  0003fee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00045841  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004304  00000000  00000000  000458c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000038 	.word	0x20000038
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004964 	.word	0x08004964

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000003c 	.word	0x2000003c
 80001cc:	08004964 	.word	0x08004964

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f103 0208 	add.w	r2, r3, #8
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f04f 32ff 	mov.w	r2, #4294967295
 80001f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f103 0208 	add.w	r2, r3, #8
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f103 0208 	add.w	r2, r3, #8
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr

08000220 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2200      	movs	r2, #0
 800022c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr

0800023a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800023a:	b480      	push	{r7}
 800023c:	b085      	sub	sp, #20
 800023e:	af00      	add	r7, sp, #0
 8000240:	6078      	str	r0, [r7, #4]
 8000242:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	68fa      	ldr	r2, [r7, #12]
 800024e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	689a      	ldr	r2, [r3, #8]
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	689b      	ldr	r3, [r3, #8]
 800025c:	683a      	ldr	r2, [r7, #0]
 800025e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	683a      	ldr	r2, [r7, #0]
 8000264:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	1c5a      	adds	r2, r3, #1
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	601a      	str	r2, [r3, #0]
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr

08000282 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000282:	b480      	push	{r7}
 8000284:	b085      	sub	sp, #20
 8000286:	af00      	add	r7, sp, #0
 8000288:	6078      	str	r0, [r7, #4]
 800028a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000298:	d103      	bne.n	80002a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	691b      	ldr	r3, [r3, #16]
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	e00c      	b.n	80002bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	3308      	adds	r3, #8
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	e002      	b.n	80002b0 <vListInsert+0x2e>
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	60fb      	str	r3, [r7, #12]
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	681a      	ldr	r2, [r3, #0]
 80002b6:	68bb      	ldr	r3, [r7, #8]
 80002b8:	429a      	cmp	r2, r3
 80002ba:	d9f6      	bls.n	80002aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	685a      	ldr	r2, [r3, #4]
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	683a      	ldr	r2, [r7, #0]
 80002ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	68fa      	ldr	r2, [r7, #12]
 80002d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	683a      	ldr	r2, [r7, #0]
 80002d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	687a      	ldr	r2, [r7, #4]
 80002dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	1c5a      	adds	r2, r3, #1
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	601a      	str	r2, [r3, #0]
}
 80002e8:	bf00      	nop
 80002ea:	3714      	adds	r7, #20
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr

080002f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	691b      	ldr	r3, [r3, #16]
 8000300:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	685b      	ldr	r3, [r3, #4]
 8000306:	687a      	ldr	r2, [r7, #4]
 8000308:	6892      	ldr	r2, [r2, #8]
 800030a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	6852      	ldr	r2, [r2, #4]
 8000314:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	685a      	ldr	r2, [r3, #4]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	429a      	cmp	r2, r3
 800031e:	d103      	bne.n	8000328 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	689a      	ldr	r2, [r3, #8]
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	1e5a      	subs	r2, r3, #1
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	681b      	ldr	r3, [r3, #0]
}
 800033c:	4618      	mov	r0, r3
 800033e:	3714      	adds	r7, #20
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr

08000348 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
 800034e:	60f8      	str	r0, [r7, #12]
 8000350:	60b9      	str	r1, [r7, #8]
 8000352:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	3b04      	subs	r3, #4
 8000358:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	3b04      	subs	r3, #4
 8000366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	f023 0201 	bic.w	r2, r3, #1
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	3b04      	subs	r3, #4
 8000376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000378:	4a0c      	ldr	r2, [pc, #48]	; (80003ac <pxPortInitialiseStack+0x64>)
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	3b14      	subs	r3, #20
 8000382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000384:	687a      	ldr	r2, [r7, #4]
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	3b04      	subs	r3, #4
 800038e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	f06f 0202 	mvn.w	r2, #2
 8000396:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	3b20      	subs	r3, #32
 800039c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800039e:	68fb      	ldr	r3, [r7, #12]
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	3714      	adds	r7, #20
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr
 80003ac:	080003b1 	.word	0x080003b1

080003b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80003b6:	2300      	movs	r3, #0
 80003b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <prvTaskExitError+0x50>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003c2:	d009      	beq.n	80003d8 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80003c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003c8:	f383 8811 	msr	BASEPRI, r3
 80003cc:	f3bf 8f6f 	isb	sy
 80003d0:	f3bf 8f4f 	dsb	sy
 80003d4:	60fb      	str	r3, [r7, #12]
 80003d6:	e7fe      	b.n	80003d6 <prvTaskExitError+0x26>
 80003d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003dc:	f383 8811 	msr	BASEPRI, r3
 80003e0:	f3bf 8f6f 	isb	sy
 80003e4:	f3bf 8f4f 	dsb	sy
 80003e8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80003ea:	bf00      	nop
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d0fc      	beq.n	80003ec <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80003f2:	bf00      	nop
 80003f4:	3714      	adds	r7, #20
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	20000000 	.word	0x20000000
	...

08000410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000410:	4b07      	ldr	r3, [pc, #28]	; (8000430 <pxCurrentTCBConst2>)
 8000412:	6819      	ldr	r1, [r3, #0]
 8000414:	6808      	ldr	r0, [r1, #0]
 8000416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800041a:	f380 8809 	msr	PSP, r0
 800041e:	f3bf 8f6f 	isb	sy
 8000422:	f04f 0000 	mov.w	r0, #0
 8000426:	f380 8811 	msr	BASEPRI, r0
 800042a:	4770      	bx	lr
 800042c:	f3af 8000 	nop.w

08000430 <pxCurrentTCBConst2>:
 8000430:	20012c7c 	.word	0x20012c7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000434:	bf00      	nop
 8000436:	bf00      	nop

08000438 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8000438:	4808      	ldr	r0, [pc, #32]	; (800045c <prvPortStartFirstTask+0x24>)
 800043a:	6800      	ldr	r0, [r0, #0]
 800043c:	6800      	ldr	r0, [r0, #0]
 800043e:	f380 8808 	msr	MSP, r0
 8000442:	f04f 0000 	mov.w	r0, #0
 8000446:	f380 8814 	msr	CONTROL, r0
 800044a:	b662      	cpsie	i
 800044c:	b661      	cpsie	f
 800044e:	f3bf 8f4f 	dsb	sy
 8000452:	f3bf 8f6f 	isb	sy
 8000456:	df00      	svc	0
 8000458:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800045a:	bf00      	nop
 800045c:	e000ed08 	.word	0xe000ed08

08000460 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b086      	sub	sp, #24
 8000464:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000466:	4b44      	ldr	r3, [pc, #272]	; (8000578 <xPortStartScheduler+0x118>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a44      	ldr	r2, [pc, #272]	; (800057c <xPortStartScheduler+0x11c>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d109      	bne.n	8000484 <xPortStartScheduler+0x24>
 8000470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000474:	f383 8811 	msr	BASEPRI, r3
 8000478:	f3bf 8f6f 	isb	sy
 800047c:	f3bf 8f4f 	dsb	sy
 8000480:	613b      	str	r3, [r7, #16]
 8000482:	e7fe      	b.n	8000482 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000484:	4b3c      	ldr	r3, [pc, #240]	; (8000578 <xPortStartScheduler+0x118>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a3d      	ldr	r2, [pc, #244]	; (8000580 <xPortStartScheduler+0x120>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d109      	bne.n	80004a2 <xPortStartScheduler+0x42>
 800048e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000492:	f383 8811 	msr	BASEPRI, r3
 8000496:	f3bf 8f6f 	isb	sy
 800049a:	f3bf 8f4f 	dsb	sy
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	e7fe      	b.n	80004a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80004a2:	4b38      	ldr	r3, [pc, #224]	; (8000584 <xPortStartScheduler+0x124>)
 80004a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	22ff      	movs	r2, #255	; 0xff
 80004b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80004bc:	78fb      	ldrb	r3, [r7, #3]
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80004c4:	b2da      	uxtb	r2, r3
 80004c6:	4b30      	ldr	r3, [pc, #192]	; (8000588 <xPortStartScheduler+0x128>)
 80004c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80004ca:	4b30      	ldr	r3, [pc, #192]	; (800058c <xPortStartScheduler+0x12c>)
 80004cc:	2207      	movs	r2, #7
 80004ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80004d0:	e009      	b.n	80004e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80004d2:	4b2e      	ldr	r3, [pc, #184]	; (800058c <xPortStartScheduler+0x12c>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	3b01      	subs	r3, #1
 80004d8:	4a2c      	ldr	r2, [pc, #176]	; (800058c <xPortStartScheduler+0x12c>)
 80004da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80004dc:	78fb      	ldrb	r3, [r7, #3]
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80004e6:	78fb      	ldrb	r3, [r7, #3]
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ee:	2b80      	cmp	r3, #128	; 0x80
 80004f0:	d0ef      	beq.n	80004d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80004f2:	4b26      	ldr	r3, [pc, #152]	; (800058c <xPortStartScheduler+0x12c>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f1c3 0307 	rsb	r3, r3, #7
 80004fa:	2b04      	cmp	r3, #4
 80004fc:	d009      	beq.n	8000512 <xPortStartScheduler+0xb2>
 80004fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000502:	f383 8811 	msr	BASEPRI, r3
 8000506:	f3bf 8f6f 	isb	sy
 800050a:	f3bf 8f4f 	dsb	sy
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	e7fe      	b.n	8000510 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000512:	4b1e      	ldr	r3, [pc, #120]	; (800058c <xPortStartScheduler+0x12c>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	021b      	lsls	r3, r3, #8
 8000518:	4a1c      	ldr	r2, [pc, #112]	; (800058c <xPortStartScheduler+0x12c>)
 800051a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800051c:	4b1b      	ldr	r3, [pc, #108]	; (800058c <xPortStartScheduler+0x12c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000524:	4a19      	ldr	r2, [pc, #100]	; (800058c <xPortStartScheduler+0x12c>)
 8000526:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	b2da      	uxtb	r2, r3
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000530:	4a17      	ldr	r2, [pc, #92]	; (8000590 <xPortStartScheduler+0x130>)
 8000532:	4b17      	ldr	r3, [pc, #92]	; (8000590 <xPortStartScheduler+0x130>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800053a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800053c:	4a14      	ldr	r2, [pc, #80]	; (8000590 <xPortStartScheduler+0x130>)
 800053e:	4b14      	ldr	r3, [pc, #80]	; (8000590 <xPortStartScheduler+0x130>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000546:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000548:	f000 f8d6 	bl	80006f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800054c:	4b11      	ldr	r3, [pc, #68]	; (8000594 <xPortStartScheduler+0x134>)
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8000552:	f000 f8f5 	bl	8000740 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8000556:	4a10      	ldr	r2, [pc, #64]	; (8000598 <xPortStartScheduler+0x138>)
 8000558:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <xPortStartScheduler+0x138>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000560:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8000562:	f7ff ff69 	bl	8000438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8000566:	f001 fb69 	bl	8001c3c <vTaskSwitchContext>
	prvTaskExitError();
 800056a:	f7ff ff21 	bl	80003b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800056e:	2300      	movs	r3, #0
}
 8000570:	4618      	mov	r0, r3
 8000572:	3718      	adds	r7, #24
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	e000ed00 	.word	0xe000ed00
 800057c:	410fc271 	.word	0x410fc271
 8000580:	410fc270 	.word	0x410fc270
 8000584:	e000e400 	.word	0xe000e400
 8000588:	20000054 	.word	0x20000054
 800058c:	20000058 	.word	0x20000058
 8000590:	e000ed20 	.word	0xe000ed20
 8000594:	20000000 	.word	0x20000000
 8000598:	e000ef34 	.word	0xe000ef34

0800059c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a6:	f383 8811 	msr	BASEPRI, r3
 80005aa:	f3bf 8f6f 	isb	sy
 80005ae:	f3bf 8f4f 	dsb	sy
 80005b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <vPortEnterCritical+0x54>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	3301      	adds	r3, #1
 80005ba:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <vPortEnterCritical+0x54>)
 80005bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80005be:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <vPortEnterCritical+0x54>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d10e      	bne.n	80005e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <vPortEnterCritical+0x58>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d009      	beq.n	80005e4 <vPortEnterCritical+0x48>
 80005d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005d4:	f383 8811 	msr	BASEPRI, r3
 80005d8:	f3bf 8f6f 	isb	sy
 80005dc:	f3bf 8f4f 	dsb	sy
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	e7fe      	b.n	80005e2 <vPortEnterCritical+0x46>
	}
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	20000000 	.word	0x20000000
 80005f4:	e000ed04 	.word	0xe000ed04

080005f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <vPortExitCritical+0x4c>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d109      	bne.n	800061a <vPortExitCritical+0x22>
 8000606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800060a:	f383 8811 	msr	BASEPRI, r3
 800060e:	f3bf 8f6f 	isb	sy
 8000612:	f3bf 8f4f 	dsb	sy
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	e7fe      	b.n	8000618 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <vPortExitCritical+0x4c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	3b01      	subs	r3, #1
 8000620:	4a08      	ldr	r2, [pc, #32]	; (8000644 <vPortExitCritical+0x4c>)
 8000622:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <vPortExitCritical+0x4c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d104      	bne.n	8000636 <vPortExitCritical+0x3e>
 800062c:	2300      	movs	r3, #0
 800062e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000000 	.word	0x20000000
	...

08000650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000650:	f3ef 8009 	mrs	r0, PSP
 8000654:	f3bf 8f6f 	isb	sy
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <pxCurrentTCBConst>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	f01e 0f10 	tst.w	lr, #16
 8000660:	bf08      	it	eq
 8000662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800066a:	6010      	str	r0, [r2, #0]
 800066c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000670:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000674:	f380 8811 	msr	BASEPRI, r0
 8000678:	f3bf 8f4f 	dsb	sy
 800067c:	f3bf 8f6f 	isb	sy
 8000680:	f001 fadc 	bl	8001c3c <vTaskSwitchContext>
 8000684:	f04f 0000 	mov.w	r0, #0
 8000688:	f380 8811 	msr	BASEPRI, r0
 800068c:	bc09      	pop	{r0, r3}
 800068e:	6819      	ldr	r1, [r3, #0]
 8000690:	6808      	ldr	r0, [r1, #0]
 8000692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000696:	f01e 0f10 	tst.w	lr, #16
 800069a:	bf08      	it	eq
 800069c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80006a0:	f380 8809 	msr	PSP, r0
 80006a4:	f3bf 8f6f 	isb	sy
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	f3af 8000 	nop.w

080006b0 <pxCurrentTCBConst>:
 80006b0:	20012c7c 	.word	0x20012c7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop

080006b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
	__asm volatile
 80006be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006c2:	f383 8811 	msr	BASEPRI, r3
 80006c6:	f3bf 8f6f 	isb	sy
 80006ca:	f3bf 8f4f 	dsb	sy
 80006ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80006d0:	f001 f9f8 	bl	8001ac4 <xTaskIncrementTick>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d003      	beq.n	80006e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <SysTick_Handler+0x3c>)
 80006dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	2300      	movs	r3, #0
 80006e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	e000ed04 	.word	0xe000ed04

080006f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80006fc:	4b0b      	ldr	r3, [pc, #44]	; (800072c <vPortSetupTimerInterrupt+0x34>)
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <vPortSetupTimerInterrupt+0x38>)
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000708:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <vPortSetupTimerInterrupt+0x3c>)
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <vPortSetupTimerInterrupt+0x40>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	490b      	ldr	r1, [pc, #44]	; (800073c <vPortSetupTimerInterrupt+0x44>)
 8000710:	fba1 1303 	umull	r1, r3, r1, r3
 8000714:	099b      	lsrs	r3, r3, #6
 8000716:	3b01      	subs	r3, #1
 8000718:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800071a:	4b04      	ldr	r3, [pc, #16]	; (800072c <vPortSetupTimerInterrupt+0x34>)
 800071c:	2207      	movs	r2, #7
 800071e:	601a      	str	r2, [r3, #0]
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000e010 	.word	0xe000e010
 8000730:	e000e018 	.word	0xe000e018
 8000734:	e000e014 	.word	0xe000e014
 8000738:	20000024 	.word	0x20000024
 800073c:	10624dd3 	.word	0x10624dd3

08000740 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8000740:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000750 <vPortEnableVFP+0x10>
 8000744:	6801      	ldr	r1, [r0, #0]
 8000746:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074a:	6001      	str	r1, [r0, #0]
 800074c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800074e:	bf00      	nop
 8000750:	e000ed88 	.word	0xe000ed88

08000754 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800075a:	f3ef 8305 	mrs	r3, IPSR
 800075e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	2b0f      	cmp	r3, #15
 8000764:	d913      	bls.n	800078e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000766:	4a16      	ldr	r2, [pc, #88]	; (80007c0 <vPortValidateInterruptPriority+0x6c>)
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	4413      	add	r3, r2
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <vPortValidateInterruptPriority+0x70>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	7afa      	ldrb	r2, [r7, #11]
 8000776:	429a      	cmp	r2, r3
 8000778:	d209      	bcs.n	800078e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800077a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800077e:	f383 8811 	msr	BASEPRI, r3
 8000782:	f3bf 8f6f 	isb	sy
 8000786:	f3bf 8f4f 	dsb	sy
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	e7fe      	b.n	800078c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <vPortValidateInterruptPriority+0x74>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000796:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <vPortValidateInterruptPriority+0x78>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	429a      	cmp	r2, r3
 800079c:	d909      	bls.n	80007b2 <vPortValidateInterruptPriority+0x5e>
 800079e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007a2:	f383 8811 	msr	BASEPRI, r3
 80007a6:	f3bf 8f6f 	isb	sy
 80007aa:	f3bf 8f4f 	dsb	sy
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	e7fe      	b.n	80007b0 <vPortValidateInterruptPriority+0x5c>
	}
 80007b2:	bf00      	nop
 80007b4:	3714      	adds	r7, #20
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000e3f0 	.word	0xe000e3f0
 80007c4:	20000054 	.word	0x20000054
 80007c8:	e000ed0c 	.word	0xe000ed0c
 80007cc:	20000058 	.word	0x20000058

080007d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80007dc:	f001 f8b4 	bl	8001948 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80007e0:	4b59      	ldr	r3, [pc, #356]	; (8000948 <pvPortMalloc+0x178>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d101      	bne.n	80007ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80007e8:	f000 f91a 	bl	8000a20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80007ec:	4b57      	ldr	r3, [pc, #348]	; (800094c <pvPortMalloc+0x17c>)
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4013      	ands	r3, r2
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	f040 8091 	bne.w	800091c <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d01c      	beq.n	800083a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8000800:	2208      	movs	r2, #8
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4413      	add	r3, r2
 8000806:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	2b00      	cmp	r3, #0
 8000810:	d013      	beq.n	800083a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	f023 0307 	bic.w	r3, r3, #7
 8000818:	3308      	adds	r3, #8
 800081a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f003 0307 	and.w	r3, r3, #7
 8000822:	2b00      	cmp	r3, #0
 8000824:	d009      	beq.n	800083a <pvPortMalloc+0x6a>
 8000826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800082a:	f383 8811 	msr	BASEPRI, r3
 800082e:	f3bf 8f6f 	isb	sy
 8000832:	f3bf 8f4f 	dsb	sy
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	e7fe      	b.n	8000838 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d06d      	beq.n	800091c <pvPortMalloc+0x14c>
 8000840:	4b43      	ldr	r3, [pc, #268]	; (8000950 <pvPortMalloc+0x180>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	429a      	cmp	r2, r3
 8000848:	d868      	bhi.n	800091c <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800084a:	4b42      	ldr	r3, [pc, #264]	; (8000954 <pvPortMalloc+0x184>)
 800084c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800084e:	4b41      	ldr	r3, [pc, #260]	; (8000954 <pvPortMalloc+0x184>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000854:	e004      	b.n	8000860 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8000856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000858:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800085a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	429a      	cmp	r2, r3
 8000868:	d203      	bcs.n	8000872 <pvPortMalloc+0xa2>
 800086a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d1f1      	bne.n	8000856 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000872:	4b35      	ldr	r3, [pc, #212]	; (8000948 <pvPortMalloc+0x178>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000878:	429a      	cmp	r2, r3
 800087a:	d04f      	beq.n	800091c <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800087c:	6a3b      	ldr	r3, [r7, #32]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2208      	movs	r2, #8
 8000882:	4413      	add	r3, r2
 8000884:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	6a3b      	ldr	r3, [r7, #32]
 800088c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000890:	685a      	ldr	r2, [r3, #4]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	1ad2      	subs	r2, r2, r3
 8000896:	2308      	movs	r3, #8
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	429a      	cmp	r2, r3
 800089c:	d91e      	bls.n	80008dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800089e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4413      	add	r3, r2
 80008a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	f003 0307 	and.w	r3, r3, #7
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d009      	beq.n	80008c4 <pvPortMalloc+0xf4>
 80008b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008b4:	f383 8811 	msr	BASEPRI, r3
 80008b8:	f3bf 8f6f 	isb	sy
 80008bc:	f3bf 8f4f 	dsb	sy
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	e7fe      	b.n	80008c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80008c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c6:	685a      	ldr	r2, [r3, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	1ad2      	subs	r2, r2, r3
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80008d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80008d6:	69b8      	ldr	r0, [r7, #24]
 80008d8:	f000 f904 	bl	8000ae4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80008dc:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <pvPortMalloc+0x180>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	4a1a      	ldr	r2, [pc, #104]	; (8000950 <pvPortMalloc+0x180>)
 80008e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80008ea:	4b19      	ldr	r3, [pc, #100]	; (8000950 <pvPortMalloc+0x180>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <pvPortMalloc+0x188>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d203      	bcs.n	80008fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <pvPortMalloc+0x180>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a17      	ldr	r2, [pc, #92]	; (8000958 <pvPortMalloc+0x188>)
 80008fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80008fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000900:	685a      	ldr	r2, [r3, #4]
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <pvPortMalloc+0x17c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	431a      	orrs	r2, r3
 8000908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800090c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <pvPortMalloc+0x18c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	3301      	adds	r3, #1
 8000918:	4a10      	ldr	r2, [pc, #64]	; (800095c <pvPortMalloc+0x18c>)
 800091a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800091c:	f001 f822 	bl	8001964 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	2b00      	cmp	r3, #0
 8000928:	d009      	beq.n	800093e <pvPortMalloc+0x16e>
 800092a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800092e:	f383 8811 	msr	BASEPRI, r3
 8000932:	f3bf 8f6f 	isb	sy
 8000936:	f3bf 8f4f 	dsb	sy
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	e7fe      	b.n	800093c <pvPortMalloc+0x16c>
	return pvReturn;
 800093e:	69fb      	ldr	r3, [r7, #28]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3728      	adds	r7, #40	; 0x28
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20012c64 	.word	0x20012c64
 800094c:	20012c78 	.word	0x20012c78
 8000950:	20012c68 	.word	0x20012c68
 8000954:	20012c5c 	.word	0x20012c5c
 8000958:	20012c6c 	.word	0x20012c6c
 800095c:	20012c70 	.word	0x20012c70

08000960 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d04b      	beq.n	8000a0a <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000972:	2308      	movs	r3, #8
 8000974:	425b      	negs	r3, r3
 8000976:	697a      	ldr	r2, [r7, #20]
 8000978:	4413      	add	r3, r2
 800097a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	685a      	ldr	r2, [r3, #4]
 8000984:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <vPortFree+0xb4>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4013      	ands	r3, r2
 800098a:	2b00      	cmp	r3, #0
 800098c:	d109      	bne.n	80009a2 <vPortFree+0x42>
 800098e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000992:	f383 8811 	msr	BASEPRI, r3
 8000996:	f3bf 8f6f 	isb	sy
 800099a:	f3bf 8f4f 	dsb	sy
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	e7fe      	b.n	80009a0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d009      	beq.n	80009be <vPortFree+0x5e>
 80009aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009ae:	f383 8811 	msr	BASEPRI, r3
 80009b2:	f3bf 8f6f 	isb	sy
 80009b6:	f3bf 8f4f 	dsb	sy
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	e7fe      	b.n	80009bc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	685a      	ldr	r2, [r3, #4]
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <vPortFree+0xb4>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4013      	ands	r3, r2
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d01e      	beq.n	8000a0a <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d11a      	bne.n	8000a0a <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	685a      	ldr	r2, [r3, #4]
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <vPortFree+0xb4>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	43db      	mvns	r3, r3
 80009de:	401a      	ands	r2, r3
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80009e4:	f000 ffb0 	bl	8001948 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	685a      	ldr	r2, [r3, #4]
 80009ec:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <vPortFree+0xb8>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4413      	add	r3, r2
 80009f2:	4a09      	ldr	r2, [pc, #36]	; (8000a18 <vPortFree+0xb8>)
 80009f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80009f6:	6938      	ldr	r0, [r7, #16]
 80009f8:	f000 f874 	bl	8000ae4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <vPortFree+0xbc>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	3301      	adds	r3, #1
 8000a02:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <vPortFree+0xbc>)
 8000a04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8000a06:	f000 ffad 	bl	8001964 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000a0a:	bf00      	nop
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20012c78 	.word	0x20012c78
 8000a18:	20012c68 	.word	0x20012c68
 8000a1c:	20012c74 	.word	0x20012c74

08000a20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000a26:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000a2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000a2c:	4b27      	ldr	r3, [pc, #156]	; (8000acc <prvHeapInit+0xac>)
 8000a2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d00c      	beq.n	8000a54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	3307      	adds	r3, #7
 8000a3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f023 0307 	bic.w	r3, r3, #7
 8000a46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000a48:	68ba      	ldr	r2, [r7, #8]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	4a1f      	ldr	r2, [pc, #124]	; (8000acc <prvHeapInit+0xac>)
 8000a50:	4413      	add	r3, r2
 8000a52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a58:	4a1d      	ldr	r2, [pc, #116]	; (8000ad0 <prvHeapInit+0xb0>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <prvHeapInit+0xb0>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	4413      	add	r3, r2
 8000a6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a6c:	2208      	movs	r2, #8
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	1a9b      	subs	r3, r3, r2
 8000a72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f023 0307 	bic.w	r3, r3, #7
 8000a7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4a15      	ldr	r2, [pc, #84]	; (8000ad4 <prvHeapInit+0xb4>)
 8000a80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <prvHeapInit+0xb4>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2200      	movs	r2, #0
 8000a88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a8a:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <prvHeapInit+0xb4>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	68fa      	ldr	r2, [r7, #12]
 8000a9a:	1ad2      	subs	r2, r2, r3
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <prvHeapInit+0xb4>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <prvHeapInit+0xb8>)
 8000aae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	4a09      	ldr	r2, [pc, #36]	; (8000adc <prvHeapInit+0xbc>)
 8000ab6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <prvHeapInit+0xc0>)
 8000aba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000abe:	601a      	str	r2, [r3, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	2000005c 	.word	0x2000005c
 8000ad0:	20012c5c 	.word	0x20012c5c
 8000ad4:	20012c64 	.word	0x20012c64
 8000ad8:	20012c6c 	.word	0x20012c6c
 8000adc:	20012c68 	.word	0x20012c68
 8000ae0:	20012c78 	.word	0x20012c78

08000ae4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000aec:	4b28      	ldr	r3, [pc, #160]	; (8000b90 <prvInsertBlockIntoFreeList+0xac>)
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	e002      	b.n	8000af8 <prvInsertBlockIntoFreeList+0x14>
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d3f7      	bcc.n	8000af2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	441a      	add	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d108      	bne.n	8000b26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	685a      	ldr	r2, [r3, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	441a      	add	r2, r3
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	441a      	add	r2, r3
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d118      	bne.n	8000b6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <prvInsertBlockIntoFreeList+0xb0>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d00d      	beq.n	8000b62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	685a      	ldr	r2, [r3, #4]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	441a      	add	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	e008      	b.n	8000b74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <prvInsertBlockIntoFreeList+0xb0>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	e003      	b.n	8000b74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b74:	68fa      	ldr	r2, [r7, #12]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d002      	beq.n	8000b82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b82:	bf00      	nop
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20012c5c 	.word	0x20012c5c
 8000b94:	20012c64 	.word	0x20012c64

08000b98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d109      	bne.n	8000bc0 <xQueueGenericReset+0x28>
 8000bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bb0:	f383 8811 	msr	BASEPRI, r3
 8000bb4:	f3bf 8f6f 	isb	sy
 8000bb8:	f3bf 8f4f 	dsb	sy
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	e7fe      	b.n	8000bbe <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000bc0:	f7ff fcec 	bl	800059c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bcc:	68f9      	ldr	r1, [r7, #12]
 8000bce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000bd0:	fb01 f303 	mul.w	r3, r1, r3
 8000bd4:	441a      	add	r2, r3
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	68f9      	ldr	r1, [r7, #12]
 8000bf4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000bf6:	fb01 f303 	mul.w	r3, r1, r3
 8000bfa:	441a      	add	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	22ff      	movs	r2, #255	; 0xff
 8000c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	22ff      	movs	r2, #255	; 0xff
 8000c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d114      	bne.n	8000c40 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	691b      	ldr	r3, [r3, #16]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d01a      	beq.n	8000c54 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	3310      	adds	r3, #16
 8000c22:	4618      	mov	r0, r3
 8000c24:	f001 f8ca 	bl	8001dbc <xTaskRemoveFromEventList>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d012      	beq.n	8000c54 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <xQueueGenericReset+0xcc>)
 8000c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	f3bf 8f4f 	dsb	sy
 8000c3a:	f3bf 8f6f 	isb	sy
 8000c3e:	e009      	b.n	8000c54 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	3310      	adds	r3, #16
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff facb 	bl	80001e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	3324      	adds	r3, #36	; 0x24
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fac6 	bl	80001e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000c54:	f7ff fcd0 	bl	80005f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000c58:	2301      	movs	r3, #1
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	e000ed04 	.word	0xe000ed04

08000c68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	; 0x28
 8000c6c:	af02      	add	r7, sp, #8
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	4613      	mov	r3, r2
 8000c74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d109      	bne.n	8000c90 <xQueueGenericCreate+0x28>
 8000c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c80:	f383 8811 	msr	BASEPRI, r3
 8000c84:	f3bf 8f6f 	isb	sy
 8000c88:	f3bf 8f4f 	dsb	sy
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	e7fe      	b.n	8000c8e <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	fb02 f303 	mul.w	r3, r2, r3
 8000c98:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3350      	adds	r3, #80	; 0x50
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fd96 	bl	80007d0 <pvPortMalloc>
 8000ca4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d00d      	beq.n	8000cc8 <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	3350      	adds	r3, #80	; 0x50
 8000cb4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000cb6:	79fa      	ldrb	r2, [r7, #7]
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	68b9      	ldr	r1, [r7, #8]
 8000cc2:	68f8      	ldr	r0, [r7, #12]
 8000cc4:	f000 f805 	bl	8000cd2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000cc8:	69bb      	ldr	r3, [r7, #24]
	}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3720      	adds	r7, #32
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b084      	sub	sp, #16
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	60f8      	str	r0, [r7, #12]
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
 8000cde:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d103      	bne.n	8000cee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	e002      	b.n	8000cf4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	68ba      	ldr	r2, [r7, #8]
 8000cfe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000d00:	2101      	movs	r1, #1
 8000d02:	69b8      	ldr	r0, [r7, #24]
 8000d04:	f7ff ff48 	bl	8000b98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	78fa      	ldrb	r2, [r7, #3]
 8000d0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8000d10:	78fb      	ldrb	r3, [r7, #3]
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	68f9      	ldr	r1, [r7, #12]
 8000d16:	2073      	movs	r0, #115	; 0x73
 8000d18:	f002 fcbc 	bl	8003694 <SEGGER_SYSVIEW_RecordU32x3>
}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b090      	sub	sp, #64	; 0x40
 8000d28:	af02      	add	r7, sp, #8
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
 8000d30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000d32:	2300      	movs	r3, #0
 8000d34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d109      	bne.n	8000d54 <xQueueGenericSend+0x30>
 8000d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d44:	f383 8811 	msr	BASEPRI, r3
 8000d48:	f3bf 8f6f 	isb	sy
 8000d4c:	f3bf 8f4f 	dsb	sy
 8000d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d52:	e7fe      	b.n	8000d52 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d103      	bne.n	8000d62 <xQueueGenericSend+0x3e>
 8000d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <xQueueGenericSend+0x42>
 8000d62:	2301      	movs	r3, #1
 8000d64:	e000      	b.n	8000d68 <xQueueGenericSend+0x44>
 8000d66:	2300      	movs	r3, #0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d109      	bne.n	8000d80 <xQueueGenericSend+0x5c>
 8000d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d70:	f383 8811 	msr	BASEPRI, r3
 8000d74:	f3bf 8f6f 	isb	sy
 8000d78:	f3bf 8f4f 	dsb	sy
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d7e:	e7fe      	b.n	8000d7e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d103      	bne.n	8000d8e <xQueueGenericSend+0x6a>
 8000d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d101      	bne.n	8000d92 <xQueueGenericSend+0x6e>
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e000      	b.n	8000d94 <xQueueGenericSend+0x70>
 8000d92:	2300      	movs	r3, #0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d109      	bne.n	8000dac <xQueueGenericSend+0x88>
 8000d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d9c:	f383 8811 	msr	BASEPRI, r3
 8000da0:	f3bf 8f6f 	isb	sy
 8000da4:	f3bf 8f4f 	dsb	sy
 8000da8:	623b      	str	r3, [r7, #32]
 8000daa:	e7fe      	b.n	8000daa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000dac:	f001 f9a2 	bl	80020f4 <xTaskGetSchedulerState>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d102      	bne.n	8000dbc <xQueueGenericSend+0x98>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d101      	bne.n	8000dc0 <xQueueGenericSend+0x9c>
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e000      	b.n	8000dc2 <xQueueGenericSend+0x9e>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d109      	bne.n	8000dda <xQueueGenericSend+0xb6>
 8000dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dca:	f383 8811 	msr	BASEPRI, r3
 8000dce:	f3bf 8f6f 	isb	sy
 8000dd2:	f3bf 8f4f 	dsb	sy
 8000dd6:	61fb      	str	r3, [r7, #28]
 8000dd8:	e7fe      	b.n	8000dd8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000dda:	f7ff fbdf 	bl	800059c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d302      	bcc.n	8000df0 <xQueueGenericSend+0xcc>
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d136      	bne.n	8000e5e <xQueueGenericSend+0x13a>
			{
				traceQUEUE_SEND( pxQueue );
 8000df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000df2:	4618      	mov	r0, r3
 8000df4:	f003 f8e0 	bl	8003fb8 <SEGGER_SYSVIEW_ShrinkId>
 8000df8:	68ba      	ldr	r2, [r7, #8]
 8000dfa:	6879      	ldr	r1, [r7, #4]
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	460b      	mov	r3, r1
 8000e02:	4601      	mov	r1, r0
 8000e04:	205a      	movs	r0, #90	; 0x5a
 8000e06:	f002 fcbb 	bl	8003780 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000e0a:	683a      	ldr	r2, [r7, #0]
 8000e0c:	68b9      	ldr	r1, [r7, #8]
 8000e0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e10:	f000 fa6a 	bl	80012e8 <prvCopyDataToQueue>
 8000e14:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d010      	beq.n	8000e40 <xQueueGenericSend+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e20:	3324      	adds	r3, #36	; 0x24
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 ffca 	bl	8001dbc <xTaskRemoveFromEventList>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d013      	beq.n	8000e56 <xQueueGenericSend+0x132>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000e2e:	4b4d      	ldr	r3, [pc, #308]	; (8000f64 <xQueueGenericSend+0x240>)
 8000e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	f3bf 8f4f 	dsb	sy
 8000e3a:	f3bf 8f6f 	isb	sy
 8000e3e:	e00a      	b.n	8000e56 <xQueueGenericSend+0x132>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d007      	beq.n	8000e56 <xQueueGenericSend+0x132>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000e46:	4b47      	ldr	r3, [pc, #284]	; (8000f64 <xQueueGenericSend+0x240>)
 8000e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	f3bf 8f4f 	dsb	sy
 8000e52:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000e56:	f7ff fbcf 	bl	80005f8 <vPortExitCritical>
				return pdPASS;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e07d      	b.n	8000f5a <xQueueGenericSend+0x236>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d110      	bne.n	8000e86 <xQueueGenericSend+0x162>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000e64:	f7ff fbc8 	bl	80005f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8000e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f003 f8a4 	bl	8003fb8 <SEGGER_SYSVIEW_ShrinkId>
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	4601      	mov	r1, r0
 8000e7c:	205a      	movs	r0, #90	; 0x5a
 8000e7e:	f002 fc7f 	bl	8003780 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e069      	b.n	8000f5a <xQueueGenericSend+0x236>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d106      	bne.n	8000e9a <xQueueGenericSend+0x176>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 fff9 	bl	8001e88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000e96:	2301      	movs	r3, #1
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000e9a:	f7ff fbad 	bl	80005f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000e9e:	f000 fd53 	bl	8001948 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000ea2:	f7ff fb7b 	bl	800059c <vPortEnterCritical>
 8000ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000eac:	b25b      	sxtb	r3, r3
 8000eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb2:	d103      	bne.n	8000ebc <xQueueGenericSend+0x198>
 8000eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ec2:	b25b      	sxtb	r3, r3
 8000ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec8:	d103      	bne.n	8000ed2 <xQueueGenericSend+0x1ae>
 8000eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000ed2:	f7ff fb91 	bl	80005f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000ed6:	1d3a      	adds	r2, r7, #4
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4611      	mov	r1, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 ffe8 	bl	8001eb4 <xTaskCheckForTimeOut>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d124      	bne.n	8000f34 <xQueueGenericSend+0x210>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000eea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000eec:	f000 faf4 	bl	80014d8 <prvIsQueueFull>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d018      	beq.n	8000f28 <xQueueGenericSend+0x204>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ef8:	3310      	adds	r3, #16
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	4611      	mov	r1, r2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 ff0a 	bl	8001d18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000f04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f06:	f000 fa7f 	bl	8001408 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000f0a:	f000 fd2b 	bl	8001964 <xTaskResumeAll>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f47f af62 	bne.w	8000dda <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <xQueueGenericSend+0x240>)
 8000f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	f3bf 8f4f 	dsb	sy
 8000f22:	f3bf 8f6f 	isb	sy
 8000f26:	e758      	b.n	8000dda <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000f28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f2a:	f000 fa6d 	bl	8001408 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000f2e:	f000 fd19 	bl	8001964 <xTaskResumeAll>
 8000f32:	e752      	b.n	8000dda <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000f34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f36:	f000 fa67 	bl	8001408 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000f3a:	f000 fd13 	bl	8001964 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8000f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f40:	4618      	mov	r0, r3
 8000f42:	f003 f839 	bl	8003fb8 <SEGGER_SYSVIEW_ShrinkId>
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4601      	mov	r1, r0
 8000f52:	205a      	movs	r0, #90	; 0x5a
 8000f54:	f002 fc14 	bl	8003780 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8000f58:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3738      	adds	r7, #56	; 0x38
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	e000ed04 	.word	0xe000ed04

08000f68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b090      	sub	sp, #64	; 0x40
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8000f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d109      	bne.n	8000f94 <xQueueGenericSendFromISR+0x2c>
 8000f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f84:	f383 8811 	msr	BASEPRI, r3
 8000f88:	f3bf 8f6f 	isb	sy
 8000f8c:	f3bf 8f4f 	dsb	sy
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f92:	e7fe      	b.n	8000f92 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d103      	bne.n	8000fa2 <xQueueGenericSendFromISR+0x3a>
 8000f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <xQueueGenericSendFromISR+0x3e>
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e000      	b.n	8000fa8 <xQueueGenericSendFromISR+0x40>
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d109      	bne.n	8000fc0 <xQueueGenericSendFromISR+0x58>
 8000fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fb0:	f383 8811 	msr	BASEPRI, r3
 8000fb4:	f3bf 8f6f 	isb	sy
 8000fb8:	f3bf 8f4f 	dsb	sy
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8000fbe:	e7fe      	b.n	8000fbe <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d103      	bne.n	8000fce <xQueueGenericSendFromISR+0x66>
 8000fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d101      	bne.n	8000fd2 <xQueueGenericSendFromISR+0x6a>
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e000      	b.n	8000fd4 <xQueueGenericSendFromISR+0x6c>
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d109      	bne.n	8000fec <xQueueGenericSendFromISR+0x84>
 8000fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fdc:	f383 8811 	msr	BASEPRI, r3
 8000fe0:	f3bf 8f6f 	isb	sy
 8000fe4:	f3bf 8f4f 	dsb	sy
 8000fe8:	623b      	str	r3, [r7, #32]
 8000fea:	e7fe      	b.n	8000fea <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000fec:	f7ff fbb2 	bl	8000754 <vPortValidateInterruptPriority>
	__asm volatile
 8000ff0:	f3ef 8211 	mrs	r2, BASEPRI
 8000ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ff8:	f383 8811 	msr	BASEPRI, r3
 8000ffc:	f3bf 8f6f 	isb	sy
 8001000:	f3bf 8f4f 	dsb	sy
 8001004:	61fa      	str	r2, [r7, #28]
 8001006:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8001008:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800100a:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800100c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800100e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001014:	429a      	cmp	r2, r3
 8001016:	d302      	bcc.n	800101e <xQueueGenericSendFromISR+0xb6>
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	2b02      	cmp	r3, #2
 800101c:	d139      	bne.n	8001092 <xQueueGenericSendFromISR+0x12a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800101e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001020:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001024:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800102a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 800102e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001030:	4618      	mov	r0, r3
 8001032:	f002 ffc1 	bl	8003fb8 <SEGGER_SYSVIEW_ShrinkId>
 8001036:	4601      	mov	r1, r0
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	461a      	mov	r2, r3
 800103c:	2060      	movs	r0, #96	; 0x60
 800103e:	f002 facf 	bl	80035e0 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	68b9      	ldr	r1, [r7, #8]
 8001046:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001048:	f000 f94e 	bl	80012e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800104c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001054:	d112      	bne.n	800107c <xQueueGenericSendFromISR+0x114>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105a:	2b00      	cmp	r3, #0
 800105c:	d016      	beq.n	800108c <xQueueGenericSendFromISR+0x124>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800105e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001060:	3324      	adds	r3, #36	; 0x24
 8001062:	4618      	mov	r0, r3
 8001064:	f000 feaa 	bl	8001dbc <xTaskRemoveFromEventList>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00e      	beq.n	800108c <xQueueGenericSendFromISR+0x124>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00b      	beq.n	800108c <xQueueGenericSendFromISR+0x124>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2201      	movs	r2, #1
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	e007      	b.n	800108c <xQueueGenericSendFromISR+0x124>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800107c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001080:	3301      	adds	r3, #1
 8001082:	b2db      	uxtb	r3, r3
 8001084:	b25a      	sxtb	r2, r3
 8001086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800108c:	2301      	movs	r3, #1
 800108e:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8001090:	e00b      	b.n	80010aa <xQueueGenericSendFromISR+0x142>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8001092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001094:	4618      	mov	r0, r3
 8001096:	f002 ff8f 	bl	8003fb8 <SEGGER_SYSVIEW_ShrinkId>
 800109a:	4601      	mov	r1, r0
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	461a      	mov	r2, r3
 80010a0:	2060      	movs	r0, #96	; 0x60
 80010a2:	f002 fa9d 	bl	80035e0 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ac:	617b      	str	r3, [r7, #20]
	__asm volatile
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80010b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3740      	adds	r7, #64	; 0x40
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	b08f      	sub	sp, #60	; 0x3c
 80010c4:	af02      	add	r7, sp, #8
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80010d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d109      	bne.n	80010ee <xQueueReceive+0x2e>
	__asm volatile
 80010da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010de:	f383 8811 	msr	BASEPRI, r3
 80010e2:	f3bf 8f6f 	isb	sy
 80010e6:	f3bf 8f4f 	dsb	sy
 80010ea:	623b      	str	r3, [r7, #32]
 80010ec:	e7fe      	b.n	80010ec <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d103      	bne.n	80010fc <xQueueReceive+0x3c>
 80010f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d101      	bne.n	8001100 <xQueueReceive+0x40>
 80010fc:	2301      	movs	r3, #1
 80010fe:	e000      	b.n	8001102 <xQueueReceive+0x42>
 8001100:	2300      	movs	r3, #0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d109      	bne.n	800111a <xQueueReceive+0x5a>
 8001106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800110a:	f383 8811 	msr	BASEPRI, r3
 800110e:	f3bf 8f6f 	isb	sy
 8001112:	f3bf 8f4f 	dsb	sy
 8001116:	61fb      	str	r3, [r7, #28]
 8001118:	e7fe      	b.n	8001118 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800111a:	f000 ffeb 	bl	80020f4 <xTaskGetSchedulerState>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d102      	bne.n	800112a <xQueueReceive+0x6a>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <xQueueReceive+0x6e>
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <xQueueReceive+0x70>
 800112e:	2300      	movs	r3, #0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d109      	bne.n	8001148 <xQueueReceive+0x88>
 8001134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001138:	f383 8811 	msr	BASEPRI, r3
 800113c:	f3bf 8f6f 	isb	sy
 8001140:	f3bf 8f4f 	dsb	sy
 8001144:	61bb      	str	r3, [r7, #24]
 8001146:	e7fe      	b.n	8001146 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001148:	f7ff fa28 	bl	800059c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001150:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	2b00      	cmp	r3, #0
 8001156:	d031      	beq.n	80011bc <xQueueReceive+0xfc>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001158:	68b9      	ldr	r1, [r7, #8]
 800115a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800115c:	f000 f92e 	bl	80013bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8001160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001162:	4618      	mov	r0, r3
 8001164:	f002 ff28 	bl	8003fb8 <SEGGER_SYSVIEW_ShrinkId>
 8001168:	4604      	mov	r4, r0
 800116a:	2000      	movs	r0, #0
 800116c:	f002 ff24 	bl	8003fb8 <SEGGER_SYSVIEW_ShrinkId>
 8001170:	4601      	mov	r1, r0
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	2301      	movs	r3, #1
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	4613      	mov	r3, r2
 800117a:	460a      	mov	r2, r1
 800117c:	4621      	mov	r1, r4
 800117e:	205c      	movs	r0, #92	; 0x5c
 8001180:	f002 fafe 	bl	8003780 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001186:	1e5a      	subs	r2, r3, #1
 8001188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800118c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d00f      	beq.n	80011b4 <xQueueReceive+0xf4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001196:	3310      	adds	r3, #16
 8001198:	4618      	mov	r0, r3
 800119a:	f000 fe0f 	bl	8001dbc <xTaskRemoveFromEventList>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d007      	beq.n	80011b4 <xQueueReceive+0xf4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80011a4:	4b4f      	ldr	r3, [pc, #316]	; (80012e4 <xQueueReceive+0x224>)
 80011a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	f3bf 8f4f 	dsb	sy
 80011b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80011b4:	f7ff fa20 	bl	80005f8 <vPortExitCritical>
				return pdPASS;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e08e      	b.n	80012da <xQueueReceive+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d115      	bne.n	80011ee <xQueueReceive+0x12e>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80011c2:	f7ff fa19 	bl	80005f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 80011c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c8:	4618      	mov	r0, r3
 80011ca:	f002 fef5 	bl	8003fb8 <SEGGER_SYSVIEW_ShrinkId>
 80011ce:	4604      	mov	r4, r0
 80011d0:	2000      	movs	r0, #0
 80011d2:	f002 fef1 	bl	8003fb8 <SEGGER_SYSVIEW_ShrinkId>
 80011d6:	4601      	mov	r1, r0
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	2301      	movs	r3, #1
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	4613      	mov	r3, r2
 80011e0:	460a      	mov	r2, r1
 80011e2:	4621      	mov	r1, r4
 80011e4:	205c      	movs	r0, #92	; 0x5c
 80011e6:	f002 facb 	bl	8003780 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e075      	b.n	80012da <xQueueReceive+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80011ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d106      	bne.n	8001202 <xQueueReceive+0x142>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 fe45 	bl	8001e88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80011fe:	2301      	movs	r3, #1
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001202:	f7ff f9f9 	bl	80005f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001206:	f000 fb9f 	bl	8001948 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800120a:	f7ff f9c7 	bl	800059c <vPortEnterCritical>
 800120e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001210:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001214:	b25b      	sxtb	r3, r3
 8001216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800121a:	d103      	bne.n	8001224 <xQueueReceive+0x164>
 800121c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001226:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800122a:	b25b      	sxtb	r3, r3
 800122c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001230:	d103      	bne.n	800123a <xQueueReceive+0x17a>
 8001232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800123a:	f7ff f9dd 	bl	80005f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800123e:	1d3a      	adds	r2, r7, #4
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	4611      	mov	r1, r2
 8001246:	4618      	mov	r0, r3
 8001248:	f000 fe34 	bl	8001eb4 <xTaskCheckForTimeOut>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d124      	bne.n	800129c <xQueueReceive+0x1dc>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001252:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001254:	f000 f92a 	bl	80014ac <prvIsQueueEmpty>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d018      	beq.n	8001290 <xQueueReceive+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800125e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001260:	3324      	adds	r3, #36	; 0x24
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	4611      	mov	r1, r2
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fd56 	bl	8001d18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800126c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800126e:	f000 f8cb 	bl	8001408 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001272:	f000 fb77 	bl	8001964 <xTaskResumeAll>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	f47f af65 	bne.w	8001148 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <xQueueReceive+0x224>)
 8001280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	f3bf 8f4f 	dsb	sy
 800128a:	f3bf 8f6f 	isb	sy
 800128e:	e75b      	b.n	8001148 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001290:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001292:	f000 f8b9 	bl	8001408 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001296:	f000 fb65 	bl	8001964 <xTaskResumeAll>
 800129a:	e755      	b.n	8001148 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800129c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800129e:	f000 f8b3 	bl	8001408 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80012a2:	f000 fb5f 	bl	8001964 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80012a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012a8:	f000 f900 	bl	80014ac <prvIsQueueEmpty>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f43f af4a 	beq.w	8001148 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 80012b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b6:	4618      	mov	r0, r3
 80012b8:	f002 fe7e 	bl	8003fb8 <SEGGER_SYSVIEW_ShrinkId>
 80012bc:	4604      	mov	r4, r0
 80012be:	2000      	movs	r0, #0
 80012c0:	f002 fe7a 	bl	8003fb8 <SEGGER_SYSVIEW_ShrinkId>
 80012c4:	4601      	mov	r1, r0
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	2301      	movs	r3, #1
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	4613      	mov	r3, r2
 80012ce:	460a      	mov	r2, r1
 80012d0:	4621      	mov	r1, r4
 80012d2:	205c      	movs	r0, #92	; 0x5c
 80012d4:	f002 fa54 	bl	8003780 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 80012d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3734      	adds	r7, #52	; 0x34
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd90      	pop	{r4, r7, pc}
 80012e2:	bf00      	nop
 80012e4:	e000ed04 	.word	0xe000ed04

080012e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10d      	bne.n	8001322 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d14d      	bne.n	80013aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	4618      	mov	r0, r3
 8001314:	f000 ff0c 	bl	8002130 <xTaskPriorityDisinherit>
 8001318:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	e043      	b.n	80013aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d119      	bne.n	800135c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6858      	ldr	r0, [r3, #4]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	461a      	mov	r2, r3
 8001332:	68b9      	ldr	r1, [r7, #8]
 8001334:	f003 fb03 	bl	800493e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	441a      	add	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	429a      	cmp	r2, r3
 8001350:	d32b      	bcc.n	80013aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	e026      	b.n	80013aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	68d8      	ldr	r0, [r3, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	461a      	mov	r2, r3
 8001366:	68b9      	ldr	r1, [r7, #8]
 8001368:	f003 fae9 	bl	800493e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	68da      	ldr	r2, [r3, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001374:	425b      	negs	r3, r3
 8001376:	441a      	add	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	68da      	ldr	r2, [r3, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	429a      	cmp	r2, r3
 8001386:	d207      	bcs.n	8001398 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	425b      	negs	r3, r3
 8001392:	441a      	add	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d105      	bne.n	80013aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d002      	beq.n	80013aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1c5a      	adds	r2, r3, #1
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80013b2:	697b      	ldr	r3, [r7, #20]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3718      	adds	r7, #24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d018      	beq.n	8001400 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	441a      	add	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68da      	ldr	r2, [r3, #12]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d303      	bcc.n	80013f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68d9      	ldr	r1, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	461a      	mov	r2, r3
 80013fa:	6838      	ldr	r0, [r7, #0]
 80013fc:	f003 fa9f 	bl	800493e <memcpy>
	}
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001410:	f7ff f8c4 	bl	800059c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800141a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800141c:	e011      	b.n	8001442 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001422:	2b00      	cmp	r3, #0
 8001424:	d012      	beq.n	800144c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3324      	adds	r3, #36	; 0x24
 800142a:	4618      	mov	r0, r3
 800142c:	f000 fcc6 	bl	8001dbc <xTaskRemoveFromEventList>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001436:	f000 fd9d 	bl	8001f74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	3b01      	subs	r3, #1
 800143e:	b2db      	uxtb	r3, r3
 8001440:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001446:	2b00      	cmp	r3, #0
 8001448:	dce9      	bgt.n	800141e <prvUnlockQueue+0x16>
 800144a:	e000      	b.n	800144e <prvUnlockQueue+0x46>
					break;
 800144c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	22ff      	movs	r2, #255	; 0xff
 8001452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001456:	f7ff f8cf 	bl	80005f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800145a:	f7ff f89f 	bl	800059c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001464:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001466:	e011      	b.n	800148c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d012      	beq.n	8001496 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3310      	adds	r3, #16
 8001474:	4618      	mov	r0, r3
 8001476:	f000 fca1 	bl	8001dbc <xTaskRemoveFromEventList>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001480:	f000 fd78 	bl	8001f74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001484:	7bbb      	ldrb	r3, [r7, #14]
 8001486:	3b01      	subs	r3, #1
 8001488:	b2db      	uxtb	r3, r3
 800148a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800148c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001490:	2b00      	cmp	r3, #0
 8001492:	dce9      	bgt.n	8001468 <prvUnlockQueue+0x60>
 8001494:	e000      	b.n	8001498 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001496:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	22ff      	movs	r2, #255	; 0xff
 800149c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80014a0:	f7ff f8aa 	bl	80005f8 <vPortExitCritical>
}
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80014b4:	f7ff f872 	bl	800059c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d102      	bne.n	80014c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80014c0:	2301      	movs	r3, #1
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	e001      	b.n	80014ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80014ca:	f7ff f895 	bl	80005f8 <vPortExitCritical>

	return xReturn;
 80014ce:	68fb      	ldr	r3, [r7, #12]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80014e0:	f7ff f85c 	bl	800059c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d102      	bne.n	80014f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80014f0:	2301      	movs	r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	e001      	b.n	80014fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80014fa:	f7ff f87d 	bl	80005f8 <vPortExitCritical>

	return xReturn;
 80014fe:	68fb      	ldr	r3, [r7, #12]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	e01e      	b.n	8001556 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001518:	4a12      	ldr	r2, [pc, #72]	; (8001564 <vQueueAddToRegistry+0x5c>)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d115      	bne.n	8001550 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001524:	490f      	ldr	r1, [pc, #60]	; (8001564 <vQueueAddToRegistry+0x5c>)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800152e:	4a0d      	ldr	r2, [pc, #52]	; (8001564 <vQueueAddToRegistry+0x5c>)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	4413      	add	r3, r2
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4618      	mov	r0, r3
 800153e:	f002 fd3b 	bl	8003fb8 <SEGGER_SYSVIEW_ShrinkId>
 8001542:	4601      	mov	r1, r0
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	461a      	mov	r2, r3
 8001548:	2071      	movs	r0, #113	; 0x71
 800154a:	f002 f849 	bl	80035e0 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 800154e:	e005      	b.n	800155c <vQueueAddToRegistry+0x54>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	3301      	adds	r3, #1
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2b07      	cmp	r3, #7
 800155a:	d9dd      	bls.n	8001518 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	2001338c 	.word	0x2001338c

08001568 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001578:	f7ff f810 	bl	800059c <vPortEnterCritical>
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001582:	b25b      	sxtb	r3, r3
 8001584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001588:	d103      	bne.n	8001592 <vQueueWaitForMessageRestricted+0x2a>
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001598:	b25b      	sxtb	r3, r3
 800159a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800159e:	d103      	bne.n	80015a8 <vQueueWaitForMessageRestricted+0x40>
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80015a8:	f7ff f826 	bl	80005f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d106      	bne.n	80015c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	3324      	adds	r3, #36	; 0x24
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	68b9      	ldr	r1, [r7, #8]
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 fbcf 	bl	8001d60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80015c2:	6978      	ldr	r0, [r7, #20]
 80015c4:	f7ff ff20 	bl	8001408 <prvUnlockQueue>
	}
 80015c8:	bf00      	nop
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08c      	sub	sp, #48	; 0x30
 80015d4:	af04      	add	r7, sp, #16
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	4613      	mov	r3, r2
 80015de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80015e0:	88fb      	ldrh	r3, [r7, #6]
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff f8f3 	bl	80007d0 <pvPortMalloc>
 80015ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00e      	beq.n	8001610 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80015f2:	2058      	movs	r0, #88	; 0x58
 80015f4:	f7ff f8ec 	bl	80007d0 <pvPortMalloc>
 80015f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	631a      	str	r2, [r3, #48]	; 0x30
 8001606:	e005      	b.n	8001614 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001608:	6978      	ldr	r0, [r7, #20]
 800160a:	f7ff f9a9 	bl	8000960 <vPortFree>
 800160e:	e001      	b.n	8001614 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d013      	beq.n	8001642 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800161a:	88fa      	ldrh	r2, [r7, #6]
 800161c:	2300      	movs	r3, #0
 800161e:	9303      	str	r3, [sp, #12]
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	9302      	str	r3, [sp, #8]
 8001624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001626:	9301      	str	r3, [sp, #4]
 8001628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	68b9      	ldr	r1, [r7, #8]
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	f000 f80e 	bl	8001652 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001636:	69f8      	ldr	r0, [r7, #28]
 8001638:	f000 f89a 	bl	8001770 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800163c:	2301      	movs	r3, #1
 800163e:	61bb      	str	r3, [r7, #24]
 8001640:	e002      	b.n	8001648 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001642:	f04f 33ff 	mov.w	r3, #4294967295
 8001646:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001648:	69bb      	ldr	r3, [r7, #24]
	}
 800164a:	4618      	mov	r0, r3
 800164c:	3720      	adds	r7, #32
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b088      	sub	sp, #32
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001662:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	461a      	mov	r2, r3
 800166a:	21a5      	movs	r1, #165	; 0xa5
 800166c:	f003 f972 	bl	8004954 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800167a:	3b01      	subs	r3, #1
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	f023 0307 	bic.w	r3, r3, #7
 8001688:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	2b00      	cmp	r3, #0
 8001692:	d009      	beq.n	80016a8 <prvInitialiseNewTask+0x56>
 8001694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001698:	f383 8811 	msr	BASEPRI, r3
 800169c:	f3bf 8f6f 	isb	sy
 80016a0:	f3bf 8f4f 	dsb	sy
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	e7fe      	b.n	80016a6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d01f      	beq.n	80016ee <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
 80016b2:	e012      	b.n	80016da <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	4413      	add	r3, r2
 80016ba:	7819      	ldrb	r1, [r3, #0]
 80016bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	4413      	add	r3, r2
 80016c2:	3334      	adds	r3, #52	; 0x34
 80016c4:	460a      	mov	r2, r1
 80016c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80016c8:	68ba      	ldr	r2, [r7, #8]
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	4413      	add	r3, r2
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d006      	beq.n	80016e2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	3301      	adds	r3, #1
 80016d8:	61fb      	str	r3, [r7, #28]
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	2b09      	cmp	r3, #9
 80016de:	d9e9      	bls.n	80016b4 <prvInitialiseNewTask+0x62>
 80016e0:	e000      	b.n	80016e4 <prvInitialiseNewTask+0x92>
			{
				break;
 80016e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80016e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80016ec:	e003      	b.n	80016f6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80016ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80016f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	d901      	bls.n	8001700 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80016fc:	2304      	movs	r3, #4
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001702:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001704:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800170a:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 800170c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800170e:	2200      	movs	r2, #0
 8001710:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001714:	3304      	adds	r3, #4
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe fd82 	bl	8000220 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800171c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800171e:	3318      	adds	r3, #24
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe fd7d 	bl	8000220 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800172a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800172c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800172e:	f1c3 0205 	rsb	r2, r3, #5
 8001732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001734:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800173a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800173c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800173e:	2200      	movs	r2, #0
 8001740:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	68f9      	ldr	r1, [r7, #12]
 800174e:	69b8      	ldr	r0, [r7, #24]
 8001750:	f7fe fdfa 	bl	8000348 <pxPortInitialiseStack>
 8001754:	4602      	mov	r2, r0
 8001756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001758:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800175a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800175c:	2b00      	cmp	r3, #0
 800175e:	d002      	beq.n	8001766 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001766:	bf00      	nop
 8001768:	3720      	adds	r7, #32
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001770:	b5b0      	push	{r4, r5, r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af02      	add	r7, sp, #8
 8001776:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001778:	f7fe ff10 	bl	800059c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800177c:	4b3b      	ldr	r3, [pc, #236]	; (800186c <prvAddNewTaskToReadyList+0xfc>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	3301      	adds	r3, #1
 8001782:	4a3a      	ldr	r2, [pc, #232]	; (800186c <prvAddNewTaskToReadyList+0xfc>)
 8001784:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001786:	4b3a      	ldr	r3, [pc, #232]	; (8001870 <prvAddNewTaskToReadyList+0x100>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d109      	bne.n	80017a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800178e:	4a38      	ldr	r2, [pc, #224]	; (8001870 <prvAddNewTaskToReadyList+0x100>)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001794:	4b35      	ldr	r3, [pc, #212]	; (800186c <prvAddNewTaskToReadyList+0xfc>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d110      	bne.n	80017be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800179c:	f000 fc0e 	bl	8001fbc <prvInitialiseTaskLists>
 80017a0:	e00d      	b.n	80017be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80017a2:	4b34      	ldr	r3, [pc, #208]	; (8001874 <prvAddNewTaskToReadyList+0x104>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d109      	bne.n	80017be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80017aa:	4b31      	ldr	r3, [pc, #196]	; (8001870 <prvAddNewTaskToReadyList+0x100>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d802      	bhi.n	80017be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80017b8:	4a2d      	ldr	r2, [pc, #180]	; (8001870 <prvAddNewTaskToReadyList+0x100>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80017be:	4b2e      	ldr	r3, [pc, #184]	; (8001878 <prvAddNewTaskToReadyList+0x108>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	3301      	adds	r3, #1
 80017c4:	4a2c      	ldr	r2, [pc, #176]	; (8001878 <prvAddNewTaskToReadyList+0x108>)
 80017c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80017c8:	4b2b      	ldr	r3, [pc, #172]	; (8001878 <prvAddNewTaskToReadyList+0x108>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d016      	beq.n	8001804 <prvAddNewTaskToReadyList+0x94>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4618      	mov	r0, r3
 80017da:	f002 fb21 	bl	8003e20 <SEGGER_SYSVIEW_OnTaskCreate>
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	461d      	mov	r5, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	461c      	mov	r4, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	1ae3      	subs	r3, r4, r3
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	462b      	mov	r3, r5
 8001800:	f001 fab0 	bl	8002d64 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4618      	mov	r0, r3
 8001808:	f002 fb92 	bl	8003f30 <SEGGER_SYSVIEW_OnTaskStartReady>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001810:	2201      	movs	r2, #1
 8001812:	409a      	lsls	r2, r3
 8001814:	4b19      	ldr	r3, [pc, #100]	; (800187c <prvAddNewTaskToReadyList+0x10c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4313      	orrs	r3, r2
 800181a:	4a18      	ldr	r2, [pc, #96]	; (800187c <prvAddNewTaskToReadyList+0x10c>)
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4a15      	ldr	r2, [pc, #84]	; (8001880 <prvAddNewTaskToReadyList+0x110>)
 800182c:	441a      	add	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3304      	adds	r3, #4
 8001832:	4619      	mov	r1, r3
 8001834:	4610      	mov	r0, r2
 8001836:	f7fe fd00 	bl	800023a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800183a:	f7fe fedd 	bl	80005f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800183e:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <prvAddNewTaskToReadyList+0x104>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00e      	beq.n	8001864 <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <prvAddNewTaskToReadyList+0x100>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001850:	429a      	cmp	r2, r3
 8001852:	d207      	bcs.n	8001864 <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <prvAddNewTaskToReadyList+0x114>)
 8001856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	f3bf 8f4f 	dsb	sy
 8001860:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bdb0      	pop	{r4, r5, r7, pc}
 800186c:	20012d54 	.word	0x20012d54
 8001870:	20012c7c 	.word	0x20012c7c
 8001874:	20012d60 	.word	0x20012d60
 8001878:	20012d70 	.word	0x20012d70
 800187c:	20012d5c 	.word	0x20012d5c
 8001880:	20012c80 	.word	0x20012c80
 8001884:	e000ed04 	.word	0xe000ed04

08001888 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800188e:	4b27      	ldr	r3, [pc, #156]	; (800192c <vTaskStartScheduler+0xa4>)
 8001890:	9301      	str	r3, [sp, #4]
 8001892:	2300      	movs	r3, #0
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	2300      	movs	r3, #0
 8001898:	2282      	movs	r2, #130	; 0x82
 800189a:	4925      	ldr	r1, [pc, #148]	; (8001930 <vTaskStartScheduler+0xa8>)
 800189c:	4825      	ldr	r0, [pc, #148]	; (8001934 <vTaskStartScheduler+0xac>)
 800189e:	f7ff fe97 	bl	80015d0 <xTaskCreate>
 80018a2:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d102      	bne.n	80018b0 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80018aa:	f000 fd33 	bl	8002314 <xTimerCreateTimerTask>
 80018ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d128      	bne.n	8001908 <vTaskStartScheduler+0x80>
 80018b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018ba:	f383 8811 	msr	BASEPRI, r3
 80018be:	f3bf 8f6f 	isb	sy
 80018c2:	f3bf 8f4f 	dsb	sy
 80018c6:	60bb      	str	r3, [r7, #8]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80018c8:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <vTaskStartScheduler+0xb0>)
 80018ca:	f04f 32ff 	mov.w	r2, #4294967295
 80018ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <vTaskStartScheduler+0xb4>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80018d6:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <vTaskStartScheduler+0xb8>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <vTaskStartScheduler+0xbc>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	3334      	adds	r3, #52	; 0x34
 80018e2:	2205      	movs	r2, #5
 80018e4:	4912      	ldr	r1, [pc, #72]	; (8001930 <vTaskStartScheduler+0xa8>)
 80018e6:	4618      	mov	r0, r3
 80018e8:	f003 f81a 	bl	8004920 <memcmp>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d005      	beq.n	80018fe <vTaskStartScheduler+0x76>
 80018f2:	4b14      	ldr	r3, [pc, #80]	; (8001944 <vTaskStartScheduler+0xbc>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f002 fad6 	bl	8003ea8 <SEGGER_SYSVIEW_OnTaskStartExec>
 80018fc:	e001      	b.n	8001902 <vTaskStartScheduler+0x7a>
 80018fe:	f002 fa73 	bl	8003de8 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001902:	f7fe fdad 	bl	8000460 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001906:	e00d      	b.n	8001924 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190e:	d109      	bne.n	8001924 <vTaskStartScheduler+0x9c>
 8001910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001914:	f383 8811 	msr	BASEPRI, r3
 8001918:	f3bf 8f6f 	isb	sy
 800191c:	f3bf 8f4f 	dsb	sy
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	e7fe      	b.n	8001922 <vTaskStartScheduler+0x9a>
}
 8001924:	bf00      	nop
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20012d78 	.word	0x20012d78
 8001930:	0800497c 	.word	0x0800497c
 8001934:	08001f8d 	.word	0x08001f8d
 8001938:	20012d74 	.word	0x20012d74
 800193c:	20012d60 	.word	0x20012d60
 8001940:	20012d58 	.word	0x20012d58
 8001944:	20012c7c 	.word	0x20012c7c

08001948 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <vTaskSuspendAll+0x18>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	3301      	adds	r3, #1
 8001952:	4a03      	ldr	r2, [pc, #12]	; (8001960 <vTaskSuspendAll+0x18>)
 8001954:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	20012d7c 	.word	0x20012d7c

08001964 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800196e:	2300      	movs	r3, #0
 8001970:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001972:	4b43      	ldr	r3, [pc, #268]	; (8001a80 <xTaskResumeAll+0x11c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <xTaskResumeAll+0x2a>
 800197a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800197e:	f383 8811 	msr	BASEPRI, r3
 8001982:	f3bf 8f6f 	isb	sy
 8001986:	f3bf 8f4f 	dsb	sy
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	e7fe      	b.n	800198c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800198e:	f7fe fe05 	bl	800059c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001992:	4b3b      	ldr	r3, [pc, #236]	; (8001a80 <xTaskResumeAll+0x11c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	3b01      	subs	r3, #1
 8001998:	4a39      	ldr	r2, [pc, #228]	; (8001a80 <xTaskResumeAll+0x11c>)
 800199a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800199c:	4b38      	ldr	r3, [pc, #224]	; (8001a80 <xTaskResumeAll+0x11c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d165      	bne.n	8001a70 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80019a4:	4b37      	ldr	r3, [pc, #220]	; (8001a84 <xTaskResumeAll+0x120>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d061      	beq.n	8001a70 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80019ac:	e032      	b.n	8001a14 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019ae:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <xTaskResumeAll+0x124>)
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	3318      	adds	r3, #24
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fc9a 	bl	80002f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	3304      	adds	r3, #4
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fc95 	bl	80002f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f002 faaf 	bl	8003f30 <SEGGER_SYSVIEW_OnTaskStartReady>
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d6:	2201      	movs	r2, #1
 80019d8:	409a      	lsls	r2, r3
 80019da:	4b2c      	ldr	r3, [pc, #176]	; (8001a8c <xTaskResumeAll+0x128>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4313      	orrs	r3, r2
 80019e0:	4a2a      	ldr	r2, [pc, #168]	; (8001a8c <xTaskResumeAll+0x128>)
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019e8:	4613      	mov	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4a27      	ldr	r2, [pc, #156]	; (8001a90 <xTaskResumeAll+0x12c>)
 80019f2:	441a      	add	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	3304      	adds	r3, #4
 80019f8:	4619      	mov	r1, r3
 80019fa:	4610      	mov	r0, r2
 80019fc:	f7fe fc1d 	bl	800023a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a04:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <xTaskResumeAll+0x130>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d302      	bcc.n	8001a14 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8001a0e:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <xTaskResumeAll+0x134>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a14:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <xTaskResumeAll+0x124>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1c8      	bne.n	80019ae <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001a22:	f000 fb47 	bl	80020b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001a26:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <xTaskResumeAll+0x138>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d010      	beq.n	8001a54 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001a32:	f000 f847 	bl	8001ac4 <xTaskIncrementTick>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d002      	beq.n	8001a42 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8001a3c:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <xTaskResumeAll+0x134>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3b01      	subs	r3, #1
 8001a46:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f1      	bne.n	8001a32 <xTaskResumeAll+0xce>

						xPendedTicks = 0;
 8001a4e:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <xTaskResumeAll+0x138>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001a54:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <xTaskResumeAll+0x134>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d009      	beq.n	8001a70 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <xTaskResumeAll+0x13c>)
 8001a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	f3bf 8f4f 	dsb	sy
 8001a6c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001a70:	f7fe fdc2 	bl	80005f8 <vPortExitCritical>

	return xAlreadyYielded;
 8001a74:	68bb      	ldr	r3, [r7, #8]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20012d7c 	.word	0x20012d7c
 8001a84:	20012d54 	.word	0x20012d54
 8001a88:	20012d14 	.word	0x20012d14
 8001a8c:	20012d5c 	.word	0x20012d5c
 8001a90:	20012c80 	.word	0x20012c80
 8001a94:	20012c7c 	.word	0x20012c7c
 8001a98:	20012d68 	.word	0x20012d68
 8001a9c:	20012d64 	.word	0x20012d64
 8001aa0:	e000ed04 	.word	0xe000ed04

08001aa4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <xTaskGetTickCount+0x1c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001ab0:	687b      	ldr	r3, [r7, #4]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20012d58 	.word	0x20012d58

08001ac4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ace:	4b50      	ldr	r3, [pc, #320]	; (8001c10 <xTaskIncrementTick+0x14c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f040 8091 	bne.w	8001bfa <xTaskIncrementTick+0x136>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001ad8:	4b4e      	ldr	r3, [pc, #312]	; (8001c14 <xTaskIncrementTick+0x150>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	3301      	adds	r3, #1
 8001ade:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001ae0:	4a4c      	ldr	r2, [pc, #304]	; (8001c14 <xTaskIncrementTick+0x150>)
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d11f      	bne.n	8001b2c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001aec:	4b4a      	ldr	r3, [pc, #296]	; (8001c18 <xTaskIncrementTick+0x154>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d009      	beq.n	8001b0a <xTaskIncrementTick+0x46>
 8001af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001afa:	f383 8811 	msr	BASEPRI, r3
 8001afe:	f3bf 8f6f 	isb	sy
 8001b02:	f3bf 8f4f 	dsb	sy
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	e7fe      	b.n	8001b08 <xTaskIncrementTick+0x44>
 8001b0a:	4b43      	ldr	r3, [pc, #268]	; (8001c18 <xTaskIncrementTick+0x154>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	4b42      	ldr	r3, [pc, #264]	; (8001c1c <xTaskIncrementTick+0x158>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a40      	ldr	r2, [pc, #256]	; (8001c18 <xTaskIncrementTick+0x154>)
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	4a40      	ldr	r2, [pc, #256]	; (8001c1c <xTaskIncrementTick+0x158>)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	4b40      	ldr	r3, [pc, #256]	; (8001c20 <xTaskIncrementTick+0x15c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	3301      	adds	r3, #1
 8001b24:	4a3e      	ldr	r2, [pc, #248]	; (8001c20 <xTaskIncrementTick+0x15c>)
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	f000 fac4 	bl	80020b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001b2c:	4b3d      	ldr	r3, [pc, #244]	; (8001c24 <xTaskIncrementTick+0x160>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d34c      	bcc.n	8001bd0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b36:	4b38      	ldr	r3, [pc, #224]	; (8001c18 <xTaskIncrementTick+0x154>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d104      	bne.n	8001b4a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b40:	4b38      	ldr	r3, [pc, #224]	; (8001c24 <xTaskIncrementTick+0x160>)
 8001b42:	f04f 32ff 	mov.w	r2, #4294967295
 8001b46:	601a      	str	r2, [r3, #0]
					break;
 8001b48:	e042      	b.n	8001bd0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b4a:	4b33      	ldr	r3, [pc, #204]	; (8001c18 <xTaskIncrementTick+0x154>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d203      	bcs.n	8001b6a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001b62:	4a30      	ldr	r2, [pc, #192]	; (8001c24 <xTaskIncrementTick+0x160>)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001b68:	e032      	b.n	8001bd0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fbc0 	bl	80002f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d004      	beq.n	8001b86 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	3318      	adds	r3, #24
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fbb7 	bl	80002f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f002 f9d1 	bl	8003f30 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b92:	2201      	movs	r2, #1
 8001b94:	409a      	lsls	r2, r3
 8001b96:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <xTaskIncrementTick+0x164>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	4a22      	ldr	r2, [pc, #136]	; (8001c28 <xTaskIncrementTick+0x164>)
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4a1f      	ldr	r2, [pc, #124]	; (8001c2c <xTaskIncrementTick+0x168>)
 8001bae:	441a      	add	r2, r3
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	f7fe fb3f 	bl	800023a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <xTaskIncrementTick+0x16c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d3b5      	bcc.n	8001b36 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001bce:	e7b2      	b.n	8001b36 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001bd0:	4b17      	ldr	r3, [pc, #92]	; (8001c30 <xTaskIncrementTick+0x16c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bd6:	4915      	ldr	r1, [pc, #84]	; (8001c2c <xTaskIncrementTick+0x168>)
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d901      	bls.n	8001bec <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8001be8:	2301      	movs	r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001bec:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <xTaskIncrementTick+0x170>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d007      	beq.n	8001c04 <xTaskIncrementTick+0x140>
			{
				xSwitchRequired = pdTRUE;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	e004      	b.n	8001c04 <xTaskIncrementTick+0x140>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <xTaskIncrementTick+0x174>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	4a0d      	ldr	r2, [pc, #52]	; (8001c38 <xTaskIncrementTick+0x174>)
 8001c02:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001c04:	697b      	ldr	r3, [r7, #20]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20012d7c 	.word	0x20012d7c
 8001c14:	20012d58 	.word	0x20012d58
 8001c18:	20012d0c 	.word	0x20012d0c
 8001c1c:	20012d10 	.word	0x20012d10
 8001c20:	20012d6c 	.word	0x20012d6c
 8001c24:	20012d74 	.word	0x20012d74
 8001c28:	20012d5c 	.word	0x20012d5c
 8001c2c:	20012c80 	.word	0x20012c80
 8001c30:	20012c7c 	.word	0x20012c7c
 8001c34:	20012d68 	.word	0x20012d68
 8001c38:	20012d64 	.word	0x20012d64

08001c3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001c42:	4b2f      	ldr	r3, [pc, #188]	; (8001d00 <vTaskSwitchContext+0xc4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001c4a:	4b2e      	ldr	r3, [pc, #184]	; (8001d04 <vTaskSwitchContext+0xc8>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001c50:	e051      	b.n	8001cf6 <vTaskSwitchContext+0xba>
		xYieldPending = pdFALSE;
 8001c52:	4b2c      	ldr	r3, [pc, #176]	; (8001d04 <vTaskSwitchContext+0xc8>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c58:	4b2b      	ldr	r3, [pc, #172]	; (8001d08 <vTaskSwitchContext+0xcc>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	fab3 f383 	clz	r3, r3
 8001c64:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001c66:	7afb      	ldrb	r3, [r7, #11]
 8001c68:	f1c3 031f 	rsb	r3, r3, #31
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	4927      	ldr	r1, [pc, #156]	; (8001d0c <vTaskSwitchContext+0xd0>)
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d109      	bne.n	8001c96 <vTaskSwitchContext+0x5a>
	__asm volatile
 8001c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c86:	f383 8811 	msr	BASEPRI, r3
 8001c8a:	f3bf 8f6f 	isb	sy
 8001c8e:	f3bf 8f4f 	dsb	sy
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	e7fe      	b.n	8001c94 <vTaskSwitchContext+0x58>
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4a1a      	ldr	r2, [pc, #104]	; (8001d0c <vTaskSwitchContext+0xd0>)
 8001ca2:	4413      	add	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	3308      	adds	r3, #8
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d104      	bne.n	8001cc6 <vTaskSwitchContext+0x8a>
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	4a10      	ldr	r2, [pc, #64]	; (8001d10 <vTaskSwitchContext+0xd4>)
 8001cce:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <vTaskSwitchContext+0xd4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	3334      	adds	r3, #52	; 0x34
 8001cd6:	2205      	movs	r2, #5
 8001cd8:	490e      	ldr	r1, [pc, #56]	; (8001d14 <vTaskSwitchContext+0xd8>)
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f002 fe20 	bl	8004920 <memcmp>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d005      	beq.n	8001cf2 <vTaskSwitchContext+0xb6>
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <vTaskSwitchContext+0xd4>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f002 f8dc 	bl	8003ea8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001cf0:	e001      	b.n	8001cf6 <vTaskSwitchContext+0xba>
		traceTASK_SWITCHED_IN();
 8001cf2:	f002 f879 	bl	8003de8 <SEGGER_SYSVIEW_OnIdle>
}
 8001cf6:	bf00      	nop
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20012d7c 	.word	0x20012d7c
 8001d04:	20012d68 	.word	0x20012d68
 8001d08:	20012d5c 	.word	0x20012d5c
 8001d0c:	20012c80 	.word	0x20012c80
 8001d10:	20012c7c 	.word	0x20012c7c
 8001d14:	0800497c 	.word	0x0800497c

08001d18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d109      	bne.n	8001d3c <vTaskPlaceOnEventList+0x24>
 8001d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d2c:	f383 8811 	msr	BASEPRI, r3
 8001d30:	f3bf 8f6f 	isb	sy
 8001d34:	f3bf 8f4f 	dsb	sy
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	e7fe      	b.n	8001d3a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001d3c:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <vTaskPlaceOnEventList+0x44>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	3318      	adds	r3, #24
 8001d42:	4619      	mov	r1, r3
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7fe fa9c 	bl	8000282 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	6838      	ldr	r0, [r7, #0]
 8001d4e:	f000 fa7b 	bl	8002248 <prvAddCurrentTaskToDelayedList>
}
 8001d52:	bf00      	nop
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20012c7c 	.word	0x20012c7c

08001d60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d109      	bne.n	8001d86 <vTaskPlaceOnEventListRestricted+0x26>
 8001d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d76:	f383 8811 	msr	BASEPRI, r3
 8001d7a:	f3bf 8f6f 	isb	sy
 8001d7e:	f3bf 8f4f 	dsb	sy
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	e7fe      	b.n	8001d84 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001d86:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <vTaskPlaceOnEventListRestricted+0x58>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	3318      	adds	r3, #24
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f7fe fa53 	bl	800023a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8001da0:	2024      	movs	r0, #36	; 0x24
 8001da2:	f001 fbc3 	bl	800352c <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	68b8      	ldr	r0, [r7, #8]
 8001daa:	f000 fa4d 	bl	8002248 <prvAddCurrentTaskToDelayedList>
	}
 8001dae:	bf00      	nop
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20012c7c 	.word	0x20012c7c

08001dbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d109      	bne.n	8001de6 <xTaskRemoveFromEventList+0x2a>
 8001dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dd6:	f383 8811 	msr	BASEPRI, r3
 8001dda:	f3bf 8f6f 	isb	sy
 8001dde:	f3bf 8f4f 	dsb	sy
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	e7fe      	b.n	8001de4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	3318      	adds	r3, #24
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fa82 	bl	80002f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001df0:	4b1f      	ldr	r3, [pc, #124]	; (8001e70 <xTaskRemoveFromEventList+0xb4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d120      	bne.n	8001e3a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe fa79 	bl	80002f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f002 f893 	bl	8003f30 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0e:	2201      	movs	r2, #1
 8001e10:	409a      	lsls	r2, r3
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <xTaskRemoveFromEventList+0xb8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	4a16      	ldr	r2, [pc, #88]	; (8001e74 <xTaskRemoveFromEventList+0xb8>)
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4a13      	ldr	r2, [pc, #76]	; (8001e78 <xTaskRemoveFromEventList+0xbc>)
 8001e2a:	441a      	add	r2, r3
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	3304      	adds	r3, #4
 8001e30:	4619      	mov	r1, r3
 8001e32:	4610      	mov	r0, r2
 8001e34:	f7fe fa01 	bl	800023a <vListInsertEnd>
 8001e38:	e005      	b.n	8001e46 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	3318      	adds	r3, #24
 8001e3e:	4619      	mov	r1, r3
 8001e40:	480e      	ldr	r0, [pc, #56]	; (8001e7c <xTaskRemoveFromEventList+0xc0>)
 8001e42:	f7fe f9fa 	bl	800023a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <xTaskRemoveFromEventList+0xc4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d905      	bls.n	8001e60 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001e54:	2301      	movs	r3, #1
 8001e56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001e58:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <xTaskRemoveFromEventList+0xc8>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	e001      	b.n	8001e64 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001e64:	697b      	ldr	r3, [r7, #20]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20012d7c 	.word	0x20012d7c
 8001e74:	20012d5c 	.word	0x20012d5c
 8001e78:	20012c80 	.word	0x20012c80
 8001e7c:	20012d14 	.word	0x20012d14
 8001e80:	20012c7c 	.word	0x20012c7c
 8001e84:	20012d68 	.word	0x20012d68

08001e88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <vTaskInternalSetTimeOutState+0x24>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <vTaskInternalSetTimeOutState+0x28>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	605a      	str	r2, [r3, #4]
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	20012d6c 	.word	0x20012d6c
 8001eb0:	20012d58 	.word	0x20012d58

08001eb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d109      	bne.n	8001ed8 <xTaskCheckForTimeOut+0x24>
 8001ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec8:	f383 8811 	msr	BASEPRI, r3
 8001ecc:	f3bf 8f6f 	isb	sy
 8001ed0:	f3bf 8f4f 	dsb	sy
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	e7fe      	b.n	8001ed6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d109      	bne.n	8001ef2 <xTaskCheckForTimeOut+0x3e>
 8001ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ee2:	f383 8811 	msr	BASEPRI, r3
 8001ee6:	f3bf 8f6f 	isb	sy
 8001eea:	f3bf 8f4f 	dsb	sy
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	e7fe      	b.n	8001ef0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8001ef2:	f7fe fb53 	bl	800059c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <xTaskCheckForTimeOut+0xb8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f0e:	d102      	bne.n	8001f16 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	e023      	b.n	8001f5e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <xTaskCheckForTimeOut+0xbc>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d007      	beq.n	8001f32 <xTaskCheckForTimeOut+0x7e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d802      	bhi.n	8001f32 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	61fb      	str	r3, [r7, #28]
 8001f30:	e015      	b.n	8001f5e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d90b      	bls.n	8001f54 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	1ad2      	subs	r2, r2, r3
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff ff9d 	bl	8001e88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61fb      	str	r3, [r7, #28]
 8001f52:	e004      	b.n	8001f5e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001f5e:	f7fe fb4b 	bl	80005f8 <vPortExitCritical>

	return xReturn;
 8001f62:	69fb      	ldr	r3, [r7, #28]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3720      	adds	r7, #32
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20012d58 	.word	0x20012d58
 8001f70:	20012d6c 	.word	0x20012d6c

08001f74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <vTaskMissedYield+0x14>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]
}
 8001f7e:	bf00      	nop
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	20012d68 	.word	0x20012d68

08001f8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001f94:	f000 f852 	bl	800203c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <prvIdleTask+0x28>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d9f9      	bls.n	8001f94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001fa0:	4b05      	ldr	r3, [pc, #20]	; (8001fb8 <prvIdleTask+0x2c>)
 8001fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	f3bf 8f4f 	dsb	sy
 8001fac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001fb0:	e7f0      	b.n	8001f94 <prvIdleTask+0x8>
 8001fb2:	bf00      	nop
 8001fb4:	20012c80 	.word	0x20012c80
 8001fb8:	e000ed04 	.word	0xe000ed04

08001fbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	e00c      	b.n	8001fe2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4a12      	ldr	r2, [pc, #72]	; (800201c <prvInitialiseTaskLists+0x60>)
 8001fd4:	4413      	add	r3, r2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe f902 	bl	80001e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	607b      	str	r3, [r7, #4]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d9ef      	bls.n	8001fc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001fe8:	480d      	ldr	r0, [pc, #52]	; (8002020 <prvInitialiseTaskLists+0x64>)
 8001fea:	f7fe f8f9 	bl	80001e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001fee:	480d      	ldr	r0, [pc, #52]	; (8002024 <prvInitialiseTaskLists+0x68>)
 8001ff0:	f7fe f8f6 	bl	80001e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001ff4:	480c      	ldr	r0, [pc, #48]	; (8002028 <prvInitialiseTaskLists+0x6c>)
 8001ff6:	f7fe f8f3 	bl	80001e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001ffa:	480c      	ldr	r0, [pc, #48]	; (800202c <prvInitialiseTaskLists+0x70>)
 8001ffc:	f7fe f8f0 	bl	80001e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002000:	480b      	ldr	r0, [pc, #44]	; (8002030 <prvInitialiseTaskLists+0x74>)
 8002002:	f7fe f8ed 	bl	80001e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <prvInitialiseTaskLists+0x78>)
 8002008:	4a05      	ldr	r2, [pc, #20]	; (8002020 <prvInitialiseTaskLists+0x64>)
 800200a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800200c:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <prvInitialiseTaskLists+0x7c>)
 800200e:	4a05      	ldr	r2, [pc, #20]	; (8002024 <prvInitialiseTaskLists+0x68>)
 8002010:	601a      	str	r2, [r3, #0]
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20012c80 	.word	0x20012c80
 8002020:	20012ce4 	.word	0x20012ce4
 8002024:	20012cf8 	.word	0x20012cf8
 8002028:	20012d14 	.word	0x20012d14
 800202c:	20012d28 	.word	0x20012d28
 8002030:	20012d40 	.word	0x20012d40
 8002034:	20012d0c 	.word	0x20012d0c
 8002038:	20012d10 	.word	0x20012d10

0800203c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002042:	e019      	b.n	8002078 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002044:	f7fe faaa 	bl	800059c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002048:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <prvCheckTasksWaitingTermination+0x4c>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3304      	adds	r3, #4
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe f94d 	bl	80002f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800205a:	4b0c      	ldr	r3, [pc, #48]	; (800208c <prvCheckTasksWaitingTermination+0x50>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	3b01      	subs	r3, #1
 8002060:	4a0a      	ldr	r2, [pc, #40]	; (800208c <prvCheckTasksWaitingTermination+0x50>)
 8002062:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002064:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <prvCheckTasksWaitingTermination+0x54>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	3b01      	subs	r3, #1
 800206a:	4a09      	ldr	r2, [pc, #36]	; (8002090 <prvCheckTasksWaitingTermination+0x54>)
 800206c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800206e:	f7fe fac3 	bl	80005f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f80e 	bl	8002094 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <prvCheckTasksWaitingTermination+0x54>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1e1      	bne.n	8002044 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20012d28 	.word	0x20012d28
 800208c:	20012d54 	.word	0x20012d54
 8002090:	20012d3c 	.word	0x20012d3c

08002094 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe fc5d 	bl	8000960 <vPortFree>
			vPortFree( pxTCB );
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7fe fc5a 	bl	8000960 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020ba:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <prvResetNextTaskUnblockTime+0x38>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d104      	bne.n	80020ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80020c4:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <prvResetNextTaskUnblockTime+0x3c>)
 80020c6:	f04f 32ff 	mov.w	r2, #4294967295
 80020ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80020cc:	e008      	b.n	80020e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <prvResetNextTaskUnblockTime+0x38>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	4a04      	ldr	r2, [pc, #16]	; (80020f0 <prvResetNextTaskUnblockTime+0x3c>)
 80020de:	6013      	str	r3, [r2, #0]
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	20012d0c 	.word	0x20012d0c
 80020f0:	20012d74 	.word	0x20012d74

080020f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80020fa:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <xTaskGetSchedulerState+0x34>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d102      	bne.n	8002108 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002102:	2301      	movs	r3, #1
 8002104:	607b      	str	r3, [r7, #4]
 8002106:	e008      	b.n	800211a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <xTaskGetSchedulerState+0x38>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d102      	bne.n	8002116 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002110:	2302      	movs	r3, #2
 8002112:	607b      	str	r3, [r7, #4]
 8002114:	e001      	b.n	800211a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800211a:	687b      	ldr	r3, [r7, #4]
	}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	20012d60 	.word	0x20012d60
 800212c:	20012d7c 	.word	0x20012d7c

08002130 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d075      	beq.n	8002232 <xTaskPriorityDisinherit+0x102>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002146:	4b3d      	ldr	r3, [pc, #244]	; (800223c <xTaskPriorityDisinherit+0x10c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	429a      	cmp	r2, r3
 800214e:	d009      	beq.n	8002164 <xTaskPriorityDisinherit+0x34>
 8002150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002154:	f383 8811 	msr	BASEPRI, r3
 8002158:	f3bf 8f6f 	isb	sy
 800215c:	f3bf 8f4f 	dsb	sy
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	e7fe      	b.n	8002162 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002168:	2b00      	cmp	r3, #0
 800216a:	d109      	bne.n	8002180 <xTaskPriorityDisinherit+0x50>
 800216c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002170:	f383 8811 	msr	BASEPRI, r3
 8002174:	f3bf 8f6f 	isb	sy
 8002178:	f3bf 8f4f 	dsb	sy
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	e7fe      	b.n	800217e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002184:	1e5a      	subs	r2, r3, #1
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002192:	429a      	cmp	r2, r3
 8002194:	d04d      	beq.n	8002232 <xTaskPriorityDisinherit+0x102>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219a:	2b00      	cmp	r3, #0
 800219c:	d149      	bne.n	8002232 <xTaskPriorityDisinherit+0x102>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	3304      	adds	r3, #4
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe f8a6 	bl	80002f4 <uxListRemove>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d115      	bne.n	80021da <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b2:	4923      	ldr	r1, [pc, #140]	; (8002240 <xTaskPriorityDisinherit+0x110>)
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10a      	bne.n	80021da <xTaskPriorityDisinherit+0xaa>
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c8:	2201      	movs	r2, #1
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43da      	mvns	r2, r3
 80021d0:	4b1c      	ldr	r3, [pc, #112]	; (8002244 <xTaskPriorityDisinherit+0x114>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4013      	ands	r3, r2
 80021d6:	4a1b      	ldr	r2, [pc, #108]	; (8002244 <xTaskPriorityDisinherit+0x114>)
 80021d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4619      	mov	r1, r3
 80021de:	204a      	movs	r0, #74	; 0x4a
 80021e0:	f001 f9c2 	bl	8003568 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	f1c3 0205 	rsb	r2, r3, #5
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f001 fe98 	bl	8003f30 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	2201      	movs	r2, #1
 8002206:	409a      	lsls	r2, r3
 8002208:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <xTaskPriorityDisinherit+0x114>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4313      	orrs	r3, r2
 800220e:	4a0d      	ldr	r2, [pc, #52]	; (8002244 <xTaskPriorityDisinherit+0x114>)
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4a08      	ldr	r2, [pc, #32]	; (8002240 <xTaskPriorityDisinherit+0x110>)
 8002220:	441a      	add	r2, r3
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	3304      	adds	r3, #4
 8002226:	4619      	mov	r1, r3
 8002228:	4610      	mov	r0, r2
 800222a:	f7fe f806 	bl	800023a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800222e:	2301      	movs	r3, #1
 8002230:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002232:	697b      	ldr	r3, [r7, #20]
	}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20012c7c 	.word	0x20012c7c
 8002240:	20012c80 	.word	0x20012c80
 8002244:	20012d5c 	.word	0x20012d5c

08002248 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002252:	4b29      	ldr	r3, [pc, #164]	; (80022f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002258:	4b28      	ldr	r3, [pc, #160]	; (80022fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	3304      	adds	r3, #4
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe f848 	bl	80002f4 <uxListRemove>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10b      	bne.n	8002282 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800226a:	4b24      	ldr	r3, [pc, #144]	; (80022fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	2201      	movs	r2, #1
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43da      	mvns	r2, r3
 8002278:	4b21      	ldr	r3, [pc, #132]	; (8002300 <prvAddCurrentTaskToDelayedList+0xb8>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4013      	ands	r3, r2
 800227e:	4a20      	ldr	r2, [pc, #128]	; (8002300 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002280:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002288:	d10a      	bne.n	80022a0 <prvAddCurrentTaskToDelayedList+0x58>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d007      	beq.n	80022a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002290:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	3304      	adds	r3, #4
 8002296:	4619      	mov	r1, r3
 8002298:	481a      	ldr	r0, [pc, #104]	; (8002304 <prvAddCurrentTaskToDelayedList+0xbc>)
 800229a:	f7fd ffce 	bl	800023a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800229e:	e026      	b.n	80022ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80022a8:	4b14      	ldr	r3, [pc, #80]	; (80022fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d209      	bcs.n	80022cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022b8:	4b13      	ldr	r3, [pc, #76]	; (8002308 <prvAddCurrentTaskToDelayedList+0xc0>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	3304      	adds	r3, #4
 80022c2:	4619      	mov	r1, r3
 80022c4:	4610      	mov	r0, r2
 80022c6:	f7fd ffdc 	bl	8000282 <vListInsert>
}
 80022ca:	e010      	b.n	80022ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80022cc:	4b0f      	ldr	r3, [pc, #60]	; (800230c <prvAddCurrentTaskToDelayedList+0xc4>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	3304      	adds	r3, #4
 80022d6:	4619      	mov	r1, r3
 80022d8:	4610      	mov	r0, r2
 80022da:	f7fd ffd2 	bl	8000282 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80022de:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <prvAddCurrentTaskToDelayedList+0xc8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d202      	bcs.n	80022ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80022e8:	4a09      	ldr	r2, [pc, #36]	; (8002310 <prvAddCurrentTaskToDelayedList+0xc8>)
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	6013      	str	r3, [r2, #0]
}
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20012d58 	.word	0x20012d58
 80022fc:	20012c7c 	.word	0x20012c7c
 8002300:	20012d5c 	.word	0x20012d5c
 8002304:	20012d40 	.word	0x20012d40
 8002308:	20012d10 	.word	0x20012d10
 800230c:	20012d0c 	.word	0x20012d0c
 8002310:	20012d74 	.word	0x20012d74

08002314 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800231a:	2300      	movs	r3, #0
 800231c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800231e:	f000 fad1 	bl	80028c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002322:	4b11      	ldr	r3, [pc, #68]	; (8002368 <xTimerCreateTimerTask+0x54>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00b      	beq.n	8002342 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800232a:	4b10      	ldr	r3, [pc, #64]	; (800236c <xTimerCreateTimerTask+0x58>)
 800232c:	9301      	str	r3, [sp, #4]
 800232e:	2302      	movs	r3, #2
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	2300      	movs	r3, #0
 8002334:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002338:	490d      	ldr	r1, [pc, #52]	; (8002370 <xTimerCreateTimerTask+0x5c>)
 800233a:	480e      	ldr	r0, [pc, #56]	; (8002374 <xTimerCreateTimerTask+0x60>)
 800233c:	f7ff f948 	bl	80015d0 <xTaskCreate>
 8002340:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d109      	bne.n	800235c <xTimerCreateTimerTask+0x48>
 8002348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234c:	f383 8811 	msr	BASEPRI, r3
 8002350:	f3bf 8f6f 	isb	sy
 8002354:	f3bf 8f4f 	dsb	sy
 8002358:	603b      	str	r3, [r7, #0]
 800235a:	e7fe      	b.n	800235a <xTimerCreateTimerTask+0x46>
	return xReturn;
 800235c:	687b      	ldr	r3, [r7, #4]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20012db0 	.word	0x20012db0
 800236c:	20012db4 	.word	0x20012db4
 8002370:	08004984 	.word	0x08004984
 8002374:	080024a9 	.word	0x080024a9

08002378 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	; 0x28
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
 8002384:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002386:	2300      	movs	r3, #0
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d109      	bne.n	80023a4 <xTimerGenericCommand+0x2c>
 8002390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002394:	f383 8811 	msr	BASEPRI, r3
 8002398:	f3bf 8f6f 	isb	sy
 800239c:	f3bf 8f4f 	dsb	sy
 80023a0:	623b      	str	r3, [r7, #32]
 80023a2:	e7fe      	b.n	80023a2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80023a4:	4b19      	ldr	r3, [pc, #100]	; (800240c <xTimerGenericCommand+0x94>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d02a      	beq.n	8002402 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2b05      	cmp	r3, #5
 80023bc:	dc18      	bgt.n	80023f0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80023be:	f7ff fe99 	bl	80020f4 <xTaskGetSchedulerState>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d109      	bne.n	80023dc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80023c8:	4b10      	ldr	r3, [pc, #64]	; (800240c <xTimerGenericCommand+0x94>)
 80023ca:	6818      	ldr	r0, [r3, #0]
 80023cc:	f107 0114 	add.w	r1, r7, #20
 80023d0:	2300      	movs	r3, #0
 80023d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023d4:	f7fe fca6 	bl	8000d24 <xQueueGenericSend>
 80023d8:	6278      	str	r0, [r7, #36]	; 0x24
 80023da:	e012      	b.n	8002402 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <xTimerGenericCommand+0x94>)
 80023de:	6818      	ldr	r0, [r3, #0]
 80023e0:	f107 0114 	add.w	r1, r7, #20
 80023e4:	2300      	movs	r3, #0
 80023e6:	2200      	movs	r2, #0
 80023e8:	f7fe fc9c 	bl	8000d24 <xQueueGenericSend>
 80023ec:	6278      	str	r0, [r7, #36]	; 0x24
 80023ee:	e008      	b.n	8002402 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <xTimerGenericCommand+0x94>)
 80023f2:	6818      	ldr	r0, [r3, #0]
 80023f4:	f107 0114 	add.w	r1, r7, #20
 80023f8:	2300      	movs	r3, #0
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	f7fe fdb4 	bl	8000f68 <xQueueGenericSendFromISR>
 8002400:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002404:	4618      	mov	r0, r3
 8002406:	3728      	adds	r7, #40	; 0x28
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20012db0 	.word	0x20012db0

08002410 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af02      	add	r7, sp, #8
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800241a:	4b22      	ldr	r3, [pc, #136]	; (80024a4 <prvProcessExpiredTimer+0x94>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	3304      	adds	r3, #4
 8002428:	4618      	mov	r0, r3
 800242a:	f7fd ff63 	bl	80002f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002434:	f003 0304 	and.w	r3, r3, #4
 8002438:	2b00      	cmp	r3, #0
 800243a:	d021      	beq.n	8002480 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	699a      	ldr	r2, [r3, #24]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	18d1      	adds	r1, r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	6978      	ldr	r0, [r7, #20]
 800244a:	f000 f8d1 	bl	80025f0 <prvInsertTimerInActiveList>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d01e      	beq.n	8002492 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002454:	2300      	movs	r3, #0
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	2300      	movs	r3, #0
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	2100      	movs	r1, #0
 800245e:	6978      	ldr	r0, [r7, #20]
 8002460:	f7ff ff8a 	bl	8002378 <xTimerGenericCommand>
 8002464:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d112      	bne.n	8002492 <prvProcessExpiredTimer+0x82>
 800246c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002470:	f383 8811 	msr	BASEPRI, r3
 8002474:	f3bf 8f6f 	isb	sy
 8002478:	f3bf 8f4f 	dsb	sy
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	e7fe      	b.n	800247e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002486:	f023 0301 	bic.w	r3, r3, #1
 800248a:	b2da      	uxtb	r2, r3
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	6978      	ldr	r0, [r7, #20]
 8002498:	4798      	blx	r3
}
 800249a:	bf00      	nop
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20012da8 	.word	0x20012da8

080024a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80024b0:	f107 0308 	add.w	r3, r7, #8
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 f857 	bl	8002568 <prvGetNextExpireTime>
 80024ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	4619      	mov	r1, r3
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 f803 	bl	80024cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80024c6:	f000 f8d5 	bl	8002674 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80024ca:	e7f1      	b.n	80024b0 <prvTimerTask+0x8>

080024cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80024d6:	f7ff fa37 	bl	8001948 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80024da:	f107 0308 	add.w	r3, r7, #8
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 f866 	bl	80025b0 <prvSampleTimeNow>
 80024e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d130      	bne.n	800254e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10a      	bne.n	8002508 <prvProcessTimerOrBlockTask+0x3c>
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d806      	bhi.n	8002508 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80024fa:	f7ff fa33 	bl	8001964 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80024fe:	68f9      	ldr	r1, [r7, #12]
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff ff85 	bl	8002410 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002506:	e024      	b.n	8002552 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d008      	beq.n	8002520 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800250e:	4b13      	ldr	r3, [pc, #76]	; (800255c <prvProcessTimerOrBlockTask+0x90>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <prvProcessTimerOrBlockTask+0x50>
 8002518:	2301      	movs	r3, #1
 800251a:	e000      	b.n	800251e <prvProcessTimerOrBlockTask+0x52>
 800251c:	2300      	movs	r3, #0
 800251e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002520:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <prvProcessTimerOrBlockTask+0x94>)
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	4619      	mov	r1, r3
 800252e:	f7ff f81b 	bl	8001568 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002532:	f7ff fa17 	bl	8001964 <xTaskResumeAll>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10a      	bne.n	8002552 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800253c:	4b09      	ldr	r3, [pc, #36]	; (8002564 <prvProcessTimerOrBlockTask+0x98>)
 800253e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	f3bf 8f4f 	dsb	sy
 8002548:	f3bf 8f6f 	isb	sy
}
 800254c:	e001      	b.n	8002552 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800254e:	f7ff fa09 	bl	8001964 <xTaskResumeAll>
}
 8002552:	bf00      	nop
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20012dac 	.word	0x20012dac
 8002560:	20012db0 	.word	0x20012db0
 8002564:	e000ed04 	.word	0xe000ed04

08002568 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002570:	4b0e      	ldr	r3, [pc, #56]	; (80025ac <prvGetNextExpireTime+0x44>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <prvGetNextExpireTime+0x16>
 800257a:	2201      	movs	r2, #1
 800257c:	e000      	b.n	8002580 <prvGetNextExpireTime+0x18>
 800257e:	2200      	movs	r2, #0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d105      	bne.n	8002598 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800258c:	4b07      	ldr	r3, [pc, #28]	; (80025ac <prvGetNextExpireTime+0x44>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	e001      	b.n	800259c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800259c:	68fb      	ldr	r3, [r7, #12]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	20012da8 	.word	0x20012da8

080025b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80025b8:	f7ff fa74 	bl	8001aa4 <xTaskGetTickCount>
 80025bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80025be:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <prvSampleTimeNow+0x3c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d205      	bcs.n	80025d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80025c8:	f000 f918 	bl	80027fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	e002      	b.n	80025da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80025da:	4a04      	ldr	r2, [pc, #16]	; (80025ec <prvSampleTimeNow+0x3c>)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80025e0:	68fb      	ldr	r3, [r7, #12]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20012db8 	.word	0x20012db8

080025f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
 80025fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	68ba      	ldr	r2, [r7, #8]
 8002606:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	429a      	cmp	r2, r3
 8002614:	d812      	bhi.n	800263c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	1ad2      	subs	r2, r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	429a      	cmp	r2, r3
 8002622:	d302      	bcc.n	800262a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002624:	2301      	movs	r3, #1
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	e01b      	b.n	8002662 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800262a:	4b10      	ldr	r3, [pc, #64]	; (800266c <prvInsertTimerInActiveList+0x7c>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	3304      	adds	r3, #4
 8002632:	4619      	mov	r1, r3
 8002634:	4610      	mov	r0, r2
 8002636:	f7fd fe24 	bl	8000282 <vListInsert>
 800263a:	e012      	b.n	8002662 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d206      	bcs.n	8002652 <prvInsertTimerInActiveList+0x62>
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d302      	bcc.n	8002652 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800264c:	2301      	movs	r3, #1
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	e007      	b.n	8002662 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002652:	4b07      	ldr	r3, [pc, #28]	; (8002670 <prvInsertTimerInActiveList+0x80>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3304      	adds	r3, #4
 800265a:	4619      	mov	r1, r3
 800265c:	4610      	mov	r0, r2
 800265e:	f7fd fe10 	bl	8000282 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002662:	697b      	ldr	r3, [r7, #20]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20012dac 	.word	0x20012dac
 8002670:	20012da8 	.word	0x20012da8

08002674 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08c      	sub	sp, #48	; 0x30
 8002678:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800267a:	e0ac      	b.n	80027d6 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f2c0 80a9 	blt.w	80027d6 <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	695b      	ldr	r3, [r3, #20]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d004      	beq.n	800269a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	3304      	adds	r3, #4
 8002694:	4618      	mov	r0, r3
 8002696:	f7fd fe2d 	bl	80002f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800269a:	1d3b      	adds	r3, r7, #4
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff ff87 	bl	80025b0 <prvSampleTimeNow>
 80026a2:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2b09      	cmp	r3, #9
 80026a8:	f200 8094 	bhi.w	80027d4 <prvProcessReceivedCommands+0x160>
 80026ac:	a201      	add	r2, pc, #4	; (adr r2, 80026b4 <prvProcessReceivedCommands+0x40>)
 80026ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b2:	bf00      	nop
 80026b4:	080026dd 	.word	0x080026dd
 80026b8:	080026dd 	.word	0x080026dd
 80026bc:	080026dd 	.word	0x080026dd
 80026c0:	0800274f 	.word	0x0800274f
 80026c4:	08002763 	.word	0x08002763
 80026c8:	080027ab 	.word	0x080027ab
 80026cc:	080026dd 	.word	0x080026dd
 80026d0:	080026dd 	.word	0x080026dd
 80026d4:	0800274f 	.word	0x0800274f
 80026d8:	08002763 	.word	0x08002763
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	18d1      	adds	r1, r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a3a      	ldr	r2, [r7, #32]
 80026fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026fc:	f7ff ff78 	bl	80025f0 <prvInsertTimerInActiveList>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d067      	beq.n	80027d6 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800270c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d05c      	beq.n	80027d6 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	441a      	add	r2, r3
 8002724:	2300      	movs	r3, #0
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	2300      	movs	r3, #0
 800272a:	2100      	movs	r1, #0
 800272c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800272e:	f7ff fe23 	bl	8002378 <xTimerGenericCommand>
 8002732:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d14d      	bne.n	80027d6 <prvProcessReceivedCommands+0x162>
 800273a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273e:	f383 8811 	msr	BASEPRI, r3
 8002742:	f3bf 8f6f 	isb	sy
 8002746:	f3bf 8f4f 	dsb	sy
 800274a:	61bb      	str	r3, [r7, #24]
 800274c:	e7fe      	b.n	800274c <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002754:	f023 0301 	bic.w	r3, r3, #1
 8002758:	b2da      	uxtb	r2, r3
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8002760:	e039      	b.n	80027d6 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	b2da      	uxtb	r2, r3
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d109      	bne.n	8002796 <prvProcessReceivedCommands+0x122>
 8002782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002786:	f383 8811 	msr	BASEPRI, r3
 800278a:	f3bf 8f6f 	isb	sy
 800278e:	f3bf 8f4f 	dsb	sy
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	e7fe      	b.n	8002794 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	699a      	ldr	r2, [r3, #24]
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	18d1      	adds	r1, r2, r3
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	6a3a      	ldr	r2, [r7, #32]
 80027a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027a4:	f7ff ff24 	bl	80025f0 <prvInsertTimerInActiveList>
					break;
 80027a8:	e015      	b.n	80027d6 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d103      	bne.n	80027c0 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 80027b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027ba:	f7fe f8d1 	bl	8000960 <vPortFree>
 80027be:	e00a      	b.n	80027d6 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027c6:	f023 0301 	bic.w	r3, r3, #1
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80027d2:	e000      	b.n	80027d6 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 80027d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80027d6:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <prvProcessReceivedCommands+0x184>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f107 0108 	add.w	r1, r7, #8
 80027de:	2200      	movs	r2, #0
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fe fc6d 	bl	80010c0 <xQueueReceive>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f47f af47 	bne.w	800267c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80027ee:	bf00      	nop
 80027f0:	3728      	adds	r7, #40	; 0x28
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20012db0 	.word	0x20012db0

080027fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002802:	e047      	b.n	8002894 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002804:	4b2d      	ldr	r3, [pc, #180]	; (80028bc <prvSwitchTimerLists+0xc0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800280e:	4b2b      	ldr	r3, [pc, #172]	; (80028bc <prvSwitchTimerLists+0xc0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	3304      	adds	r3, #4
 800281c:	4618      	mov	r0, r3
 800281e:	f7fd fd69 	bl	80002f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	6938      	ldr	r0, [r7, #16]
 8002828:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d02d      	beq.n	8002894 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	699a      	ldr	r2, [r3, #24]
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	4413      	add	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	429a      	cmp	r2, r3
 8002848:	d90e      	bls.n	8002868 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002856:	4b19      	ldr	r3, [pc, #100]	; (80028bc <prvSwitchTimerLists+0xc0>)
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	3304      	adds	r3, #4
 800285e:	4619      	mov	r1, r3
 8002860:	4610      	mov	r0, r2
 8002862:	f7fd fd0e 	bl	8000282 <vListInsert>
 8002866:	e015      	b.n	8002894 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002868:	2300      	movs	r3, #0
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	2300      	movs	r3, #0
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	2100      	movs	r1, #0
 8002872:	6938      	ldr	r0, [r7, #16]
 8002874:	f7ff fd80 	bl	8002378 <xTimerGenericCommand>
 8002878:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d109      	bne.n	8002894 <prvSwitchTimerLists+0x98>
 8002880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002884:	f383 8811 	msr	BASEPRI, r3
 8002888:	f3bf 8f6f 	isb	sy
 800288c:	f3bf 8f4f 	dsb	sy
 8002890:	603b      	str	r3, [r7, #0]
 8002892:	e7fe      	b.n	8002892 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002894:	4b09      	ldr	r3, [pc, #36]	; (80028bc <prvSwitchTimerLists+0xc0>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1b2      	bne.n	8002804 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800289e:	4b07      	ldr	r3, [pc, #28]	; (80028bc <prvSwitchTimerLists+0xc0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 80028a4:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <prvSwitchTimerLists+0xc4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a04      	ldr	r2, [pc, #16]	; (80028bc <prvSwitchTimerLists+0xc0>)
 80028aa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80028ac:	4a04      	ldr	r2, [pc, #16]	; (80028c0 <prvSwitchTimerLists+0xc4>)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6013      	str	r3, [r2, #0]
}
 80028b2:	bf00      	nop
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20012da8 	.word	0x20012da8
 80028c0:	20012dac 	.word	0x20012dac

080028c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80028c8:	f7fd fe68 	bl	800059c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80028cc:	4b12      	ldr	r3, [pc, #72]	; (8002918 <prvCheckForValidListAndQueue+0x54>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d11d      	bne.n	8002910 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 80028d4:	4811      	ldr	r0, [pc, #68]	; (800291c <prvCheckForValidListAndQueue+0x58>)
 80028d6:	f7fd fc83 	bl	80001e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80028da:	4811      	ldr	r0, [pc, #68]	; (8002920 <prvCheckForValidListAndQueue+0x5c>)
 80028dc:	f7fd fc80 	bl	80001e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80028e0:	4b10      	ldr	r3, [pc, #64]	; (8002924 <prvCheckForValidListAndQueue+0x60>)
 80028e2:	4a0e      	ldr	r2, [pc, #56]	; (800291c <prvCheckForValidListAndQueue+0x58>)
 80028e4:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80028e6:	4b10      	ldr	r3, [pc, #64]	; (8002928 <prvCheckForValidListAndQueue+0x64>)
 80028e8:	4a0d      	ldr	r2, [pc, #52]	; (8002920 <prvCheckForValidListAndQueue+0x5c>)
 80028ea:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80028ec:	2200      	movs	r2, #0
 80028ee:	210c      	movs	r1, #12
 80028f0:	200a      	movs	r0, #10
 80028f2:	f7fe f9b9 	bl	8000c68 <xQueueGenericCreate>
 80028f6:	4602      	mov	r2, r0
 80028f8:	4b07      	ldr	r3, [pc, #28]	; (8002918 <prvCheckForValidListAndQueue+0x54>)
 80028fa:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <prvCheckForValidListAndQueue+0x54>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002904:	4b04      	ldr	r3, [pc, #16]	; (8002918 <prvCheckForValidListAndQueue+0x54>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4908      	ldr	r1, [pc, #32]	; (800292c <prvCheckForValidListAndQueue+0x68>)
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe fdfc 	bl	8001508 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002910:	f7fd fe72 	bl	80005f8 <vPortExitCritical>
}
 8002914:	bf00      	nop
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20012db0 	.word	0x20012db0
 800291c:	20012d80 	.word	0x20012d80
 8002920:	20012d94 	.word	0x20012d94
 8002924:	20012da8 	.word	0x20012da8
 8002928:	20012dac 	.word	0x20012dac
 800292c:	0800498c 	.word	0x0800498c

08002930 <DAC_SetChannel1Data>:
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	807b      	strh	r3, [r7, #2]
 800293c:	2300      	movs	r3, #0
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	4b08      	ldr	r3, [pc, #32]	; (8002964 <DAC_SetChannel1Data+0x34>)
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4413      	add	r3, r2
 800294a:	3308      	adds	r3, #8
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	461a      	mov	r2, r3
 8002952:	887b      	ldrh	r3, [r7, #2]
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	bf00      	nop
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40007400 	.word	0x40007400

08002968 <DMA_Init>:
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4b25      	ldr	r3, [pc, #148]	; (8002a14 <DMA_Init+0xac>)
 8002980:	4013      	ands	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	431a      	orrs	r2, r3
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	431a      	orrs	r2, r3
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	431a      	orrs	r2, r3
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	431a      	orrs	r2, r3
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	431a      	orrs	r2, r3
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	431a      	orrs	r2, r3
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b0:	431a      	orrs	r2, r3
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b6:	431a      	orrs	r2, r3
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029bc:	4313      	orrs	r3, r2
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f023 0307 	bic.w	r3, r3, #7
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e0:	4313      	orrs	r3, r2
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	615a      	str	r2, [r3, #20]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	609a      	str	r2, [r3, #8]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	60da      	str	r2, [r3, #12]
 8002a06:	bf00      	nop
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	f01c803f 	.word	0xf01c803f

08002a18 <DMA_Cmd>:
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	70fb      	strb	r3, [r7, #3]
 8002a24:	78fb      	ldrb	r3, [r7, #3]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d006      	beq.n	8002a38 <DMA_Cmd+0x20>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f043 0201 	orr.w	r2, r3, #1
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	e005      	b.n	8002a44 <DMA_Cmd+0x2c>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f023 0201 	bic.w	r2, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <DMA_GetCmdStatus>:
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	2300      	movs	r3, #0
 8002a5a:	73fb      	strb	r3, [r7, #15]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d002      	beq.n	8002a6e <DMA_GetCmdStatus+0x1e>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
 8002a6c:	e001      	b.n	8002a72 <DMA_GetCmdStatus+0x22>
 8002a6e:	2300      	movs	r3, #0
 8002a70:	73fb      	strb	r3, [r7, #15]
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
 8002a74:	4618      	mov	r0, r3
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <DMA_GetFlagStatus>:
 8002a80:	b480      	push	{r7}
 8002a82:	b087      	sub	sp, #28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	75fb      	strb	r3, [r7, #23]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a15      	ldr	r2, [pc, #84]	; (8002aec <DMA_GetFlagStatus+0x6c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d802      	bhi.n	8002aa0 <DMA_GetFlagStatus+0x20>
 8002a9a:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <DMA_GetFlagStatus+0x70>)
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	e001      	b.n	8002aa4 <DMA_GetFlagStatus+0x24>
 8002aa0:	4b14      	ldr	r3, [pc, #80]	; (8002af4 <DMA_GetFlagStatus+0x74>)
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <DMA_GetFlagStatus+0x36>
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	e002      	b.n	8002abc <DMA_GetFlagStatus+0x3c>
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002ac2:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <DMA_GetFlagStatus+0x58>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	75fb      	strb	r3, [r7, #23]
 8002ad6:	e001      	b.n	8002adc <DMA_GetFlagStatus+0x5c>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	75fb      	strb	r3, [r7, #23]
 8002adc:	7dfb      	ldrb	r3, [r7, #23]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	371c      	adds	r7, #28
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	4002640f 	.word	0x4002640f
 8002af0:	40026000 	.word	0x40026000
 8002af4:	40026400 	.word	0x40026400

08002af8 <DMA_ClearFlag>:
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a10      	ldr	r2, [pc, #64]	; (8002b48 <DMA_ClearFlag+0x50>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d802      	bhi.n	8002b10 <DMA_ClearFlag+0x18>
 8002b0a:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <DMA_ClearFlag+0x54>)
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	e001      	b.n	8002b14 <DMA_ClearFlag+0x1c>
 8002b10:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <DMA_ClearFlag+0x58>)
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d007      	beq.n	8002b2e <DMA_ClearFlag+0x36>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002b24:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	60d3      	str	r3, [r2, #12]
 8002b2c:	e006      	b.n	8002b3c <DMA_ClearFlag+0x44>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002b34:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	6093      	str	r3, [r2, #8]
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	4002640f 	.word	0x4002640f
 8002b4c:	40026000 	.word	0x40026000
 8002b50:	40026400 	.word	0x40026400

08002b54 <GPIO_Init>:
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	2300      	movs	r3, #0
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]
 8002b6e:	e076      	b.n	8002c5e <GPIO_Init+0x10a>
 8002b70:	2201      	movs	r2, #1
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	613b      	str	r3, [r7, #16]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4013      	ands	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d165      	bne.n	8002c58 <GPIO_Init+0x104>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	2103      	movs	r1, #3
 8002b96:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	401a      	ands	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	791b      	ldrb	r3, [r3, #4]
 8002baa:	4619      	mov	r1, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	791b      	ldrb	r3, [r3, #4]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d003      	beq.n	8002bca <GPIO_Init+0x76>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	791b      	ldrb	r3, [r3, #4]
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d12e      	bne.n	8002c28 <GPIO_Init+0xd4>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	2103      	movs	r1, #3
 8002bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	401a      	ands	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	795b      	ldrb	r3, [r3, #5]
 8002be8:	4619      	mov	r1, r3
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	609a      	str	r2, [r3, #8]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	4619      	mov	r1, r3
 8002c02:	2301      	movs	r3, #1
 8002c04:	408b      	lsls	r3, r1
 8002c06:	43db      	mvns	r3, r3
 8002c08:	401a      	ands	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	7992      	ldrb	r2, [r2, #6]
 8002c16:	4611      	mov	r1, r2
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	b292      	uxth	r2, r2
 8002c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c20:	b292      	uxth	r2, r2
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	605a      	str	r2, [r3, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	2103      	movs	r1, #3
 8002c34:	fa01 f303 	lsl.w	r3, r1, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	60da      	str	r2, [r3, #12]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	79db      	ldrb	r3, [r3, #7]
 8002c48:	4619      	mov	r1, r3
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	60da      	str	r2, [r3, #12]
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	617b      	str	r3, [r7, #20]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2b0f      	cmp	r3, #15
 8002c62:	d985      	bls.n	8002b70 <GPIO_Init+0x1c>
 8002c64:	bf00      	nop
 8002c66:	371c      	adds	r7, #28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <RCC_DeInit>:
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	4a12      	ldr	r2, [pc, #72]	; (8002cc0 <RCC_DeInit+0x50>)
 8002c76:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <RCC_DeInit+0x50>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <RCC_DeInit+0x50>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	609a      	str	r2, [r3, #8]
 8002c86:	4a0e      	ldr	r2, [pc, #56]	; (8002cc0 <RCC_DeInit+0x50>)
 8002c88:	4b0d      	ldr	r3, [pc, #52]	; (8002cc0 <RCC_DeInit+0x50>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 8002c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <RCC_DeInit+0x50>)
 8002c98:	4a0a      	ldr	r2, [pc, #40]	; (8002cc4 <RCC_DeInit+0x54>)
 8002c9a:	605a      	str	r2, [r3, #4]
 8002c9c:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <RCC_DeInit+0x50>)
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <RCC_DeInit+0x58>)
 8002ca0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002ca4:	4a06      	ldr	r2, [pc, #24]	; (8002cc0 <RCC_DeInit+0x50>)
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <RCC_DeInit+0x50>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cae:	6013      	str	r3, [r2, #0]
 8002cb0:	4b03      	ldr	r3, [pc, #12]	; (8002cc0 <RCC_DeInit+0x50>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	bf00      	nop
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	24003010 	.word	0x24003010
 8002cc8:	20003000 	.word	0x20003000

08002ccc <RCC_AHB1PeriphClockCmd>:
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	70fb      	strb	r3, [r7, #3]
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d006      	beq.n	8002cec <RCC_AHB1PeriphClockCmd+0x20>
 8002cde:	490a      	ldr	r1, [pc, #40]	; (8002d08 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002ce0:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	630b      	str	r3, [r1, #48]	; 0x30
 8002cea:	e006      	b.n	8002cfa <RCC_AHB1PeriphClockCmd+0x2e>
 8002cec:	4906      	ldr	r1, [pc, #24]	; (8002d08 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002cee:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	630b      	str	r3, [r1, #48]	; 0x30
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40023800 	.word	0x40023800

08002d0c <SPI_I2S_SendData>:
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	460b      	mov	r3, r1
 8002d16:	807b      	strh	r3, [r7, #2]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	887a      	ldrh	r2, [r7, #2]
 8002d1c:	819a      	strh	r2, [r3, #12]
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <SPI_I2S_GetFlagStatus>:
 8002d2a:	b480      	push	{r7}
 8002d2c:	b085      	sub	sp, #20
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
 8002d32:	460b      	mov	r3, r1
 8002d34:	807b      	strh	r3, [r7, #2]
 8002d36:	2300      	movs	r3, #0
 8002d38:	73fb      	strb	r3, [r7, #15]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	891b      	ldrh	r3, [r3, #8]
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	887b      	ldrh	r3, [r7, #2]
 8002d42:	4013      	ands	r3, r2
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <SPI_I2S_GetFlagStatus+0x26>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	73fb      	strb	r3, [r7, #15]
 8002d4e:	e001      	b.n	8002d54 <SPI_I2S_GetFlagStatus+0x2a>
 8002d50:	2300      	movs	r3, #0
 8002d52:	73fb      	strb	r3, [r7, #15]
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	4618      	mov	r0, r3
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
	...

08002d64 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
 8002d70:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002d72:	2205      	movs	r2, #5
 8002d74:	492b      	ldr	r1, [pc, #172]	; (8002e24 <SYSVIEW_AddTask+0xc0>)
 8002d76:	68b8      	ldr	r0, [r7, #8]
 8002d78:	f001 fdd2 	bl	8004920 <memcmp>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d04b      	beq.n	8002e1a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002d82:	4b29      	ldr	r3, [pc, #164]	; (8002e28 <SYSVIEW_AddTask+0xc4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b07      	cmp	r3, #7
 8002d88:	d903      	bls.n	8002d92 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002d8a:	4828      	ldr	r0, [pc, #160]	; (8002e2c <SYSVIEW_AddTask+0xc8>)
 8002d8c:	f001 fa02 	bl	8004194 <SEGGER_SYSVIEW_Warn>
    return;
 8002d90:	e044      	b.n	8002e1c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002d92:	4b25      	ldr	r3, [pc, #148]	; (8002e28 <SYSVIEW_AddTask+0xc4>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	4926      	ldr	r1, [pc, #152]	; (8002e30 <SYSVIEW_AddTask+0xcc>)
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002da6:	4b20      	ldr	r3, [pc, #128]	; (8002e28 <SYSVIEW_AddTask+0xc4>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	4921      	ldr	r1, [pc, #132]	; (8002e30 <SYSVIEW_AddTask+0xcc>)
 8002dac:	4613      	mov	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	3304      	adds	r3, #4
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002dbc:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <SYSVIEW_AddTask+0xc4>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	491b      	ldr	r1, [pc, #108]	; (8002e30 <SYSVIEW_AddTask+0xcc>)
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	3308      	adds	r3, #8
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002dd2:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <SYSVIEW_AddTask+0xc4>)
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	4916      	ldr	r1, [pc, #88]	; (8002e30 <SYSVIEW_AddTask+0xcc>)
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	330c      	adds	r3, #12
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002de8:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <SYSVIEW_AddTask+0xc4>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4910      	ldr	r1, [pc, #64]	; (8002e30 <SYSVIEW_AddTask+0xcc>)
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	440b      	add	r3, r1
 8002df8:	3310      	adds	r3, #16
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002dfe:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <SYSVIEW_AddTask+0xc4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	3301      	adds	r3, #1
 8002e04:	4a08      	ldr	r2, [pc, #32]	; (8002e28 <SYSVIEW_AddTask+0xc4>)
 8002e06:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68b9      	ldr	r1, [r7, #8]
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f80e 	bl	8002e34 <SYSVIEW_SendTaskInfo>
 8002e18:	e000      	b.n	8002e1c <SYSVIEW_AddTask+0xb8>
    return;
 8002e1a:	bf00      	nop

}
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	08004994 	.word	0x08004994
 8002e28:	20012e5c 	.word	0x20012e5c
 8002e2c:	0800499c 	.word	0x0800499c
 8002e30:	20012dbc 	.word	0x20012dbc

08002e34 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08a      	sub	sp, #40	; 0x28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002e42:	f107 0314 	add.w	r3, r7, #20
 8002e46:	2214      	movs	r2, #20
 8002e48:	2100      	movs	r1, #0
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f001 fd82 	bl	8004954 <memset>
  TaskInfo.TaskID     = TaskID;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002e64:	f107 0314 	add.w	r3, r7, #20
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 fe97 	bl	8003b9c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002e6e:	bf00      	nop
 8002e70:	3728      	adds	r7, #40	; 0x28
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <_DoInit>:
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4b21      	ldr	r3, [pc, #132]	; (8002f04 <_DoInit+0x8c>)
 8002e80:	607b      	str	r3, [r7, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2203      	movs	r2, #3
 8002e86:	611a      	str	r2, [r3, #16]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	615a      	str	r2, [r3, #20]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a1d      	ldr	r2, [pc, #116]	; (8002f08 <_DoInit+0x90>)
 8002e92:	619a      	str	r2, [r3, #24]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a1d      	ldr	r2, [pc, #116]	; (8002f0c <_DoInit+0x94>)
 8002e98:	61da      	str	r2, [r3, #28]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ea0:	621a      	str	r2, [r3, #32]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	62da      	str	r2, [r3, #44]	; 0x2c
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a14      	ldr	r2, [pc, #80]	; (8002f08 <_DoInit+0x90>)
 8002eb8:	661a      	str	r2, [r3, #96]	; 0x60
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a14      	ldr	r2, [pc, #80]	; (8002f10 <_DoInit+0x98>)
 8002ebe:	665a      	str	r2, [r3, #100]	; 0x64
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2210      	movs	r2, #16
 8002ec4:	669a      	str	r2, [r3, #104]	; 0x68
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	671a      	str	r2, [r3, #112]	; 0x70
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	66da      	str	r2, [r3, #108]	; 0x6c
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	675a      	str	r2, [r3, #116]	; 0x74
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3307      	adds	r3, #7
 8002edc:	4a0d      	ldr	r2, [pc, #52]	; (8002f14 <_DoInit+0x9c>)
 8002ede:	6810      	ldr	r0, [r2, #0]
 8002ee0:	6018      	str	r0, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a0c      	ldr	r2, [pc, #48]	; (8002f18 <_DoInit+0xa0>)
 8002ee6:	6810      	ldr	r0, [r2, #0]
 8002ee8:	6018      	str	r0, [r3, #0]
 8002eea:	8891      	ldrh	r1, [r2, #4]
 8002eec:	7992      	ldrb	r2, [r2, #6]
 8002eee:	8099      	strh	r1, [r3, #4]
 8002ef0:	719a      	strb	r2, [r3, #6]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	719a      	strb	r2, [r3, #6]
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	200133cc 	.word	0x200133cc
 8002f08:	080049ec 	.word	0x080049ec
 8002f0c:	20012e60 	.word	0x20012e60
 8002f10:	20013260 	.word	0x20013260
 8002f14:	080049f8 	.word	0x080049f8
 8002f18:	080049fc 	.word	0x080049fc

08002f1c <SEGGER_RTT_ReadNoLock>:
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08a      	sub	sp, #40	; 0x28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	4b3c      	ldr	r3, [pc, #240]	; (800301c <SEGGER_RTT_ReadNoLock+0x100>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <SEGGER_RTT_ReadNoLock+0x18>
 8002f30:	f7ff ffa2 	bl	8002e78 <_DoInit>
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	4613      	mov	r3, r2
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	4413      	add	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	3360      	adds	r3, #96	; 0x60
 8002f40:	4a36      	ldr	r2, [pc, #216]	; (800301c <SEGGER_RTT_ReadNoLock+0x100>)
 8002f42:	4413      	add	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	61fb      	str	r3, [r7, #28]
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	623b      	str	r3, [r7, #32]
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	2300      	movs	r3, #0
 8002f58:	627b      	str	r3, [r7, #36]	; 0x24
 8002f5a:	6a3a      	ldr	r2, [r7, #32]
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d92a      	bls.n	8002fb8 <SEGGER_RTT_ReadNoLock+0x9c>
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4293      	cmp	r3, r2
 8002f72:	bf28      	it	cs
 8002f74:	4613      	movcs	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	4413      	add	r3, r2
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	4619      	mov	r1, r3
 8002f84:	69f8      	ldr	r0, [r7, #28]
 8002f86:	f001 fcda 	bl	800493e <memcpy>
 8002f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4413      	add	r3, r2
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
 8002f92:	69fa      	ldr	r2, [r7, #28]
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4413      	add	r3, r2
 8002f98:	61fb      	str	r3, [r7, #28]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	607b      	str	r3, [r7, #4]
 8002fa2:	6a3a      	ldr	r2, [r7, #32]
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	623b      	str	r3, [r7, #32]
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d101      	bne.n	8002fb8 <SEGGER_RTT_ReadNoLock+0x9c>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	623b      	str	r3, [r7, #32]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	bf28      	it	cs
 8002fc8:	4613      	movcs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d018      	beq.n	8003004 <SEGGER_RTT_ReadNoLock+0xe8>
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	4413      	add	r3, r2
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4619      	mov	r1, r3
 8002fde:	69f8      	ldr	r0, [r7, #28]
 8002fe0:	f001 fcad 	bl	800493e <memcpy>
 8002fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	4413      	add	r3, r2
 8002fea:	627b      	str	r3, [r7, #36]	; 0x24
 8002fec:	69fa      	ldr	r2, [r7, #28]
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	61fb      	str	r3, [r7, #28]
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	607b      	str	r3, [r7, #4]
 8002ffc:	6a3a      	ldr	r2, [r7, #32]
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4413      	add	r3, r2
 8003002:	623b      	str	r3, [r7, #32]
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <SEGGER_RTT_ReadNoLock+0xf4>
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	6a3a      	ldr	r2, [r7, #32]
 800300e:	611a      	str	r2, [r3, #16]
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	4618      	mov	r0, r3
 8003014:	3728      	adds	r7, #40	; 0x28
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	200133cc 	.word	0x200133cc

08003020 <SEGGER_RTT_WriteSkipNoLock>:
 8003020:	b580      	push	{r7, lr}
 8003022:	b08a      	sub	sp, #40	; 0x28
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	627b      	str	r3, [r7, #36]	; 0x24
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	4613      	mov	r3, r2
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	4413      	add	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4a3f      	ldr	r2, [pc, #252]	; (800313c <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 800303e:	4413      	add	r3, r2
 8003040:	623b      	str	r3, [r7, #32]
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	61fb      	str	r3, [r7, #28]
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	61bb      	str	r3, [r7, #24]
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	429a      	cmp	r2, r3
 8003054:	d854      	bhi.n	8003100 <SEGGER_RTT_WriteSkipNoLock+0xe0>
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	3b01      	subs	r3, #1
 8003060:	617b      	str	r3, [r7, #20]
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	429a      	cmp	r2, r3
 8003068:	d30f      	bcc.n	800308a <SEGGER_RTT_WriteSkipNoLock+0x6a>
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	4413      	add	r3, r2
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003076:	4618      	mov	r0, r3
 8003078:	f001 fc61 	bl	800493e <memcpy>
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	441a      	add	r2, r3
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	60da      	str	r2, [r3, #12]
 8003086:	2301      	movs	r3, #1
 8003088:	e054      	b.n	8003134 <SEGGER_RTT_WriteSkipNoLock+0x114>
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	4413      	add	r3, r2
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	429a      	cmp	r2, r3
 8003098:	d34b      	bcc.n	8003132 <SEGGER_RTT_WriteSkipNoLock+0x112>
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d90e      	bls.n	80030ca <SEGGER_RTT_WriteSkipNoLock+0xaa>
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	4413      	add	r3, r2
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030b8:	4618      	mov	r0, r3
 80030ba:	f001 fc40 	bl	800493e <memcpy>
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	441a      	add	r2, r3
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	60da      	str	r2, [r3, #12]
 80030c8:	e018      	b.n	80030fc <SEGGER_RTT_WriteSkipNoLock+0xdc>
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	4413      	add	r3, r2
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030d6:	4618      	mov	r0, r3
 80030d8:	f001 fc31 	bl	800493e <memcpy>
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	6858      	ldr	r0, [r3, #4]
 80030e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	18d1      	adds	r1, r2, r3
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	461a      	mov	r2, r3
 80030ee:	f001 fc26 	bl	800493e <memcpy>
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad2      	subs	r2, r2, r3
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	60da      	str	r2, [r3, #12]
 80030fc:	2301      	movs	r3, #1
 80030fe:	e019      	b.n	8003134 <SEGGER_RTT_WriteSkipNoLock+0x114>
 8003100:	69fa      	ldr	r2, [r7, #28]
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	3b01      	subs	r3, #1
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	429a      	cmp	r2, r3
 8003110:	d30f      	bcc.n	8003132 <SEGGER_RTT_WriteSkipNoLock+0x112>
 8003112:	6a3b      	ldr	r3, [r7, #32]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	4413      	add	r3, r2
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800311e:	4618      	mov	r0, r3
 8003120:	f001 fc0d 	bl	800493e <memcpy>
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	441a      	add	r2, r3
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	60da      	str	r2, [r3, #12]
 800312e:	2301      	movs	r3, #1
 8003130:	e000      	b.n	8003134 <SEGGER_RTT_WriteSkipNoLock+0x114>
 8003132:	2300      	movs	r3, #0
 8003134:	4618      	mov	r0, r3
 8003136:	3728      	adds	r7, #40	; 0x28
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	200133cc 	.word	0x200133cc

08003140 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003150:	e002      	b.n	8003158 <_EncodeStr+0x18>
    Len++;
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	3301      	adds	r3, #1
 8003156:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4413      	add	r3, r2
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1f6      	bne.n	8003152 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	429a      	cmp	r2, r3
 800316a:	d901      	bls.n	8003170 <_EncodeStr+0x30>
    Len = Limit;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	2bfe      	cmp	r3, #254	; 0xfe
 8003174:	d806      	bhi.n	8003184 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	60fa      	str	r2, [r7, #12]
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	701a      	strb	r2, [r3, #0]
 8003182:	e011      	b.n	80031a8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	60fa      	str	r2, [r7, #12]
 800318a:	22ff      	movs	r2, #255	; 0xff
 800318c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	60fa      	str	r2, [r7, #12]
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	60fa      	str	r2, [r7, #12]
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	0a12      	lsrs	r2, r2, #8
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80031ac:	e00a      	b.n	80031c4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	60fa      	str	r2, [r7, #12]
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	1c51      	adds	r1, r2, #1
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	7812      	ldrb	r2, [r2, #0]
 80031bc:	701a      	strb	r2, [r3, #0]
    n++;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	3301      	adds	r3, #1
 80031c2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d3f0      	bcc.n	80031ae <_EncodeStr+0x6e>
  }
  return pPayload;
 80031cc:	68fb      	ldr	r3, [r7, #12]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	371c      	adds	r7, #28
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3304      	adds	r3, #4
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80031f8:	1cfb      	adds	r3, r7, #3
 80031fa:	2201      	movs	r2, #1
 80031fc:	4619      	mov	r1, r3
 80031fe:	2001      	movs	r0, #1
 8003200:	f7ff fe8c 	bl	8002f1c <SEGGER_RTT_ReadNoLock>
 8003204:	4603      	mov	r3, r0
 8003206:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	dd47      	ble.n	800329e <_HandleIncomingPacket+0xac>
    switch (Cmd) {
 800320e:	78fb      	ldrb	r3, [r7, #3]
 8003210:	2b04      	cmp	r3, #4
 8003212:	d01a      	beq.n	800324a <_HandleIncomingPacket+0x58>
 8003214:	2b04      	cmp	r3, #4
 8003216:	dc06      	bgt.n	8003226 <_HandleIncomingPacket+0x34>
 8003218:	2b02      	cmp	r3, #2
 800321a:	d010      	beq.n	800323e <_HandleIncomingPacket+0x4c>
 800321c:	2b02      	cmp	r3, #2
 800321e:	dc11      	bgt.n	8003244 <_HandleIncomingPacket+0x52>
 8003220:	2b01      	cmp	r3, #1
 8003222:	d009      	beq.n	8003238 <_HandleIncomingPacket+0x46>
 8003224:	e02d      	b.n	8003282 <_HandleIncomingPacket+0x90>
 8003226:	2b06      	cmp	r3, #6
 8003228:	d015      	beq.n	8003256 <_HandleIncomingPacket+0x64>
 800322a:	2b06      	cmp	r3, #6
 800322c:	db10      	blt.n	8003250 <_HandleIncomingPacket+0x5e>
 800322e:	2b07      	cmp	r3, #7
 8003230:	d014      	beq.n	800325c <_HandleIncomingPacket+0x6a>
 8003232:	2b80      	cmp	r3, #128	; 0x80
 8003234:	d015      	beq.n	8003262 <_HandleIncomingPacket+0x70>
 8003236:	e024      	b.n	8003282 <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003238:	f000 fb34 	bl	80038a4 <SEGGER_SYSVIEW_Start>
      break;
 800323c:	e02f      	b.n	800329e <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800323e:	f000 fbed 	bl	8003a1c <SEGGER_SYSVIEW_Stop>
      break;
 8003242:	e02c      	b.n	800329e <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003244:	f000 fda4 	bl	8003d90 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003248:	e029      	b.n	800329e <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800324a:	f000 fd8d 	bl	8003d68 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800324e:	e026      	b.n	800329e <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003250:	f000 fc0a 	bl	8003a68 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003254:	e023      	b.n	800329e <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003256:	f000 ff5f 	bl	8004118 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800325a:	e020      	b.n	800329e <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800325c:	f000 ff3e 	bl	80040dc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003260:	e01d      	b.n	800329e <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003262:	1cfb      	adds	r3, r7, #3
 8003264:	2201      	movs	r2, #1
 8003266:	4619      	mov	r1, r3
 8003268:	2001      	movs	r0, #1
 800326a:	f7ff fe57 	bl	8002f1c <SEGGER_RTT_ReadNoLock>
 800326e:	4603      	mov	r3, r0
 8003270:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	dd0f      	ble.n	8003298 <_HandleIncomingPacket+0xa6>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003278:	78fb      	ldrb	r3, [r7, #3]
 800327a:	4618      	mov	r0, r3
 800327c:	f000 feae 	bl	8003fdc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003280:	e00a      	b.n	8003298 <_HandleIncomingPacket+0xa6>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	b25b      	sxtb	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	da08      	bge.n	800329c <_HandleIncomingPacket+0xaa>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800328a:	1cfb      	adds	r3, r7, #3
 800328c:	2201      	movs	r2, #1
 800328e:	4619      	mov	r1, r3
 8003290:	2001      	movs	r0, #1
 8003292:	f7ff fe43 	bl	8002f1c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003296:	e001      	b.n	800329c <_HandleIncomingPacket+0xaa>
      break;
 8003298:	bf00      	nop
 800329a:	e000      	b.n	800329e <_HandleIncomingPacket+0xac>
      break;
 800329c:	bf00      	nop
    }
  }
}
 800329e:	bf00      	nop
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
	...

080032a8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08c      	sub	sp, #48	; 0x30
 80032ac:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80032ae:	2301      	movs	r3, #1
 80032b0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80032b2:	1d3b      	adds	r3, r7, #4
 80032b4:	3301      	adds	r3, #1
 80032b6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032bc:	4b30      	ldr	r3, [pc, #192]	; (8003380 <_TrySendOverflowPacket+0xd8>)
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80032c2:	e00b      	b.n	80032dc <_TrySendOverflowPacket+0x34>
 80032c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	701a      	strb	r2, [r3, #0]
 80032d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d8:	09db      	lsrs	r3, r3, #7
 80032da:	62bb      	str	r3, [r7, #40]	; 0x28
 80032dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032de:	2b7f      	cmp	r3, #127	; 0x7f
 80032e0:	d8f0      	bhi.n	80032c4 <_TrySendOverflowPacket+0x1c>
 80032e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	701a      	strb	r2, [r3, #0]
 80032ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80032f2:	4b24      	ldr	r3, [pc, #144]	; (8003384 <_TrySendOverflowPacket+0xdc>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80032f8:	4b21      	ldr	r3, [pc, #132]	; (8003380 <_TrySendOverflowPacket+0xd8>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	623b      	str	r3, [r7, #32]
 800330a:	e00b      	b.n	8003324 <_TrySendOverflowPacket+0x7c>
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	1c5a      	adds	r2, r3, #1
 8003310:	627a      	str	r2, [r7, #36]	; 0x24
 8003312:	6a3a      	ldr	r2, [r7, #32]
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	701a      	strb	r2, [r3, #0]
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	09db      	lsrs	r3, r3, #7
 8003322:	623b      	str	r3, [r7, #32]
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	2b7f      	cmp	r3, #127	; 0x7f
 8003328:	d8f0      	bhi.n	800330c <_TrySendOverflowPacket+0x64>
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	627a      	str	r2, [r7, #36]	; 0x24
 8003330:	6a3a      	ldr	r2, [r7, #32]
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	701a      	strb	r2, [r3, #0]
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800333a:	69fa      	ldr	r2, [r7, #28]
 800333c:	1d3b      	adds	r3, r7, #4
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	461a      	mov	r2, r3
 8003342:	1d3b      	adds	r3, r7, #4
 8003344:	4619      	mov	r1, r3
 8003346:	2001      	movs	r0, #1
 8003348:	f7ff fe6a 	bl	8003020 <SEGGER_RTT_WriteSkipNoLock>
 800334c:	4603      	mov	r3, r0
 800334e:	613b      	str	r3, [r7, #16]
  if (Status) {
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d009      	beq.n	800336a <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003356:	4a0a      	ldr	r2, [pc, #40]	; (8003380 <_TrySendOverflowPacket+0xd8>)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800335c:	4b08      	ldr	r3, [pc, #32]	; (8003380 <_TrySendOverflowPacket+0xd8>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	3b01      	subs	r3, #1
 8003362:	b2da      	uxtb	r2, r3
 8003364:	4b06      	ldr	r3, [pc, #24]	; (8003380 <_TrySendOverflowPacket+0xd8>)
 8003366:	701a      	strb	r2, [r3, #0]
 8003368:	e004      	b.n	8003374 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800336a:	4b05      	ldr	r3, [pc, #20]	; (8003380 <_TrySendOverflowPacket+0xd8>)
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	3301      	adds	r3, #1
 8003370:	4a03      	ldr	r2, [pc, #12]	; (8003380 <_TrySendOverflowPacket+0xd8>)
 8003372:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003374:	693b      	ldr	r3, [r7, #16]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3730      	adds	r7, #48	; 0x30
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20013270 	.word	0x20013270
 8003384:	e0001004 	.word	0xe0001004

08003388 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003388:	b580      	push	{r7, lr}
 800338a:	b08a      	sub	sp, #40	; 0x28
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003394:	4b62      	ldr	r3, [pc, #392]	; (8003520 <_SendPacket+0x198>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d010      	beq.n	80033be <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800339c:	4b60      	ldr	r3, [pc, #384]	; (8003520 <_SendPacket+0x198>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 809f 	beq.w	80034e4 <_SendPacket+0x15c>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80033a6:	4b5e      	ldr	r3, [pc, #376]	; (8003520 <_SendPacket+0x198>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d108      	bne.n	80033c0 <_SendPacket+0x38>
    _TrySendOverflowPacket();
 80033ae:	f7ff ff7b 	bl	80032a8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80033b2:	4b5b      	ldr	r3, [pc, #364]	; (8003520 <_SendPacket+0x198>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	f040 8096 	bne.w	80034e8 <_SendPacket+0x160>
 80033bc:	e000      	b.n	80033c0 <_SendPacket+0x38>
    goto Send;
 80033be:	bf00      	nop
Send:
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b1f      	cmp	r3, #31
 80033c4:	d809      	bhi.n	80033da <_SendPacket+0x52>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80033c6:	4b56      	ldr	r3, [pc, #344]	; (8003520 <_SendPacket+0x198>)
 80033c8:	69da      	ldr	r2, [r3, #28]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	fa22 f303 	lsr.w	r3, r2, r3
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f040 8089 	bne.w	80034ec <_SendPacket+0x164>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b17      	cmp	r3, #23
 80033de:	d807      	bhi.n	80033f0 <_SendPacket+0x68>
    *--pStartPacket = EventId;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	701a      	strb	r2, [r3, #0]
 80033ee:	e03d      	b.n	800346c <_SendPacket+0xe4>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	2b7f      	cmp	r3, #127	; 0x7f
 80033fc:	d912      	bls.n	8003424 <_SendPacket+0x9c>
      *--pStartPacket = (NumBytes >> 7);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	3b01      	subs	r3, #1
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	09db      	lsrs	r3, r3, #7
 8003408:	b2da      	uxtb	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	3b01      	subs	r3, #1
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	b2db      	uxtb	r3, r3
 8003418:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800341c:	b2da      	uxtb	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	701a      	strb	r2, [r3, #0]
 8003422:	e006      	b.n	8003432 <_SendPacket+0xaa>
    } else {
      *--pStartPacket = NumBytes;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	3b01      	subs	r3, #1
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b7f      	cmp	r3, #127	; 0x7f
 8003436:	d912      	bls.n	800345e <_SendPacket+0xd6>
      *--pStartPacket = (EventId >> 7);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	3b01      	subs	r3, #1
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	09db      	lsrs	r3, r3, #7
 8003442:	b2da      	uxtb	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	3b01      	subs	r3, #1
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003456:	b2da      	uxtb	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	701a      	strb	r2, [r3, #0]
 800345c:	e006      	b.n	800346c <_SendPacket+0xe4>
    } else {
      *--pStartPacket = EventId;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	3b01      	subs	r3, #1
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	b2da      	uxtb	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800346c:	4b2d      	ldr	r3, [pc, #180]	; (8003524 <_SendPacket+0x19c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003472:	4b2b      	ldr	r3, [pc, #172]	; (8003520 <_SendPacket+0x198>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	623b      	str	r3, [r7, #32]
 8003484:	e00b      	b.n	800349e <_SendPacket+0x116>
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	627a      	str	r2, [r7, #36]	; 0x24
 800348c:	6a3a      	ldr	r2, [r7, #32]
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	701a      	strb	r2, [r3, #0]
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	09db      	lsrs	r3, r3, #7
 800349c:	623b      	str	r3, [r7, #32]
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	2b7f      	cmp	r3, #127	; 0x7f
 80034a2:	d8f0      	bhi.n	8003486 <_SendPacket+0xfe>
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	627a      	str	r2, [r7, #36]	; 0x24
 80034aa:	6a3a      	ldr	r2, [r7, #32]
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	701a      	strb	r2, [r3, #0]
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	461a      	mov	r2, r3
 80034bc:	68f9      	ldr	r1, [r7, #12]
 80034be:	2001      	movs	r0, #1
 80034c0:	f7ff fdae 	bl	8003020 <SEGGER_RTT_WriteSkipNoLock>
 80034c4:	4603      	mov	r3, r0
 80034c6:	613b      	str	r3, [r7, #16]
  if (Status) {
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <_SendPacket+0x14e>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80034ce:	4a14      	ldr	r2, [pc, #80]	; (8003520 <_SendPacket+0x198>)
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	60d3      	str	r3, [r2, #12]
 80034d4:	e00b      	b.n	80034ee <_SendPacket+0x166>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80034d6:	4b12      	ldr	r3, [pc, #72]	; (8003520 <_SendPacket+0x198>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	3301      	adds	r3, #1
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	4b10      	ldr	r3, [pc, #64]	; (8003520 <_SendPacket+0x198>)
 80034e0:	701a      	strb	r2, [r3, #0]
 80034e2:	e004      	b.n	80034ee <_SendPacket+0x166>
    goto SendDone;
 80034e4:	bf00      	nop
 80034e6:	e002      	b.n	80034ee <_SendPacket+0x166>
      goto SendDone;
 80034e8:	bf00      	nop
 80034ea:	e000      	b.n	80034ee <_SendPacket+0x166>
      goto SendDone;
 80034ec:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80034ee:	4b0e      	ldr	r3, [pc, #56]	; (8003528 <_SendPacket+0x1a0>)
 80034f0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80034f4:	4b0c      	ldr	r3, [pc, #48]	; (8003528 <_SendPacket+0x1a0>)
 80034f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d00b      	beq.n	8003516 <_SendPacket+0x18e>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80034fe:	4b08      	ldr	r3, [pc, #32]	; (8003520 <_SendPacket+0x198>)
 8003500:	789b      	ldrb	r3, [r3, #2]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d107      	bne.n	8003516 <_SendPacket+0x18e>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003506:	4b06      	ldr	r3, [pc, #24]	; (8003520 <_SendPacket+0x198>)
 8003508:	2201      	movs	r2, #1
 800350a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800350c:	f7ff fe71 	bl	80031f2 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003510:	4b03      	ldr	r3, [pc, #12]	; (8003520 <_SendPacket+0x198>)
 8003512:	2200      	movs	r2, #0
 8003514:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003516:	bf00      	nop
 8003518:	3728      	adds	r7, #40	; 0x28
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	20013270 	.word	0x20013270
 8003524:	e0001004 	.word	0xe0001004
 8003528:	200133cc 	.word	0x200133cc

0800352c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003534:	f3ef 8311 	mrs	r3, BASEPRI
 8003538:	f04f 0120 	mov.w	r1, #32
 800353c:	f381 8811 	msr	BASEPRI, r1
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	4808      	ldr	r0, [pc, #32]	; (8003564 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003544:	f7ff fe49 	bl	80031da <_PreparePacket>
 8003548:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	68b9      	ldr	r1, [r7, #8]
 800354e:	68b8      	ldr	r0, [r7, #8]
 8003550:	f7ff ff1a 	bl	8003388 <_SendPacket>
  RECORD_END();
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f383 8811 	msr	BASEPRI, r3
}
 800355a:	bf00      	nop
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	200132a0 	.word	0x200132a0

08003568 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003572:	f3ef 8311 	mrs	r3, BASEPRI
 8003576:	f04f 0120 	mov.w	r1, #32
 800357a:	f381 8811 	msr	BASEPRI, r1
 800357e:	617b      	str	r3, [r7, #20]
 8003580:	4816      	ldr	r0, [pc, #88]	; (80035dc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003582:	f7ff fe2a 	bl	80031da <_PreparePacket>
 8003586:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	61fb      	str	r3, [r7, #28]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	61bb      	str	r3, [r7, #24]
 8003594:	e00b      	b.n	80035ae <SEGGER_SYSVIEW_RecordU32+0x46>
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	61fa      	str	r2, [r7, #28]
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	701a      	strb	r2, [r3, #0]
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	09db      	lsrs	r3, r3, #7
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	2b7f      	cmp	r3, #127	; 0x7f
 80035b2:	d8f0      	bhi.n	8003596 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	61fa      	str	r2, [r7, #28]
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	b2d2      	uxtb	r2, r2
 80035be:	701a      	strb	r2, [r3, #0]
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	68f9      	ldr	r1, [r7, #12]
 80035c8:	6938      	ldr	r0, [r7, #16]
 80035ca:	f7ff fedd 	bl	8003388 <_SendPacket>
  RECORD_END();
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f383 8811 	msr	BASEPRI, r3
}
 80035d4:	bf00      	nop
 80035d6:	3720      	adds	r7, #32
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	200132a0 	.word	0x200132a0

080035e0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b08c      	sub	sp, #48	; 0x30
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80035ec:	f3ef 8311 	mrs	r3, BASEPRI
 80035f0:	f04f 0120 	mov.w	r1, #32
 80035f4:	f381 8811 	msr	BASEPRI, r1
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	4825      	ldr	r0, [pc, #148]	; (8003690 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80035fc:	f7ff fded 	bl	80031da <_PreparePacket>
 8003600:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	62fb      	str	r3, [r7, #44]	; 0x2c
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	62bb      	str	r3, [r7, #40]	; 0x28
 800360e:	e00b      	b.n	8003628 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	701a      	strb	r2, [r3, #0]
 8003622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003624:	09db      	lsrs	r3, r3, #7
 8003626:	62bb      	str	r3, [r7, #40]	; 0x28
 8003628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362a:	2b7f      	cmp	r3, #127	; 0x7f
 800362c:	d8f0      	bhi.n	8003610 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800362e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	701a      	strb	r2, [r3, #0]
 800363a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	627b      	str	r3, [r7, #36]	; 0x24
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	623b      	str	r3, [r7, #32]
 8003646:	e00b      	b.n	8003660 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	627a      	str	r2, [r7, #36]	; 0x24
 800364e:	6a3a      	ldr	r2, [r7, #32]
 8003650:	b2d2      	uxtb	r2, r2
 8003652:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	701a      	strb	r2, [r3, #0]
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	09db      	lsrs	r3, r3, #7
 800365e:	623b      	str	r3, [r7, #32]
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	2b7f      	cmp	r3, #127	; 0x7f
 8003664:	d8f0      	bhi.n	8003648 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	1c5a      	adds	r2, r3, #1
 800366a:	627a      	str	r2, [r7, #36]	; 0x24
 800366c:	6a3a      	ldr	r2, [r7, #32]
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	701a      	strb	r2, [r3, #0]
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	6979      	ldr	r1, [r7, #20]
 800367a:	69b8      	ldr	r0, [r7, #24]
 800367c:	f7ff fe84 	bl	8003388 <_SendPacket>
  RECORD_END();
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f383 8811 	msr	BASEPRI, r3
}
 8003686:	bf00      	nop
 8003688:	3730      	adds	r7, #48	; 0x30
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	200132a0 	.word	0x200132a0

08003694 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8003694:	b580      	push	{r7, lr}
 8003696:	b08e      	sub	sp, #56	; 0x38
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
 80036a0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80036a2:	f3ef 8311 	mrs	r3, BASEPRI
 80036a6:	f04f 0120 	mov.w	r1, #32
 80036aa:	f381 8811 	msr	BASEPRI, r1
 80036ae:	61fb      	str	r3, [r7, #28]
 80036b0:	4832      	ldr	r0, [pc, #200]	; (800377c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80036b2:	f7ff fd92 	bl	80031da <_PreparePacket>
 80036b6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	637b      	str	r3, [r7, #52]	; 0x34
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	633b      	str	r3, [r7, #48]	; 0x30
 80036c4:	e00b      	b.n	80036de <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80036c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	637a      	str	r2, [r7, #52]	; 0x34
 80036cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80036d4:	b2d2      	uxtb	r2, r2
 80036d6:	701a      	strb	r2, [r3, #0]
 80036d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036da:	09db      	lsrs	r3, r3, #7
 80036dc:	633b      	str	r3, [r7, #48]	; 0x30
 80036de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e0:	2b7f      	cmp	r3, #127	; 0x7f
 80036e2:	d8f0      	bhi.n	80036c6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80036e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e6:	1c5a      	adds	r2, r3, #1
 80036e8:	637a      	str	r2, [r7, #52]	; 0x34
 80036ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	701a      	strb	r2, [r3, #0]
 80036f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80036fc:	e00b      	b.n	8003716 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80036fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003700:	1c5a      	adds	r2, r3, #1
 8003702:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003704:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003706:	b2d2      	uxtb	r2, r2
 8003708:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	701a      	strb	r2, [r3, #0]
 8003710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003712:	09db      	lsrs	r3, r3, #7
 8003714:	62bb      	str	r3, [r7, #40]	; 0x28
 8003716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003718:	2b7f      	cmp	r3, #127	; 0x7f
 800371a:	d8f0      	bhi.n	80036fe <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800371c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	701a      	strb	r2, [r3, #0]
 8003728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	627b      	str	r3, [r7, #36]	; 0x24
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	623b      	str	r3, [r7, #32]
 8003734:	e00b      	b.n	800374e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	627a      	str	r2, [r7, #36]	; 0x24
 800373c:	6a3a      	ldr	r2, [r7, #32]
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	701a      	strb	r2, [r3, #0]
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	09db      	lsrs	r3, r3, #7
 800374c:	623b      	str	r3, [r7, #32]
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	2b7f      	cmp	r3, #127	; 0x7f
 8003752:	d8f0      	bhi.n	8003736 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	627a      	str	r2, [r7, #36]	; 0x24
 800375a:	6a3a      	ldr	r2, [r7, #32]
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	701a      	strb	r2, [r3, #0]
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	6979      	ldr	r1, [r7, #20]
 8003768:	69b8      	ldr	r0, [r7, #24]
 800376a:	f7ff fe0d 	bl	8003388 <_SendPacket>
  RECORD_END();
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	f383 8811 	msr	BASEPRI, r3
}
 8003774:	bf00      	nop
 8003776:	3738      	adds	r7, #56	; 0x38
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	200132a0 	.word	0x200132a0

08003780 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8003780:	b580      	push	{r7, lr}
 8003782:	b090      	sub	sp, #64	; 0x40
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800378e:	f3ef 8311 	mrs	r3, BASEPRI
 8003792:	f04f 0120 	mov.w	r1, #32
 8003796:	f381 8811 	msr	BASEPRI, r1
 800379a:	61fb      	str	r3, [r7, #28]
 800379c:	4840      	ldr	r0, [pc, #256]	; (80038a0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800379e:	f7ff fd1c 	bl	80031da <_PreparePacket>
 80037a2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80037b0:	e00b      	b.n	80037ca <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80037b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	701a      	strb	r2, [r3, #0]
 80037c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c6:	09db      	lsrs	r3, r3, #7
 80037c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80037ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037cc:	2b7f      	cmp	r3, #127	; 0x7f
 80037ce:	d8f0      	bhi.n	80037b2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80037d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d2:	1c5a      	adds	r2, r3, #1
 80037d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	701a      	strb	r2, [r3, #0]
 80037dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	637b      	str	r3, [r7, #52]	; 0x34
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	633b      	str	r3, [r7, #48]	; 0x30
 80037e8:	e00b      	b.n	8003802 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80037ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	637a      	str	r2, [r7, #52]	; 0x34
 80037f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	701a      	strb	r2, [r3, #0]
 80037fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fe:	09db      	lsrs	r3, r3, #7
 8003800:	633b      	str	r3, [r7, #48]	; 0x30
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003804:	2b7f      	cmp	r3, #127	; 0x7f
 8003806:	d8f0      	bhi.n	80037ea <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8003808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800380a:	1c5a      	adds	r2, r3, #1
 800380c:	637a      	str	r2, [r7, #52]	; 0x34
 800380e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003816:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003820:	e00b      	b.n	800383a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8003822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003836:	09db      	lsrs	r3, r3, #7
 8003838:	62bb      	str	r3, [r7, #40]	; 0x28
 800383a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383c:	2b7f      	cmp	r3, #127	; 0x7f
 800383e:	d8f0      	bhi.n	8003822 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003846:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	701a      	strb	r2, [r3, #0]
 800384c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	627b      	str	r3, [r7, #36]	; 0x24
 8003854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003856:	623b      	str	r3, [r7, #32]
 8003858:	e00b      	b.n	8003872 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	627a      	str	r2, [r7, #36]	; 0x24
 8003860:	6a3a      	ldr	r2, [r7, #32]
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	701a      	strb	r2, [r3, #0]
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	09db      	lsrs	r3, r3, #7
 8003870:	623b      	str	r3, [r7, #32]
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	2b7f      	cmp	r3, #127	; 0x7f
 8003876:	d8f0      	bhi.n	800385a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	627a      	str	r2, [r7, #36]	; 0x24
 800387e:	6a3a      	ldr	r2, [r7, #32]
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	701a      	strb	r2, [r3, #0]
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	6979      	ldr	r1, [r7, #20]
 800388c:	69b8      	ldr	r0, [r7, #24]
 800388e:	f7ff fd7b 	bl	8003388 <_SendPacket>
  RECORD_END();
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	f383 8811 	msr	BASEPRI, r3
}
 8003898:	bf00      	nop
 800389a:	3740      	adds	r7, #64	; 0x40
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	200132a0 	.word	0x200132a0

080038a4 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08c      	sub	sp, #48	; 0x30
 80038a8:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 80038aa:	4b59      	ldr	r3, [pc, #356]	; (8003a10 <SEGGER_SYSVIEW_Start+0x16c>)
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f040 80aa 	bne.w	8003a08 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 80038b4:	4b56      	ldr	r3, [pc, #344]	; (8003a10 <SEGGER_SYSVIEW_Start+0x16c>)
 80038b6:	2201      	movs	r2, #1
 80038b8:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80038ba:	f3ef 8311 	mrs	r3, BASEPRI
 80038be:	f04f 0120 	mov.w	r1, #32
 80038c2:	f381 8811 	msr	BASEPRI, r1
 80038c6:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80038c8:	220a      	movs	r2, #10
 80038ca:	4952      	ldr	r1, [pc, #328]	; (8003a14 <SEGGER_SYSVIEW_Start+0x170>)
 80038cc:	2001      	movs	r0, #1
 80038ce:	f7ff fba7 	bl	8003020 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80038d8:	200a      	movs	r0, #10
 80038da:	f7ff fe27 	bl	800352c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80038de:	f3ef 8311 	mrs	r3, BASEPRI
 80038e2:	f04f 0120 	mov.w	r1, #32
 80038e6:	f381 8811 	msr	BASEPRI, r1
 80038ea:	60bb      	str	r3, [r7, #8]
 80038ec:	484a      	ldr	r0, [pc, #296]	; (8003a18 <SEGGER_SYSVIEW_Start+0x174>)
 80038ee:	f7ff fc74 	bl	80031da <_PreparePacket>
 80038f2:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038fc:	4b44      	ldr	r3, [pc, #272]	; (8003a10 <SEGGER_SYSVIEW_Start+0x16c>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	62bb      	str	r3, [r7, #40]	; 0x28
 8003902:	e00b      	b.n	800391c <SEGGER_SYSVIEW_Start+0x78>
 8003904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	62fa      	str	r2, [r7, #44]	; 0x2c
 800390a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	701a      	strb	r2, [r3, #0]
 8003916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003918:	09db      	lsrs	r3, r3, #7
 800391a:	62bb      	str	r3, [r7, #40]	; 0x28
 800391c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391e:	2b7f      	cmp	r3, #127	; 0x7f
 8003920:	d8f0      	bhi.n	8003904 <SEGGER_SYSVIEW_Start+0x60>
 8003922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003928:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	701a      	strb	r2, [r3, #0]
 800392e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003930:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	627b      	str	r3, [r7, #36]	; 0x24
 8003936:	4b36      	ldr	r3, [pc, #216]	; (8003a10 <SEGGER_SYSVIEW_Start+0x16c>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	623b      	str	r3, [r7, #32]
 800393c:	e00b      	b.n	8003956 <SEGGER_SYSVIEW_Start+0xb2>
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	627a      	str	r2, [r7, #36]	; 0x24
 8003944:	6a3a      	ldr	r2, [r7, #32]
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	701a      	strb	r2, [r3, #0]
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	09db      	lsrs	r3, r3, #7
 8003954:	623b      	str	r3, [r7, #32]
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	2b7f      	cmp	r3, #127	; 0x7f
 800395a:	d8f0      	bhi.n	800393e <SEGGER_SYSVIEW_Start+0x9a>
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	627a      	str	r2, [r7, #36]	; 0x24
 8003962:	6a3a      	ldr	r2, [r7, #32]
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	701a      	strb	r2, [r3, #0]
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	61fb      	str	r3, [r7, #28]
 8003970:	4b27      	ldr	r3, [pc, #156]	; (8003a10 <SEGGER_SYSVIEW_Start+0x16c>)
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	61bb      	str	r3, [r7, #24]
 8003976:	e00b      	b.n	8003990 <SEGGER_SYSVIEW_Start+0xec>
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	61fa      	str	r2, [r7, #28]
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	701a      	strb	r2, [r3, #0]
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	09db      	lsrs	r3, r3, #7
 800398e:	61bb      	str	r3, [r7, #24]
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	2b7f      	cmp	r3, #127	; 0x7f
 8003994:	d8f0      	bhi.n	8003978 <SEGGER_SYSVIEW_Start+0xd4>
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	61fa      	str	r2, [r7, #28]
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	701a      	strb	r2, [r3, #0]
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	2302      	movs	r3, #2
 80039ac:	613b      	str	r3, [r7, #16]
 80039ae:	e00b      	b.n	80039c8 <SEGGER_SYSVIEW_Start+0x124>
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	617a      	str	r2, [r7, #20]
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	701a      	strb	r2, [r3, #0]
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	09db      	lsrs	r3, r3, #7
 80039c6:	613b      	str	r3, [r7, #16]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	2b7f      	cmp	r3, #127	; 0x7f
 80039cc:	d8f0      	bhi.n	80039b0 <SEGGER_SYSVIEW_Start+0x10c>
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	617a      	str	r2, [r7, #20]
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	701a      	strb	r2, [r3, #0]
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80039de:	2218      	movs	r2, #24
 80039e0:	6839      	ldr	r1, [r7, #0]
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7ff fcd0 	bl	8003388 <_SendPacket>
      RECORD_END();
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80039ee:	4b08      	ldr	r3, [pc, #32]	; (8003a10 <SEGGER_SYSVIEW_Start+0x16c>)
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 80039f6:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <SEGGER_SYSVIEW_Start+0x16c>)
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80039fc:	f000 f9c8 	bl	8003d90 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003a00:	f000 f9b2 	bl	8003d68 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003a04:	f000 fb88 	bl	8004118 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8003a08:	bf00      	nop
 8003a0a:	3730      	adds	r7, #48	; 0x30
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	20013270 	.word	0x20013270
 8003a14:	08004a28 	.word	0x08004a28
 8003a18:	200132a0 	.word	0x200132a0

08003a1c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003a22:	f3ef 8311 	mrs	r3, BASEPRI
 8003a26:	f04f 0120 	mov.w	r1, #32
 8003a2a:	f381 8811 	msr	BASEPRI, r1
 8003a2e:	607b      	str	r3, [r7, #4]
 8003a30:	480b      	ldr	r0, [pc, #44]	; (8003a60 <SEGGER_SYSVIEW_Stop+0x44>)
 8003a32:	f7ff fbd2 	bl	80031da <_PreparePacket>
 8003a36:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003a38:	4b0a      	ldr	r3, [pc, #40]	; (8003a64 <SEGGER_SYSVIEW_Stop+0x48>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d007      	beq.n	8003a50 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003a40:	220b      	movs	r2, #11
 8003a42:	6839      	ldr	r1, [r7, #0]
 8003a44:	6838      	ldr	r0, [r7, #0]
 8003a46:	f7ff fc9f 	bl	8003388 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003a4a:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <SEGGER_SYSVIEW_Stop+0x48>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f383 8811 	msr	BASEPRI, r3
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	200132a0 	.word	0x200132a0
 8003a64:	20013270 	.word	0x20013270

08003a68 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08c      	sub	sp, #48	; 0x30
 8003a6c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003a6e:	f3ef 8311 	mrs	r3, BASEPRI
 8003a72:	f04f 0120 	mov.w	r1, #32
 8003a76:	f381 8811 	msr	BASEPRI, r1
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	4845      	ldr	r0, [pc, #276]	; (8003b94 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003a7e:	f7ff fbac 	bl	80031da <_PreparePacket>
 8003a82:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a8c:	4b42      	ldr	r3, [pc, #264]	; (8003b98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a92:	e00b      	b.n	8003aac <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	701a      	strb	r2, [r3, #0]
 8003aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa8:	09db      	lsrs	r3, r3, #7
 8003aaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aae:	2b7f      	cmp	r3, #127	; 0x7f
 8003ab0:	d8f0      	bhi.n	8003a94 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ab8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	701a      	strb	r2, [r3, #0]
 8003abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac6:	4b34      	ldr	r3, [pc, #208]	; (8003b98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	623b      	str	r3, [r7, #32]
 8003acc:	e00b      	b.n	8003ae6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	1c5a      	adds	r2, r3, #1
 8003ad2:	627a      	str	r2, [r7, #36]	; 0x24
 8003ad4:	6a3a      	ldr	r2, [r7, #32]
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	701a      	strb	r2, [r3, #0]
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	09db      	lsrs	r3, r3, #7
 8003ae4:	623b      	str	r3, [r7, #32]
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	2b7f      	cmp	r3, #127	; 0x7f
 8003aea:	d8f0      	bhi.n	8003ace <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	1c5a      	adds	r2, r3, #1
 8003af0:	627a      	str	r2, [r7, #36]	; 0x24
 8003af2:	6a3a      	ldr	r2, [r7, #32]
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	701a      	strb	r2, [r3, #0]
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	61fb      	str	r3, [r7, #28]
 8003b00:	4b25      	ldr	r3, [pc, #148]	; (8003b98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	e00b      	b.n	8003b20 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	61fa      	str	r2, [r7, #28]
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	b2d2      	uxtb	r2, r2
 8003b12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	701a      	strb	r2, [r3, #0]
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	09db      	lsrs	r3, r3, #7
 8003b1e:	61bb      	str	r3, [r7, #24]
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	2b7f      	cmp	r3, #127	; 0x7f
 8003b24:	d8f0      	bhi.n	8003b08 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	61fa      	str	r2, [r7, #28]
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	701a      	strb	r2, [r3, #0]
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	617b      	str	r3, [r7, #20]
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	e00b      	b.n	8003b58 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	617a      	str	r2, [r7, #20]
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	b2d2      	uxtb	r2, r2
 8003b4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	701a      	strb	r2, [r3, #0]
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	09db      	lsrs	r3, r3, #7
 8003b56:	613b      	str	r3, [r7, #16]
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	2b7f      	cmp	r3, #127	; 0x7f
 8003b5c:	d8f0      	bhi.n	8003b40 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	1c5a      	adds	r2, r3, #1
 8003b62:	617a      	str	r2, [r7, #20]
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	701a      	strb	r2, [r3, #0]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003b6e:	2218      	movs	r2, #24
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	68b8      	ldr	r0, [r7, #8]
 8003b74:	f7ff fc08 	bl	8003388 <_SendPacket>
  RECORD_END();
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003b7e:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003b86:	4b04      	ldr	r3, [pc, #16]	; (8003b98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	4798      	blx	r3
  }
}
 8003b8c:	bf00      	nop
 8003b8e:	3730      	adds	r7, #48	; 0x30
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	200132a0 	.word	0x200132a0
 8003b98:	20013270 	.word	0x20013270

08003b9c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b092      	sub	sp, #72	; 0x48
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003ba4:	f3ef 8311 	mrs	r3, BASEPRI
 8003ba8:	f04f 0120 	mov.w	r1, #32
 8003bac:	f381 8811 	msr	BASEPRI, r1
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	486b      	ldr	r0, [pc, #428]	; (8003d60 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003bb4:	f7ff fb11 	bl	80031da <_PreparePacket>
 8003bb8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	647b      	str	r3, [r7, #68]	; 0x44
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	4b67      	ldr	r3, [pc, #412]	; (8003d64 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	089b      	lsrs	r3, r3, #2
 8003bce:	643b      	str	r3, [r7, #64]	; 0x40
 8003bd0:	e00b      	b.n	8003bea <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8003bd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	647a      	str	r2, [r7, #68]	; 0x44
 8003bd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	701a      	strb	r2, [r3, #0]
 8003be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003be6:	09db      	lsrs	r3, r3, #7
 8003be8:	643b      	str	r3, [r7, #64]	; 0x40
 8003bea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bec:	2b7f      	cmp	r3, #127	; 0x7f
 8003bee:	d8f0      	bhi.n	8003bd2 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8003bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bf2:	1c5a      	adds	r2, r3, #1
 8003bf4:	647a      	str	r2, [r7, #68]	; 0x44
 8003bf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	701a      	strb	r2, [r3, #0]
 8003bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bfe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c0a:	e00b      	b.n	8003c24 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8003c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c14:	b2d2      	uxtb	r2, r2
 8003c16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	701a      	strb	r2, [r3, #0]
 8003c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c20:	09db      	lsrs	r3, r3, #7
 8003c22:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c26:	2b7f      	cmp	r3, #127	; 0x7f
 8003c28:	d8f0      	bhi.n	8003c0c <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 8003c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	701a      	strb	r2, [r3, #0]
 8003c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c38:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	4619      	mov	r1, r3
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f7ff fa7c 	bl	8003140 <_EncodeStr>
 8003c48:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003c4a:	2209      	movs	r2, #9
 8003c4c:	68f9      	ldr	r1, [r7, #12]
 8003c4e:	6938      	ldr	r0, [r7, #16]
 8003c50:	f7ff fb9a 	bl	8003388 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	4b40      	ldr	r3, [pc, #256]	; (8003d64 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	089b      	lsrs	r3, r3, #2
 8003c68:	633b      	str	r3, [r7, #48]	; 0x30
 8003c6a:	e00b      	b.n	8003c84 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 8003c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	637a      	str	r2, [r7, #52]	; 0x34
 8003c72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	701a      	strb	r2, [r3, #0]
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c80:	09db      	lsrs	r3, r3, #7
 8003c82:	633b      	str	r3, [r7, #48]	; 0x30
 8003c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c86:	2b7f      	cmp	r3, #127	; 0x7f
 8003c88:	d8f0      	bhi.n	8003c6c <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8003c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	637a      	str	r2, [r7, #52]	; 0x34
 8003c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	701a      	strb	r2, [r3, #0]
 8003c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c98:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ca4:	e00b      	b.n	8003cbe <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8003ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	701a      	strb	r2, [r3, #0]
 8003cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cba:	09db      	lsrs	r3, r3, #7
 8003cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc0:	2b7f      	cmp	r3, #127	; 0x7f
 8003cc2:	d8f0      	bhi.n	8003ca6 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8003cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	701a      	strb	r2, [r3, #0]
 8003cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	623b      	str	r3, [r7, #32]
 8003cde:	e00b      	b.n	8003cf8 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	627a      	str	r2, [r7, #36]	; 0x24
 8003ce6:	6a3a      	ldr	r2, [r7, #32]
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	701a      	strb	r2, [r3, #0]
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	09db      	lsrs	r3, r3, #7
 8003cf6:	623b      	str	r3, [r7, #32]
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	2b7f      	cmp	r3, #127	; 0x7f
 8003cfc:	d8f0      	bhi.n	8003ce0 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	1c5a      	adds	r2, r3, #1
 8003d02:	627a      	str	r2, [r7, #36]	; 0x24
 8003d04:	6a3a      	ldr	r2, [r7, #32]
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	701a      	strb	r2, [r3, #0]
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	61fb      	str	r3, [r7, #28]
 8003d12:	2300      	movs	r3, #0
 8003d14:	61bb      	str	r3, [r7, #24]
 8003d16:	e00b      	b.n	8003d30 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	61fa      	str	r2, [r7, #28]
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	701a      	strb	r2, [r3, #0]
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	09db      	lsrs	r3, r3, #7
 8003d2e:	61bb      	str	r3, [r7, #24]
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	2b7f      	cmp	r3, #127	; 0x7f
 8003d34:	d8f0      	bhi.n	8003d18 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	1c5a      	adds	r2, r3, #1
 8003d3a:	61fa      	str	r2, [r7, #28]
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	701a      	strb	r2, [r3, #0]
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003d46:	2215      	movs	r2, #21
 8003d48:	68f9      	ldr	r1, [r7, #12]
 8003d4a:	6938      	ldr	r0, [r7, #16]
 8003d4c:	f7ff fb1c 	bl	8003388 <_SendPacket>
  RECORD_END();
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f383 8811 	msr	BASEPRI, r3
}
 8003d56:	bf00      	nop
 8003d58:	3748      	adds	r7, #72	; 0x48
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	200132a0 	.word	0x200132a0
 8003d64:	20013270 	.word	0x20013270

08003d68 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003d6c:	4b07      	ldr	r3, [pc, #28]	; (8003d8c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d008      	beq.n	8003d86 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003d74:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003d7e:	4b03      	ldr	r3, [pc, #12]	; (8003d8c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	4798      	blx	r3
  }
}
 8003d86:	bf00      	nop
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20013270 	.word	0x20013270

08003d90 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003d96:	4b12      	ldr	r3, [pc, #72]	; (8003de0 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d015      	beq.n	8003dca <SEGGER_SYSVIEW_RecordSystime+0x3a>
 8003d9e:	4b10      	ldr	r3, [pc, #64]	; (8003de0 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d010      	beq.n	8003dca <SEGGER_SYSVIEW_RecordSystime+0x3a>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003da8:	4b0d      	ldr	r3, [pc, #52]	; (8003de0 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4798      	blx	r3
 8003db0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003db4:	6839      	ldr	r1, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003db6:	e897 0018 	ldmia.w	r7, {r3, r4}
 8003dba:	0025      	movs	r5, r4
 8003dbc:	2600      	movs	r6, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003dbe:	462b      	mov	r3, r5
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	200d      	movs	r0, #13
 8003dc4:	f7ff fc0c 	bl	80035e0 <SEGGER_SYSVIEW_RecordU32x2>
 8003dc8:	e005      	b.n	8003dd6 <SEGGER_SYSVIEW_RecordSystime+0x46>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003dca:	4b06      	ldr	r3, [pc, #24]	; (8003de4 <SEGGER_SYSVIEW_RecordSystime+0x54>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4619      	mov	r1, r3
 8003dd0:	200c      	movs	r0, #12
 8003dd2:	f7ff fbc9 	bl	8003568 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dde:	bf00      	nop
 8003de0:	20013270 	.word	0x20013270
 8003de4:	e0001004 	.word	0xe0001004

08003de8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003dee:	f3ef 8311 	mrs	r3, BASEPRI
 8003df2:	f04f 0120 	mov.w	r1, #32
 8003df6:	f381 8811 	msr	BASEPRI, r1
 8003dfa:	607b      	str	r3, [r7, #4]
 8003dfc:	4807      	ldr	r0, [pc, #28]	; (8003e1c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8003dfe:	f7ff f9ec 	bl	80031da <_PreparePacket>
 8003e02:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8003e04:	2211      	movs	r2, #17
 8003e06:	6839      	ldr	r1, [r7, #0]
 8003e08:	6838      	ldr	r0, [r7, #0]
 8003e0a:	f7ff fabd 	bl	8003388 <_SendPacket>
  RECORD_END();
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f383 8811 	msr	BASEPRI, r3
}
 8003e14:	bf00      	nop
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	200132a0 	.word	0x200132a0

08003e20 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003e28:	f3ef 8311 	mrs	r3, BASEPRI
 8003e2c:	f04f 0120 	mov.w	r1, #32
 8003e30:	f381 8811 	msr	BASEPRI, r1
 8003e34:	617b      	str	r3, [r7, #20]
 8003e36:	481a      	ldr	r0, [pc, #104]	; (8003ea0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8003e38:	f7ff f9cf 	bl	80031da <_PreparePacket>
 8003e3c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003e42:	4b18      	ldr	r3, [pc, #96]	; (8003ea4 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	089b      	lsrs	r3, r3, #2
 8003e4c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	61fb      	str	r3, [r7, #28]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	e00b      	b.n	8003e70 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	61fa      	str	r2, [r7, #28]
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	701a      	strb	r2, [r3, #0]
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	09db      	lsrs	r3, r3, #7
 8003e6e:	61bb      	str	r3, [r7, #24]
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	2b7f      	cmp	r3, #127	; 0x7f
 8003e74:	d8f0      	bhi.n	8003e58 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	61fa      	str	r2, [r7, #28]
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	701a      	strb	r2, [r3, #0]
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8003e86:	2208      	movs	r2, #8
 8003e88:	68f9      	ldr	r1, [r7, #12]
 8003e8a:	6938      	ldr	r0, [r7, #16]
 8003e8c:	f7ff fa7c 	bl	8003388 <_SendPacket>
  RECORD_END();
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f383 8811 	msr	BASEPRI, r3
}
 8003e96:	bf00      	nop
 8003e98:	3720      	adds	r7, #32
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	200132a0 	.word	0x200132a0
 8003ea4:	20013270 	.word	0x20013270

08003ea8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003eb0:	f3ef 8311 	mrs	r3, BASEPRI
 8003eb4:	f04f 0120 	mov.w	r1, #32
 8003eb8:	f381 8811 	msr	BASEPRI, r1
 8003ebc:	617b      	str	r3, [r7, #20]
 8003ebe:	481a      	ldr	r0, [pc, #104]	; (8003f28 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8003ec0:	f7ff f98b 	bl	80031da <_PreparePacket>
 8003ec4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003eca:	4b18      	ldr	r3, [pc, #96]	; (8003f2c <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	089b      	lsrs	r3, r3, #2
 8003ed4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	61fb      	str	r3, [r7, #28]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	61bb      	str	r3, [r7, #24]
 8003ede:	e00b      	b.n	8003ef8 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	61fa      	str	r2, [r7, #28]
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	b2d2      	uxtb	r2, r2
 8003eea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	09db      	lsrs	r3, r3, #7
 8003ef6:	61bb      	str	r3, [r7, #24]
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	2b7f      	cmp	r3, #127	; 0x7f
 8003efc:	d8f0      	bhi.n	8003ee0 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	1c5a      	adds	r2, r3, #1
 8003f02:	61fa      	str	r2, [r7, #28]
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	701a      	strb	r2, [r3, #0]
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8003f0e:	2204      	movs	r2, #4
 8003f10:	68f9      	ldr	r1, [r7, #12]
 8003f12:	6938      	ldr	r0, [r7, #16]
 8003f14:	f7ff fa38 	bl	8003388 <_SendPacket>
  RECORD_END();
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f383 8811 	msr	BASEPRI, r3
}
 8003f1e:	bf00      	nop
 8003f20:	3720      	adds	r7, #32
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	200132a0 	.word	0x200132a0
 8003f2c:	20013270 	.word	0x20013270

08003f30 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003f38:	f3ef 8311 	mrs	r3, BASEPRI
 8003f3c:	f04f 0120 	mov.w	r1, #32
 8003f40:	f381 8811 	msr	BASEPRI, r1
 8003f44:	617b      	str	r3, [r7, #20]
 8003f46:	481a      	ldr	r0, [pc, #104]	; (8003fb0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8003f48:	f7ff f947 	bl	80031da <_PreparePacket>
 8003f4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003f52:	4b18      	ldr	r3, [pc, #96]	; (8003fb4 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	089b      	lsrs	r3, r3, #2
 8003f5c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	61fb      	str	r3, [r7, #28]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	61bb      	str	r3, [r7, #24]
 8003f66:	e00b      	b.n	8003f80 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	61fa      	str	r2, [r7, #28]
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	701a      	strb	r2, [r3, #0]
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	09db      	lsrs	r3, r3, #7
 8003f7e:	61bb      	str	r3, [r7, #24]
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	2b7f      	cmp	r3, #127	; 0x7f
 8003f84:	d8f0      	bhi.n	8003f68 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	61fa      	str	r2, [r7, #28]
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	701a      	strb	r2, [r3, #0]
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8003f96:	2206      	movs	r2, #6
 8003f98:	68f9      	ldr	r1, [r7, #12]
 8003f9a:	6938      	ldr	r0, [r7, #16]
 8003f9c:	f7ff f9f4 	bl	8003388 <_SendPacket>
  RECORD_END();
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f383 8811 	msr	BASEPRI, r3
}
 8003fa6:	bf00      	nop
 8003fa8:	3720      	adds	r7, #32
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	200132a0 	.word	0x200132a0
 8003fb4:	20013270 	.word	0x20013270

08003fb8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8003fc0:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	089b      	lsrs	r3, r3, #2
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	20013270 	.word	0x20013270

08003fdc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08c      	sub	sp, #48	; 0x30
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8003fe6:	4b3b      	ldr	r3, [pc, #236]	; (80040d4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d06d      	beq.n	80040ca <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8003fee:	4b39      	ldr	r3, [pc, #228]	; (80040d4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ff8:	e008      	b.n	800400c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8003ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004002:	2b00      	cmp	r3, #0
 8004004:	d007      	beq.n	8004016 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004008:	3301      	adds	r3, #1
 800400a:	62bb      	str	r3, [r7, #40]	; 0x28
 800400c:	79fa      	ldrb	r2, [r7, #7]
 800400e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004010:	429a      	cmp	r2, r3
 8004012:	d8f2      	bhi.n	8003ffa <SEGGER_SYSVIEW_SendModule+0x1e>
 8004014:	e000      	b.n	8004018 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004016:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401a:	2b00      	cmp	r3, #0
 800401c:	d055      	beq.n	80040ca <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800401e:	f3ef 8311 	mrs	r3, BASEPRI
 8004022:	f04f 0120 	mov.w	r1, #32
 8004026:	f381 8811 	msr	BASEPRI, r1
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	482a      	ldr	r0, [pc, #168]	; (80040d8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800402e:	f7ff f8d4 	bl	80031da <_PreparePacket>
 8004032:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	627b      	str	r3, [r7, #36]	; 0x24
 800403c:	79fb      	ldrb	r3, [r7, #7]
 800403e:	623b      	str	r3, [r7, #32]
 8004040:	e00b      	b.n	800405a <SEGGER_SYSVIEW_SendModule+0x7e>
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	627a      	str	r2, [r7, #36]	; 0x24
 8004048:	6a3a      	ldr	r2, [r7, #32]
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004050:	b2d2      	uxtb	r2, r2
 8004052:	701a      	strb	r2, [r3, #0]
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	09db      	lsrs	r3, r3, #7
 8004058:	623b      	str	r3, [r7, #32]
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	2b7f      	cmp	r3, #127	; 0x7f
 800405e:	d8f0      	bhi.n	8004042 <SEGGER_SYSVIEW_SendModule+0x66>
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	1c5a      	adds	r2, r3, #1
 8004064:	627a      	str	r2, [r7, #36]	; 0x24
 8004066:	6a3a      	ldr	r2, [r7, #32]
 8004068:	b2d2      	uxtb	r2, r2
 800406a:	701a      	strb	r2, [r3, #0]
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	61fb      	str	r3, [r7, #28]
 8004074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	61bb      	str	r3, [r7, #24]
 800407a:	e00b      	b.n	8004094 <SEGGER_SYSVIEW_SendModule+0xb8>
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	61fa      	str	r2, [r7, #28]
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	b2d2      	uxtb	r2, r2
 8004086:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	09db      	lsrs	r3, r3, #7
 8004092:	61bb      	str	r3, [r7, #24]
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	2b7f      	cmp	r3, #127	; 0x7f
 8004098:	d8f0      	bhi.n	800407c <SEGGER_SYSVIEW_SendModule+0xa0>
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	1c5a      	adds	r2, r3, #1
 800409e:	61fa      	str	r2, [r7, #28]
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	701a      	strb	r2, [r3, #0]
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80040aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2280      	movs	r2, #128	; 0x80
 80040b0:	4619      	mov	r1, r3
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f7ff f844 	bl	8003140 <_EncodeStr>
 80040b8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80040ba:	2216      	movs	r2, #22
 80040bc:	68f9      	ldr	r1, [r7, #12]
 80040be:	6938      	ldr	r0, [r7, #16]
 80040c0:	f7ff f962 	bl	8003388 <_SendPacket>
      RECORD_END();
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80040ca:	bf00      	nop
 80040cc:	3730      	adds	r7, #48	; 0x30
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20013298 	.word	0x20013298
 80040d8:	200132a0 	.word	0x200132a0

080040dc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80040e2:	4b0c      	ldr	r3, [pc, #48]	; (8004114 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00f      	beq.n	800410a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80040ea:	4b0a      	ldr	r3, [pc, #40]	; (8004114 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1f2      	bne.n	80040f0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800410a:	bf00      	nop
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20013298 	.word	0x20013298

08004118 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800411e:	f3ef 8311 	mrs	r3, BASEPRI
 8004122:	f04f 0120 	mov.w	r1, #32
 8004126:	f381 8811 	msr	BASEPRI, r1
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	4817      	ldr	r0, [pc, #92]	; (800418c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800412e:	f7ff f854 	bl	80031da <_PreparePacket>
 8004132:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	4b14      	ldr	r3, [pc, #80]	; (8004190 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	613b      	str	r3, [r7, #16]
 8004142:	e00b      	b.n	800415c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	617a      	str	r2, [r7, #20]
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	701a      	strb	r2, [r3, #0]
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	09db      	lsrs	r3, r3, #7
 800415a:	613b      	str	r3, [r7, #16]
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	2b7f      	cmp	r3, #127	; 0x7f
 8004160:	d8f0      	bhi.n	8004144 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	617a      	str	r2, [r7, #20]
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	701a      	strb	r2, [r3, #0]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004172:	221b      	movs	r2, #27
 8004174:	6879      	ldr	r1, [r7, #4]
 8004176:	68b8      	ldr	r0, [r7, #8]
 8004178:	f7ff f906 	bl	8003388 <_SendPacket>
  RECORD_END();
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f383 8811 	msr	BASEPRI, r3
}
 8004182:	bf00      	nop
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	200132a0 	.word	0x200132a0
 8004190:	2001329c 	.word	0x2001329c

08004194 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004194:	b580      	push	{r7, lr}
 8004196:	b08a      	sub	sp, #40	; 0x28
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800419c:	f3ef 8311 	mrs	r3, BASEPRI
 80041a0:	f04f 0120 	mov.w	r1, #32
 80041a4:	f381 8811 	msr	BASEPRI, r1
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	4827      	ldr	r0, [pc, #156]	; (8004248 <SEGGER_SYSVIEW_Warn+0xb4>)
 80041ac:	f7ff f815 	bl	80031da <_PreparePacket>
 80041b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80041b2:	2280      	movs	r2, #128	; 0x80
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	6938      	ldr	r0, [r7, #16]
 80041b8:	f7fe ffc2 	bl	8003140 <_EncodeStr>
 80041bc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24
 80041c2:	2301      	movs	r3, #1
 80041c4:	623b      	str	r3, [r7, #32]
 80041c6:	e00b      	b.n	80041e0 <SEGGER_SYSVIEW_Warn+0x4c>
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	627a      	str	r2, [r7, #36]	; 0x24
 80041ce:	6a3a      	ldr	r2, [r7, #32]
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	701a      	strb	r2, [r3, #0]
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	09db      	lsrs	r3, r3, #7
 80041de:	623b      	str	r3, [r7, #32]
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	2b7f      	cmp	r3, #127	; 0x7f
 80041e4:	d8f0      	bhi.n	80041c8 <SEGGER_SYSVIEW_Warn+0x34>
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	1c5a      	adds	r2, r3, #1
 80041ea:	627a      	str	r2, [r7, #36]	; 0x24
 80041ec:	6a3a      	ldr	r2, [r7, #32]
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	701a      	strb	r2, [r3, #0]
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	61fb      	str	r3, [r7, #28]
 80041fa:	2300      	movs	r3, #0
 80041fc:	61bb      	str	r3, [r7, #24]
 80041fe:	e00b      	b.n	8004218 <SEGGER_SYSVIEW_Warn+0x84>
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	61fa      	str	r2, [r7, #28]
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	701a      	strb	r2, [r3, #0]
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	09db      	lsrs	r3, r3, #7
 8004216:	61bb      	str	r3, [r7, #24]
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	2b7f      	cmp	r3, #127	; 0x7f
 800421c:	d8f0      	bhi.n	8004200 <SEGGER_SYSVIEW_Warn+0x6c>
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	61fa      	str	r2, [r7, #28]
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	701a      	strb	r2, [r3, #0]
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800422e:	221a      	movs	r2, #26
 8004230:	68f9      	ldr	r1, [r7, #12]
 8004232:	6938      	ldr	r0, [r7, #16]
 8004234:	f7ff f8a8 	bl	8003388 <_SendPacket>
  RECORD_END();
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f383 8811 	msr	BASEPRI, r3
}
 800423e:	bf00      	nop
 8004240:	3728      	adds	r7, #40	; 0x28
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	200132a0 	.word	0x200132a0

0800424c <STM_EVAL_LEDInit>:
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	4603      	mov	r3, r0
 8004254:	71fb      	strb	r3, [r7, #7]
 8004256:	79fb      	ldrb	r3, [r7, #7]
 8004258:	4a10      	ldr	r2, [pc, #64]	; (800429c <STM_EVAL_LEDInit+0x50>)
 800425a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800425e:	2101      	movs	r1, #1
 8004260:	4618      	mov	r0, r3
 8004262:	f7fe fd33 	bl	8002ccc <RCC_AHB1PeriphClockCmd>
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	4a0d      	ldr	r2, [pc, #52]	; (80042a0 <STM_EVAL_LEDInit+0x54>)
 800426a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800426e:	60bb      	str	r3, [r7, #8]
 8004270:	2301      	movs	r3, #1
 8004272:	733b      	strb	r3, [r7, #12]
 8004274:	2300      	movs	r3, #0
 8004276:	73bb      	strb	r3, [r7, #14]
 8004278:	2301      	movs	r3, #1
 800427a:	73fb      	strb	r3, [r7, #15]
 800427c:	2302      	movs	r3, #2
 800427e:	737b      	strb	r3, [r7, #13]
 8004280:	79fb      	ldrb	r3, [r7, #7]
 8004282:	4a08      	ldr	r2, [pc, #32]	; (80042a4 <STM_EVAL_LEDInit+0x58>)
 8004284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004288:	f107 0208 	add.w	r2, r7, #8
 800428c:	4611      	mov	r1, r2
 800428e:	4618      	mov	r0, r3
 8004290:	f7fe fc60 	bl	8002b54 <GPIO_Init>
 8004294:	bf00      	nop
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	08004a3c 	.word	0x08004a3c
 80042a0:	08004a34 	.word	0x08004a34
 80042a4:	20000004 	.word	0x20000004

080042a8 <STM_EVAL_LEDOn>:
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	4603      	mov	r3, r0
 80042b0:	71fb      	strb	r3, [r7, #7]
 80042b2:	79fb      	ldrb	r3, [r7, #7]
 80042b4:	4a06      	ldr	r2, [pc, #24]	; (80042d0 <STM_EVAL_LEDOn+0x28>)
 80042b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ba:	79fa      	ldrb	r2, [r7, #7]
 80042bc:	4905      	ldr	r1, [pc, #20]	; (80042d4 <STM_EVAL_LEDOn+0x2c>)
 80042be:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80042c2:	831a      	strh	r2, [r3, #24]
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	20000004 	.word	0x20000004
 80042d4:	08004a34 	.word	0x08004a34

080042d8 <Audio_MAL_IRQHandler>:
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
 80042dc:	4b38      	ldr	r3, [pc, #224]	; (80043c0 <Audio_MAL_IRQHandler+0xe8>)
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	4b38      	ldr	r3, [pc, #224]	; (80043c4 <Audio_MAL_IRQHandler+0xec>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4619      	mov	r1, r3
 80042e6:	4610      	mov	r0, r2
 80042e8:	f7fe fbca 	bl	8002a80 <DMA_GetFlagStatus>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d064      	beq.n	80043bc <Audio_MAL_IRQHandler+0xe4>
 80042f2:	4b35      	ldr	r3, [pc, #212]	; (80043c8 <Audio_MAL_IRQHandler+0xf0>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d04c      	beq.n	8004394 <Audio_MAL_IRQHandler+0xbc>
 80042fa:	bf00      	nop
 80042fc:	4b30      	ldr	r3, [pc, #192]	; (80043c0 <Audio_MAL_IRQHandler+0xe8>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f7fe fba5 	bl	8002a50 <DMA_GetCmdStatus>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1f7      	bne.n	80042fc <Audio_MAL_IRQHandler+0x24>
 800430c:	4b2c      	ldr	r3, [pc, #176]	; (80043c0 <Audio_MAL_IRQHandler+0xe8>)
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	4b2c      	ldr	r3, [pc, #176]	; (80043c4 <Audio_MAL_IRQHandler+0xec>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4619      	mov	r1, r3
 8004316:	4610      	mov	r0, r2
 8004318:	f7fe fbee 	bl	8002af8 <DMA_ClearFlag>
 800431c:	4b2b      	ldr	r3, [pc, #172]	; (80043cc <Audio_MAL_IRQHandler+0xf4>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	461a      	mov	r2, r3
 8004322:	4b2b      	ldr	r3, [pc, #172]	; (80043d0 <Audio_MAL_IRQHandler+0xf8>)
 8004324:	609a      	str	r2, [r3, #8]
 8004326:	4b28      	ldr	r3, [pc, #160]	; (80043c8 <Audio_MAL_IRQHandler+0xf0>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800432e:	4293      	cmp	r3, r2
 8004330:	bf28      	it	cs
 8004332:	4613      	movcs	r3, r2
 8004334:	4a26      	ldr	r2, [pc, #152]	; (80043d0 <Audio_MAL_IRQHandler+0xf8>)
 8004336:	6113      	str	r3, [r2, #16]
 8004338:	4b21      	ldr	r3, [pc, #132]	; (80043c0 <Audio_MAL_IRQHandler+0xe8>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4924      	ldr	r1, [pc, #144]	; (80043d0 <Audio_MAL_IRQHandler+0xf8>)
 800433e:	4618      	mov	r0, r3
 8004340:	f7fe fb12 	bl	8002968 <DMA_Init>
 8004344:	4b1e      	ldr	r3, [pc, #120]	; (80043c0 <Audio_MAL_IRQHandler+0xe8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2101      	movs	r1, #1
 800434a:	4618      	mov	r0, r3
 800434c:	f7fe fb64 	bl	8002a18 <DMA_Cmd>
 8004350:	4b1e      	ldr	r3, [pc, #120]	; (80043cc <Audio_MAL_IRQHandler+0xf4>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	4b1c      	ldr	r3, [pc, #112]	; (80043c8 <Audio_MAL_IRQHandler+0xf0>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800435c:	d203      	bcs.n	8004366 <Audio_MAL_IRQHandler+0x8e>
 800435e:	4b1a      	ldr	r3, [pc, #104]	; (80043c8 <Audio_MAL_IRQHandler+0xf0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	e000      	b.n	8004368 <Audio_MAL_IRQHandler+0x90>
 8004366:	4b1b      	ldr	r3, [pc, #108]	; (80043d4 <Audio_MAL_IRQHandler+0xfc>)
 8004368:	4413      	add	r3, r2
 800436a:	4a18      	ldr	r2, [pc, #96]	; (80043cc <Audio_MAL_IRQHandler+0xf4>)
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	4b16      	ldr	r3, [pc, #88]	; (80043c8 <Audio_MAL_IRQHandler+0xf0>)
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	4b15      	ldr	r3, [pc, #84]	; (80043c8 <Audio_MAL_IRQHandler+0xf0>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800437a:	428b      	cmp	r3, r1
 800437c:	bf28      	it	cs
 800437e:	460b      	movcs	r3, r1
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	4a11      	ldr	r2, [pc, #68]	; (80043c8 <Audio_MAL_IRQHandler+0xf0>)
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	4b0e      	ldr	r3, [pc, #56]	; (80043c0 <Audio_MAL_IRQHandler+0xe8>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2101      	movs	r1, #1
 800438c:	4618      	mov	r0, r3
 800438e:	f7fe fb43 	bl	8002a18 <DMA_Cmd>
 8004392:	e013      	b.n	80043bc <Audio_MAL_IRQHandler+0xe4>
 8004394:	4b0a      	ldr	r3, [pc, #40]	; (80043c0 <Audio_MAL_IRQHandler+0xe8>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2100      	movs	r1, #0
 800439a:	4618      	mov	r0, r3
 800439c:	f7fe fb3c 	bl	8002a18 <DMA_Cmd>
 80043a0:	4b07      	ldr	r3, [pc, #28]	; (80043c0 <Audio_MAL_IRQHandler+0xe8>)
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	4b07      	ldr	r3, [pc, #28]	; (80043c4 <Audio_MAL_IRQHandler+0xec>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4619      	mov	r1, r3
 80043aa:	4610      	mov	r0, r2
 80043ac:	f7fe fba4 	bl	8002af8 <DMA_ClearFlag>
 80043b0:	4b06      	ldr	r3, [pc, #24]	; (80043cc <Audio_MAL_IRQHandler+0xf4>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2100      	movs	r1, #0
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 f8e4 	bl	8004584 <EVAL_AUDIO_TransferComplete_CallBack>
 80043bc:	bf00      	nop
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	2000001c 	.word	0x2000001c
 80043c4:	20000020 	.word	0x20000020
 80043c8:	20000014 	.word	0x20000014
 80043cc:	20013474 	.word	0x20013474
 80043d0:	200134b4 	.word	0x200134b4
 80043d4:	0001fffe 	.word	0x0001fffe

080043d8 <DMA1_Stream7_IRQHandler>:
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
 80043dc:	f7ff ff7c 	bl	80042d8 <Audio_MAL_IRQHandler>
 80043e0:	bf00      	nop
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <DMA1_Stream0_IRQHandler>:
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	f7ff ff76 	bl	80042d8 <Audio_MAL_IRQHandler>
 80043ec:	bf00      	nop
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <SPI3_IRQHandler>:
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	2102      	movs	r1, #2
 80043f6:	480d      	ldr	r0, [pc, #52]	; (800442c <SPI3_IRQHandler+0x3c>)
 80043f8:	f7fe fc97 	bl	8002d2a <SPI_I2S_GetFlagStatus>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d011      	beq.n	8004426 <SPI3_IRQHandler+0x36>
 8004402:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <SPI3_IRQHandler+0x40>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2b02      	cmp	r3, #2
 8004408:	d106      	bne.n	8004418 <SPI3_IRQHandler+0x28>
 800440a:	f000 f8c6 	bl	800459a <EVAL_AUDIO_GetSampleCallBack>
 800440e:	4603      	mov	r3, r0
 8004410:	4619      	mov	r1, r3
 8004412:	2004      	movs	r0, #4
 8004414:	f7fe fa8c 	bl	8002930 <DAC_SetChannel1Data>
 8004418:	f000 f8bf 	bl	800459a <EVAL_AUDIO_GetSampleCallBack>
 800441c:	4603      	mov	r3, r0
 800441e:	4619      	mov	r1, r3
 8004420:	4802      	ldr	r0, [pc, #8]	; (800442c <SPI3_IRQHandler+0x3c>)
 8004422:	f7fe fc73 	bl	8002d0c <SPI_I2S_SendData>
 8004426:	bf00      	nop
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	40003c00 	.word	0x40003c00
 8004430:	20000018 	.word	0x20000018

08004434 <ITM_SendChar>:
    \param [in]     ch  Character to transmit.

    \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 800443c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004440:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d012      	beq.n	8004472 <ITM_SendChar+0x3e>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 800444c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004450:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004454:	f003 0301 	and.w	r3, r3, #1
  if ((ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <ITM_SendChar+0x3e>
  {
    while (ITM->PORT[0].u32 == 0);
 800445c:	bf00      	nop
 800445e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0fa      	beq.n	800445e <ITM_SendChar+0x2a>
    ITM->PORT[0].u8 = (uint8_t) ch;
 8004468:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004472:	687b      	ldr	r3, [r7, #4]
}
 8004474:	4618      	mov	r0, r3
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <_write>:

/* Private functions */

// Printf
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */

	for(int i = 0; i < len; i++)
 800448c:	2300      	movs	r3, #0
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	e009      	b.n	80044a6 <_write+0x26>
	{
		ITM_SendChar(ptr[i]);
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	4413      	add	r3, r2
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff ffca 	bl	8004434 <ITM_SendChar>
	for(int i = 0; i < len; i++)
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	3301      	adds	r3, #1
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	dbf1      	blt.n	8004492 <_write+0x12>
	}

	return len;
 80044ae:	687b      	ldr	r3, [r7, #4]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af02      	add	r7, sp, #8


  // INIT
  RCC_DeInit();						// System clock 16MHz olarak ayarlandi
 80044be:	f7fe fbd7 	bl	8002c70 <RCC_DeInit>
  SystemCoreClockUpdate();			// System clock update edildi
 80044c2:	f000 f8e5 	bl	8004690 <SystemCoreClockUpdate>


  /* Initialize LEDs */
  STM_EVAL_LEDInit(LED3);
 80044c6:	2001      	movs	r0, #1
 80044c8:	f7ff fec0 	bl	800424c <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED4);
 80044cc:	2000      	movs	r0, #0
 80044ce:	f7ff febd 	bl	800424c <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED5);
 80044d2:	2002      	movs	r0, #2
 80044d4:	f7ff feba 	bl	800424c <STM_EVAL_LEDInit>
  STM_EVAL_LEDInit(LED6);
 80044d8:	2003      	movs	r0, #3
 80044da:	f7ff feb7 	bl	800424c <STM_EVAL_LEDInit>

  /* Turn on LEDs */
  STM_EVAL_LEDOn(LED3);
 80044de:	2001      	movs	r0, #1
 80044e0:	f7ff fee2 	bl	80042a8 <STM_EVAL_LEDOn>
  STM_EVAL_LEDOn(LED4);
 80044e4:	2000      	movs	r0, #0
 80044e6:	f7ff fedf 	bl	80042a8 <STM_EVAL_LEDOn>
  STM_EVAL_LEDOn(LED5);
 80044ea:	2002      	movs	r0, #2
 80044ec:	f7ff fedc 	bl	80042a8 <STM_EVAL_LEDOn>
  STM_EVAL_LEDOn(LED6);
 80044f0:	2003      	movs	r0, #3
 80044f2:	f7ff fed9 	bl	80042a8 <STM_EVAL_LEDOn>


  //FreeRTOS INIT

  // 1. TASK YARATILIR
  xTaskCreate( task_1_handle_fp,                // Function Pointer
 80044f6:	4b0b      	ldr	r3, [pc, #44]	; (8004524 <main+0x6c>)
 80044f8:	9301      	str	r3, [sp, #4]
 80044fa:	2301      	movs	r3, #1
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	2300      	movs	r3, #0
 8004500:	2282      	movs	r2, #130	; 0x82
 8004502:	4909      	ldr	r1, [pc, #36]	; (8004528 <main+0x70>)
 8004504:	4809      	ldr	r0, [pc, #36]	; (800452c <main+0x74>)
 8004506:	f7fd f863 	bl	80015d0 <xTaskCreate>
               NULL                    ,        // Function Parameter
               1                       ,		// PRIORTY
			   &p_my_task_handle_1_st   );      // Task object


  xTaskCreate( task_2_handle_fp,                // Function Pointer
 800450a:	4b09      	ldr	r3, [pc, #36]	; (8004530 <main+0x78>)
 800450c:	9301      	str	r3, [sp, #4]
 800450e:	2301      	movs	r3, #1
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	2300      	movs	r3, #0
 8004514:	2282      	movs	r2, #130	; 0x82
 8004516:	4907      	ldr	r1, [pc, #28]	; (8004534 <main+0x7c>)
 8004518:	4807      	ldr	r0, [pc, #28]	; (8004538 <main+0x80>)
 800451a:	f7fd f859 	bl	80015d0 <xTaskCreate>
			   &p_my_task_handle_2_st   );      // Task object



  // 2. TASKLAR ZAMANLANIR
  vTaskStartScheduler();
 800451e:	f7fd f9b3 	bl	8001888 <vTaskStartScheduler>




  /* Infinite loop */
  while (1)
 8004522:	e7fe      	b.n	8004522 <main+0x6a>
 8004524:	20013384 	.word	0x20013384
 8004528:	08004a04 	.word	0x08004a04
 800452c:	0800453d 	.word	0x0800453d
 8004530:	20013388 	.word	0x20013388
 8004534:	08004a0c 	.word	0x08004a0c
 8004538:	08004561 	.word	0x08004561

0800453c <task_1_handle_fp>:
//!< CREATED TASK BEGIN   <<



void task_1_handle_fp(void *params_vp)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]

	while(1)
	{
		syc_task_1_u8++;
 8004544:	4b04      	ldr	r3, [pc, #16]	; (8004558 <task_1_handle_fp+0x1c>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	3301      	adds	r3, #1
 800454a:	b2da      	uxtb	r2, r3
 800454c:	4b02      	ldr	r3, [pc, #8]	; (8004558 <task_1_handle_fp+0x1c>)
 800454e:	701a      	strb	r2, [r3, #0]

		printf("TASK-1 \n");
 8004550:	4802      	ldr	r0, [pc, #8]	; (800455c <task_1_handle_fp+0x20>)
 8004552:	f000 f995 	bl	8004880 <puts>
		syc_task_1_u8++;
 8004556:	e7f5      	b.n	8004544 <task_1_handle_fp+0x8>
 8004558:	200134f1 	.word	0x200134f1
 800455c:	08004a14 	.word	0x08004a14

08004560 <task_2_handle_fp>:
	}
}


void task_2_handle_fp(void *params_vp)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]

	while(1)
	{
		syc_task_2_u8++;
 8004568:	4b04      	ldr	r3, [pc, #16]	; (800457c <task_2_handle_fp+0x1c>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	3301      	adds	r3, #1
 800456e:	b2da      	uxtb	r2, r3
 8004570:	4b02      	ldr	r3, [pc, #8]	; (800457c <task_2_handle_fp+0x1c>)
 8004572:	701a      	strb	r2, [r3, #0]

		printf("TASK-2 \n");
 8004574:	4802      	ldr	r0, [pc, #8]	; (8004580 <task_2_handle_fp+0x20>)
 8004576:	f000 f983 	bl	8004880 <puts>
		syc_task_2_u8++;
 800457a:	e7f5      	b.n	8004568 <task_2_handle_fp+0x8>
 800457c:	200134f0 	.word	0x200134f0
 8004580:	08004a1c 	.word	0x08004a1c

08004584 <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 800458e:	bf00      	nop
}
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 800459a:	b480      	push	{r7}
 800459c:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 800459e:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <Reset_Handler>:
 80045ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045e4 <LoopFillZerobss+0x14>
 80045b0:	2100      	movs	r1, #0
 80045b2:	e003      	b.n	80045bc <LoopCopyDataInit>

080045b4 <CopyDataInit>:
 80045b4:	4b0c      	ldr	r3, [pc, #48]	; (80045e8 <LoopFillZerobss+0x18>)
 80045b6:	585b      	ldr	r3, [r3, r1]
 80045b8:	5043      	str	r3, [r0, r1]
 80045ba:	3104      	adds	r1, #4

080045bc <LoopCopyDataInit>:
 80045bc:	480b      	ldr	r0, [pc, #44]	; (80045ec <LoopFillZerobss+0x1c>)
 80045be:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <LoopFillZerobss+0x20>)
 80045c0:	1842      	adds	r2, r0, r1
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d3f6      	bcc.n	80045b4 <CopyDataInit>
 80045c6:	4a0b      	ldr	r2, [pc, #44]	; (80045f4 <LoopFillZerobss+0x24>)
 80045c8:	e002      	b.n	80045d0 <LoopFillZerobss>

080045ca <FillZerobss>:
 80045ca:	2300      	movs	r3, #0
 80045cc:	f842 3b04 	str.w	r3, [r2], #4

080045d0 <LoopFillZerobss>:
 80045d0:	4b09      	ldr	r3, [pc, #36]	; (80045f8 <LoopFillZerobss+0x28>)
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d3f9      	bcc.n	80045ca <FillZerobss>
 80045d6:	f000 f825 	bl	8004624 <SystemInit>
 80045da:	f000 f97d 	bl	80048d8 <__libc_init_array>
 80045de:	f7ff ff6b 	bl	80044b8 <main>
 80045e2:	4770      	bx	lr
 80045e4:	20020000 	.word	0x20020000
 80045e8:	08004a54 	.word	0x08004a54
 80045ec:	20000000 	.word	0x20000000
 80045f0:	20000038 	.word	0x20000038
 80045f4:	20000038 	.word	0x20000038
 80045f8:	200134f4 	.word	0x200134f4

080045fc <ADC_IRQHandler>:
 80045fc:	e7fe      	b.n	80045fc <ADC_IRQHandler>

080045fe <HardFault_Handler>:
 80045fe:	b480      	push	{r7}
 8004600:	af00      	add	r7, sp, #0
 8004602:	e7fe      	b.n	8004602 <HardFault_Handler+0x4>

08004604 <MemManage_Handler>:
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
 8004608:	e7fe      	b.n	8004608 <MemManage_Handler+0x4>

0800460a <BusFault_Handler>:
 800460a:	b480      	push	{r7}
 800460c:	af00      	add	r7, sp, #0
 800460e:	e7fe      	b.n	800460e <BusFault_Handler+0x4>

08004610 <UsageFault_Handler>:
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
 8004614:	e7fe      	b.n	8004614 <UsageFault_Handler+0x4>

08004616 <DebugMon_Handler>:
 8004616:	b480      	push	{r7}
 8004618:	af00      	add	r7, sp, #0
 800461a:	bf00      	nop
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <SystemInit>:
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
 8004628:	4a16      	ldr	r2, [pc, #88]	; (8004684 <SystemInit+0x60>)
 800462a:	4b16      	ldr	r3, [pc, #88]	; (8004684 <SystemInit+0x60>)
 800462c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004638:	4a13      	ldr	r2, [pc, #76]	; (8004688 <SystemInit+0x64>)
 800463a:	4b13      	ldr	r3, [pc, #76]	; (8004688 <SystemInit+0x64>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f043 0301 	orr.w	r3, r3, #1
 8004642:	6013      	str	r3, [r2, #0]
 8004644:	4b10      	ldr	r3, [pc, #64]	; (8004688 <SystemInit+0x64>)
 8004646:	2200      	movs	r2, #0
 8004648:	609a      	str	r2, [r3, #8]
 800464a:	4a0f      	ldr	r2, [pc, #60]	; (8004688 <SystemInit+0x64>)
 800464c:	4b0e      	ldr	r3, [pc, #56]	; (8004688 <SystemInit+0x64>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	4b0b      	ldr	r3, [pc, #44]	; (8004688 <SystemInit+0x64>)
 800465c:	4a0b      	ldr	r2, [pc, #44]	; (800468c <SystemInit+0x68>)
 800465e:	605a      	str	r2, [r3, #4]
 8004660:	4a09      	ldr	r2, [pc, #36]	; (8004688 <SystemInit+0x64>)
 8004662:	4b09      	ldr	r3, [pc, #36]	; (8004688 <SystemInit+0x64>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800466a:	6013      	str	r3, [r2, #0]
 800466c:	4b06      	ldr	r3, [pc, #24]	; (8004688 <SystemInit+0x64>)
 800466e:	2200      	movs	r2, #0
 8004670:	60da      	str	r2, [r3, #12]
 8004672:	f000 f889 	bl	8004788 <SetSysClock>
 8004676:	4b03      	ldr	r3, [pc, #12]	; (8004684 <SystemInit+0x60>)
 8004678:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800467c:	609a      	str	r2, [r3, #8]
 800467e:	bf00      	nop
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	e000ed00 	.word	0xe000ed00
 8004688:	40023800 	.word	0x40023800
 800468c:	24003010 	.word	0x24003010

08004690 <SystemCoreClockUpdate>:
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	2300      	movs	r3, #0
 8004698:	613b      	str	r3, [r7, #16]
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]
 800469e:	2302      	movs	r3, #2
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	2300      	movs	r3, #0
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	2302      	movs	r3, #2
 80046a8:	607b      	str	r3, [r7, #4]
 80046aa:	4b32      	ldr	r3, [pc, #200]	; (8004774 <SystemCoreClockUpdate+0xe4>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 030c 	and.w	r3, r3, #12
 80046b2:	613b      	str	r3, [r7, #16]
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d007      	beq.n	80046ca <SystemCoreClockUpdate+0x3a>
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d009      	beq.n	80046d2 <SystemCoreClockUpdate+0x42>
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d13d      	bne.n	800473e <SystemCoreClockUpdate+0xae>
 80046c2:	4b2d      	ldr	r3, [pc, #180]	; (8004778 <SystemCoreClockUpdate+0xe8>)
 80046c4:	4a2d      	ldr	r2, [pc, #180]	; (800477c <SystemCoreClockUpdate+0xec>)
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	e03d      	b.n	8004746 <SystemCoreClockUpdate+0xb6>
 80046ca:	4b2b      	ldr	r3, [pc, #172]	; (8004778 <SystemCoreClockUpdate+0xe8>)
 80046cc:	4a2c      	ldr	r2, [pc, #176]	; (8004780 <SystemCoreClockUpdate+0xf0>)
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	e039      	b.n	8004746 <SystemCoreClockUpdate+0xb6>
 80046d2:	4b28      	ldr	r3, [pc, #160]	; (8004774 <SystemCoreClockUpdate+0xe4>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	0d9b      	lsrs	r3, r3, #22
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	4b25      	ldr	r3, [pc, #148]	; (8004774 <SystemCoreClockUpdate+0xe4>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046e6:	607b      	str	r3, [r7, #4]
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00c      	beq.n	8004708 <SystemCoreClockUpdate+0x78>
 80046ee:	4a24      	ldr	r2, [pc, #144]	; (8004780 <SystemCoreClockUpdate+0xf0>)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f6:	4a1f      	ldr	r2, [pc, #124]	; (8004774 <SystemCoreClockUpdate+0xe4>)
 80046f8:	6852      	ldr	r2, [r2, #4]
 80046fa:	0992      	lsrs	r2, r2, #6
 80046fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004700:	fb02 f303 	mul.w	r3, r2, r3
 8004704:	617b      	str	r3, [r7, #20]
 8004706:	e00b      	b.n	8004720 <SystemCoreClockUpdate+0x90>
 8004708:	4a1c      	ldr	r2, [pc, #112]	; (800477c <SystemCoreClockUpdate+0xec>)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004710:	4a18      	ldr	r2, [pc, #96]	; (8004774 <SystemCoreClockUpdate+0xe4>)
 8004712:	6852      	ldr	r2, [r2, #4]
 8004714:	0992      	lsrs	r2, r2, #6
 8004716:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800471a:	fb02 f303 	mul.w	r3, r2, r3
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	4b14      	ldr	r3, [pc, #80]	; (8004774 <SystemCoreClockUpdate+0xe4>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	0c1b      	lsrs	r3, r3, #16
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	3301      	adds	r3, #1
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	fbb2 f3f3 	udiv	r3, r2, r3
 8004738:	4a0f      	ldr	r2, [pc, #60]	; (8004778 <SystemCoreClockUpdate+0xe8>)
 800473a:	6013      	str	r3, [r2, #0]
 800473c:	e003      	b.n	8004746 <SystemCoreClockUpdate+0xb6>
 800473e:	4b0e      	ldr	r3, [pc, #56]	; (8004778 <SystemCoreClockUpdate+0xe8>)
 8004740:	4a0e      	ldr	r2, [pc, #56]	; (800477c <SystemCoreClockUpdate+0xec>)
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	bf00      	nop
 8004746:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <SystemCoreClockUpdate+0xe4>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	091b      	lsrs	r3, r3, #4
 800474c:	f003 030f 	and.w	r3, r3, #15
 8004750:	4a0c      	ldr	r2, [pc, #48]	; (8004784 <SystemCoreClockUpdate+0xf4>)
 8004752:	5cd3      	ldrb	r3, [r2, r3]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	613b      	str	r3, [r7, #16]
 8004758:	4b07      	ldr	r3, [pc, #28]	; (8004778 <SystemCoreClockUpdate+0xe8>)
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	fa22 f303 	lsr.w	r3, r2, r3
 8004762:	4a05      	ldr	r2, [pc, #20]	; (8004778 <SystemCoreClockUpdate+0xe8>)
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	bf00      	nop
 8004768:	371c      	adds	r7, #28
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	40023800 	.word	0x40023800
 8004778:	20000024 	.word	0x20000024
 800477c:	00f42400 	.word	0x00f42400
 8004780:	007a1200 	.word	0x007a1200
 8004784:	20000028 	.word	0x20000028

08004788 <SetSysClock>:
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	2300      	movs	r3, #0
 8004790:	607b      	str	r3, [r7, #4]
 8004792:	2300      	movs	r3, #0
 8004794:	603b      	str	r3, [r7, #0]
 8004796:	4a36      	ldr	r2, [pc, #216]	; (8004870 <SetSysClock+0xe8>)
 8004798:	4b35      	ldr	r3, [pc, #212]	; (8004870 <SetSysClock+0xe8>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	4b33      	ldr	r3, [pc, #204]	; (8004870 <SetSysClock+0xe8>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3301      	adds	r3, #1
 80047b0:	607b      	str	r3, [r7, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d103      	bne.n	80047c0 <SetSysClock+0x38>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80047be:	d1f0      	bne.n	80047a2 <SetSysClock+0x1a>
 80047c0:	4b2b      	ldr	r3, [pc, #172]	; (8004870 <SetSysClock+0xe8>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d002      	beq.n	80047d2 <SetSysClock+0x4a>
 80047cc:	2301      	movs	r3, #1
 80047ce:	603b      	str	r3, [r7, #0]
 80047d0:	e001      	b.n	80047d6 <SetSysClock+0x4e>
 80047d2:	2300      	movs	r3, #0
 80047d4:	603b      	str	r3, [r7, #0]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d142      	bne.n	8004862 <SetSysClock+0xda>
 80047dc:	4a24      	ldr	r2, [pc, #144]	; (8004870 <SetSysClock+0xe8>)
 80047de:	4b24      	ldr	r3, [pc, #144]	; (8004870 <SetSysClock+0xe8>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e6:	6413      	str	r3, [r2, #64]	; 0x40
 80047e8:	4a22      	ldr	r2, [pc, #136]	; (8004874 <SetSysClock+0xec>)
 80047ea:	4b22      	ldr	r3, [pc, #136]	; (8004874 <SetSysClock+0xec>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047f2:	6013      	str	r3, [r2, #0]
 80047f4:	4a1e      	ldr	r2, [pc, #120]	; (8004870 <SetSysClock+0xe8>)
 80047f6:	4b1e      	ldr	r3, [pc, #120]	; (8004870 <SetSysClock+0xe8>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	6093      	str	r3, [r2, #8]
 80047fc:	4a1c      	ldr	r2, [pc, #112]	; (8004870 <SetSysClock+0xe8>)
 80047fe:	4b1c      	ldr	r3, [pc, #112]	; (8004870 <SetSysClock+0xe8>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004806:	6093      	str	r3, [r2, #8]
 8004808:	4a19      	ldr	r2, [pc, #100]	; (8004870 <SetSysClock+0xe8>)
 800480a:	4b19      	ldr	r3, [pc, #100]	; (8004870 <SetSysClock+0xe8>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8004812:	6093      	str	r3, [r2, #8]
 8004814:	4b16      	ldr	r3, [pc, #88]	; (8004870 <SetSysClock+0xe8>)
 8004816:	4a18      	ldr	r2, [pc, #96]	; (8004878 <SetSysClock+0xf0>)
 8004818:	605a      	str	r2, [r3, #4]
 800481a:	4a15      	ldr	r2, [pc, #84]	; (8004870 <SetSysClock+0xe8>)
 800481c:	4b14      	ldr	r3, [pc, #80]	; (8004870 <SetSysClock+0xe8>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	bf00      	nop
 8004828:	4b11      	ldr	r3, [pc, #68]	; (8004870 <SetSysClock+0xe8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0f9      	beq.n	8004828 <SetSysClock+0xa0>
 8004834:	4b11      	ldr	r3, [pc, #68]	; (800487c <SetSysClock+0xf4>)
 8004836:	f240 6205 	movw	r2, #1541	; 0x605
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	4a0c      	ldr	r2, [pc, #48]	; (8004870 <SetSysClock+0xe8>)
 800483e:	4b0c      	ldr	r3, [pc, #48]	; (8004870 <SetSysClock+0xe8>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f023 0303 	bic.w	r3, r3, #3
 8004846:	6093      	str	r3, [r2, #8]
 8004848:	4a09      	ldr	r2, [pc, #36]	; (8004870 <SetSysClock+0xe8>)
 800484a:	4b09      	ldr	r3, [pc, #36]	; (8004870 <SetSysClock+0xe8>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f043 0302 	orr.w	r3, r3, #2
 8004852:	6093      	str	r3, [r2, #8]
 8004854:	bf00      	nop
 8004856:	4b06      	ldr	r3, [pc, #24]	; (8004870 <SetSysClock+0xe8>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 030c 	and.w	r3, r3, #12
 800485e:	2b08      	cmp	r3, #8
 8004860:	d1f9      	bne.n	8004856 <SetSysClock+0xce>
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	40023800 	.word	0x40023800
 8004874:	40007000 	.word	0x40007000
 8004878:	07405408 	.word	0x07405408
 800487c:	40023c00 	.word	0x40023c00

08004880 <puts>:
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7fb fca1 	bl	80001d0 <strlen>
 800488e:	4603      	mov	r3, r0
 8004890:	613b      	str	r3, [r7, #16]
 8004892:	2300      	movs	r3, #0
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	6879      	ldr	r1, [r7, #4]
 800489a:	2001      	movs	r0, #1
 800489c:	f7ff fdf0 	bl	8004480 <_write>
 80048a0:	60f8      	str	r0, [r7, #12]
 80048a2:	2201      	movs	r2, #1
 80048a4:	490b      	ldr	r1, [pc, #44]	; (80048d4 <puts+0x54>)
 80048a6:	2001      	movs	r0, #1
 80048a8:	f7ff fdea 	bl	8004480 <_write>
 80048ac:	4602      	mov	r2, r0
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	4413      	add	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1c5a      	adds	r2, r3, #1
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d102      	bne.n	80048c4 <puts+0x44>
 80048be:	2300      	movs	r3, #0
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	e002      	b.n	80048ca <puts+0x4a>
 80048c4:	f04f 33ff 	mov.w	r3, #4294967295
 80048c8:	617b      	str	r3, [r7, #20]
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	4618      	mov	r0, r3
 80048ce:	3718      	adds	r7, #24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	08004a24 	.word	0x08004a24

080048d8 <__libc_init_array>:
 80048d8:	b570      	push	{r4, r5, r6, lr}
 80048da:	4e0d      	ldr	r6, [pc, #52]	; (8004910 <__libc_init_array+0x38>)
 80048dc:	4c0d      	ldr	r4, [pc, #52]	; (8004914 <__libc_init_array+0x3c>)
 80048de:	1ba4      	subs	r4, r4, r6
 80048e0:	10a4      	asrs	r4, r4, #2
 80048e2:	2500      	movs	r5, #0
 80048e4:	42a5      	cmp	r5, r4
 80048e6:	d109      	bne.n	80048fc <__libc_init_array+0x24>
 80048e8:	4e0b      	ldr	r6, [pc, #44]	; (8004918 <__libc_init_array+0x40>)
 80048ea:	4c0c      	ldr	r4, [pc, #48]	; (800491c <__libc_init_array+0x44>)
 80048ec:	f000 f83a 	bl	8004964 <_init>
 80048f0:	1ba4      	subs	r4, r4, r6
 80048f2:	10a4      	asrs	r4, r4, #2
 80048f4:	2500      	movs	r5, #0
 80048f6:	42a5      	cmp	r5, r4
 80048f8:	d105      	bne.n	8004906 <__libc_init_array+0x2e>
 80048fa:	bd70      	pop	{r4, r5, r6, pc}
 80048fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004900:	4798      	blx	r3
 8004902:	3501      	adds	r5, #1
 8004904:	e7ee      	b.n	80048e4 <__libc_init_array+0xc>
 8004906:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800490a:	4798      	blx	r3
 800490c:	3501      	adds	r5, #1
 800490e:	e7f2      	b.n	80048f6 <__libc_init_array+0x1e>
 8004910:	08004a4c 	.word	0x08004a4c
 8004914:	08004a4c 	.word	0x08004a4c
 8004918:	08004a4c 	.word	0x08004a4c
 800491c:	08004a50 	.word	0x08004a50

08004920 <memcmp>:
 8004920:	b510      	push	{r4, lr}
 8004922:	3901      	subs	r1, #1
 8004924:	4402      	add	r2, r0
 8004926:	4290      	cmp	r0, r2
 8004928:	d101      	bne.n	800492e <memcmp+0xe>
 800492a:	2000      	movs	r0, #0
 800492c:	bd10      	pop	{r4, pc}
 800492e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004932:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004936:	42a3      	cmp	r3, r4
 8004938:	d0f5      	beq.n	8004926 <memcmp+0x6>
 800493a:	1b18      	subs	r0, r3, r4
 800493c:	bd10      	pop	{r4, pc}

0800493e <memcpy>:
 800493e:	b510      	push	{r4, lr}
 8004940:	1e43      	subs	r3, r0, #1
 8004942:	440a      	add	r2, r1
 8004944:	4291      	cmp	r1, r2
 8004946:	d100      	bne.n	800494a <memcpy+0xc>
 8004948:	bd10      	pop	{r4, pc}
 800494a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800494e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004952:	e7f7      	b.n	8004944 <memcpy+0x6>

08004954 <memset>:
 8004954:	4402      	add	r2, r0
 8004956:	4603      	mov	r3, r0
 8004958:	4293      	cmp	r3, r2
 800495a:	d100      	bne.n	800495e <memset+0xa>
 800495c:	4770      	bx	lr
 800495e:	f803 1b01 	strb.w	r1, [r3], #1
 8004962:	e7f9      	b.n	8004958 <memset+0x4>

08004964 <_init>:
 8004964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004966:	bf00      	nop
 8004968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800496a:	bc08      	pop	{r3}
 800496c:	469e      	mov	lr, r3
 800496e:	4770      	bx	lr

08004970 <_fini>:
 8004970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004972:	bf00      	nop
 8004974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004976:	bc08      	pop	{r3}
 8004978:	469e      	mov	lr, r3
 800497a:	4770      	bx	lr
